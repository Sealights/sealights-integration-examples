/// <reference types="cypress" />
import { FileCoverageData } from 'istanbul-lib-coverage';
export declare function constructTestName(specRelativePath: string, suiteName: string, testName: string): string;
export declare function checkAgentLoaded(win: Cypress.AUTWindow, intervalMs?: number, timeoutSeconds?: number): Promise<boolean>;
export declare function sanitizeError(error: {
    name: string;
    message: string;
    response: IErrorResponse & {
        config: IErrorResponseConfig;
    };
}): Error & {
    response: IErrorResponse & IErrorResponseConfig;
};
export declare function filterAndRemoveKeys(functionMapAndCoverage: Pick<FileCoverageData, 'f' | 'fnMap'>): Pick<FileCoverageData, 'f' | 'fnMap'>;
export declare function mapIstanbulCoverage(allCoverageObjects: Record<string, FileCoverageData>): Record<string, FileCoverageData>;
export declare function collectCoverageFromWindow(win: Window): {
    buildSessionId: string;
    coverage: Record<string, FileCoverageData>;
}[];
export declare function getConfigValue(config: Cypress.Config & {
    resolved: Cypress.ResolvedConfigOptions;
}, configKey: string): any;
export declare function isTrue(value: any): boolean;
export interface IErrorResponse {
    statusText: string;
    status: string;
    data: unknown;
}
export interface IErrorResponseConfig {
    url: string;
    baseURL: string;
}
