import { RemoteAgent } from 'slnodejs';
import { ISLConfig } from './config';
declare class TestSessionService {
    private static instance;
    private remoteAgent;
    private baseUrl;
    private testSessionId;
    private requestV1InstanceConfig;
    private requestV2InstanceConfig;
    private excludedTests;
    private configurationError;
    private skippedTests;
    private testEventsMap;
    private SLConfig;
    private constructor();
    static getInstance(): TestSessionService;
    setConfig(slConfig: ISLConfig): Promise<void>;
    private addProxyToConfig;
    private createInstanceV1;
    private createInstanceV2;
    resolveTestSession(): Promise<void>;
    createTestSession(testStage?: string): Promise<void>;
    endTestSession(): Promise<void>;
    getTestRecommendations(): Promise<Record<string, string>>;
    resolveBuildSessionData(): Promise<IBuildSessionData>;
    sendTestEvent(name: string, start: number, end: number, status: string, spec: typeof Cypress.spec): Promise<void>;
    sendCoverage(testName: string, componentCoverageData: {
        buildSessionId: string;
        coverage: any;
    }[]): Promise<void>;
    sendTestEventPerSpec(spec: typeof Cypress.spec): Promise<void>;
    private markTestReported;
    get _testSessionId(): string;
    set _configurationError(hasError: boolean);
    get _configurationError(): boolean;
    set _remoteAgent(remoteAgent: RemoteAgent);
    set _buildSessionId(buildSessionId: string);
    static runServiceMethodSafe(_: unknown, propertyKey: string, descriptor: PropertyDescriptor): PropertyDescriptor;
}
export declare const SealightsTestSessionService: TestSessionService;
export interface IBuildSessionData {
    appName: string;
    branchName: string;
    buildName: string;
    buildSessionId: string;
    buildSessionType: string;
    created: number;
    customerId: string;
    trackingId: string;
}
export interface IRequestResponse<T> {
    body: T;
}
export interface ITestExecution {
    data: {
        testSessionId: string;
    };
}
export {};
