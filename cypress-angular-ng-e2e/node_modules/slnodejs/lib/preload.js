const { resolve } = require('node:path');
const { execSync } = require('node:child_process');

function main() {
    if (process.env.PRELOAD_EXECUTED) {
        console.log('Skipping preload logic on subsequent entry');
        return;
    }

    process.env.PRELOAD_EXECUTED = 1;

    if (require.main === module) {
        console.log('preload.js is the main module, exiting.');
        process.exit(0);
    }

    /**
     * Get path to node executable dynamically
     */
    const pathToSlAgentCli = resolve(__dirname, './cli.js');

    let token = '--tokenFile ./sltoken.txt';
    if (process.env.SL_token) {
        token = `--token ${process.env.SL_token}`;
    } else if (process.env.SL_tokenfile) {
        token = `--tokenFile ${process.env.SL_tokenFile}`;
    }

    let bsid = '--buildSessionIdFile ./buildSessionId';
    if (process.env.SL_buildSessionId) {
        bsid = `--buildSessionId ${process.env.SL_buildSessionId}`;
    } else if (process.env.SL_buildSessionIdFile) {
        bsid = `--buildSessionIdFile ${process.env.SL_buildSessionIdFile}`;
    }

    /**
     * We shouldn't use cli arguments it is just example
     * env or file config should be used
     */
    const [argv0, ...restArgv] = process.argv;
    const originalArgv = process.argv.join(' ');
    const args = `${pathToSlAgentCli} run ${token} ${bsid} --`.split(' ');
    const processArgs = [argv0, ...args, ...restArgv].map(x => x.includes(' ') ? `"${x}"` : x).join(' ');

    try {
        console.info('Rerun main module with args - ', processArgs);
        execSync(processArgs, { stdio: 'inherit' });
        process.exit(0);
    } catch (error) {
        console.error('Error occurred while executing the target script:', error);
        console.info('Run main module with original args - ', originalArgv);
        execSync(originalArgv, { stdio: 'inherit' });
        process.exit(1);
    }
}

process.on('uncaughtException', (error) => {
    console.error('Uncaught Exception:', error);
    process.exit(1);
})

main();
