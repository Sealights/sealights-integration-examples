"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadReportHandler = void 0;
const path = require("path");
const fs = require("fs");
const async = require("async");
const logger_1 = require("../common/logger");
class UploadReportHandler {
    constructor(args, backendProxy, agentData) {
        this.reportRequest = args;
        this.backendProxy = backendProxy;
        this.agentData = agentData;
        this.logger = logger_1.LoggerFactory.getCreateApplicationLogger();
    }
    upload(callback) {
        try {
            const files = this.getAllFiles(this.reportRequest.reportFile, this.reportRequest.reportFilesFolder);
            if (files.length == 0) {
                throw `Couldn't find any reports files in '${this.reportRequest.reportFilesFolder}'.
                       Please specify a folder with valid report files. 'UploadReport' action was aborted`;
            }
            const context = this;
            async.forEachLimit(files.slice(0, -1), 1, (reportFile, next) => {
                const agentData = this.agentData;
                agentData.hasMoreRequests = true;
                const requestBody = this.createRequestBody(agentData, reportFile);
                this.backendProxy.uploadReport(requestBody, (err) => {
                    if (err) {
                        next(err);
                    }
                    else {
                        next(null);
                    }
                });
            }, function (err) {
                if (err) {
                    return callback(err);
                }
                const lastFile = files[files.length - 1];
                const requestBody = context.createRequestBody(context.agentData, lastFile);
                context.backendProxy.uploadReport(requestBody, (err) => {
                    if (err) {
                        callback(err);
                    }
                    else {
                        callback(null);
                    }
                });
            });
        }
        catch (err) {
            callback(err);
        }
    }
    createRequestBody(agentData, reportFile) {
        const requestBody = {
            agentData: agentData,
            reportFile: reportFile
        };
        return requestBody;
    }
    getAllFiles(reportFiles, reportFilesFolders) {
        const files = [];
        // handle reportFilesFolders
        reportFilesFolders.forEach((reportFilesFolder) => {
            try {
                const folderFiles = fs.readdirSync(reportFilesFolder);
                folderFiles.forEach(function (folderFileName) {
                    const stat = fs.statSync(path.join(reportFilesFolder, folderFileName));
                    if (stat.isFile()) {
                        files.push({ filename: folderFileName, buffer: fs.readFileSync(path.join(reportFilesFolder, folderFileName)) });
                    }
                    else {
                        this.logger.debug('[UPLOAD REPORTS] ' + folderFileName + ' is a directory. Ignoring...');
                    }
                });
            }
            catch (err) {
                this.logger.error('[UPLOAD REPORTS] Failed Reading Folder: ' + reportFilesFolder);
            }
        });
        // handle reportFiles
        reportFiles.forEach((reportFilePath) => {
            if (fs.existsSync(reportFilePath)) {
                files.push({ filename: path.basename(reportFilePath), buffer: fs.readFileSync(reportFilePath) });
            }
            else {
                this.logger.error('[UPLOAD REPORTS] reportFile doesn\'t exist. report file: ' + reportFilePath);
            }
        });
        return files;
    }
}
exports.UploadReportHandler = UploadReportHandler;
//# sourceMappingURL=upload-report-handler.js.map