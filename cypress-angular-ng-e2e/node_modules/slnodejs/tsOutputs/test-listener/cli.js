"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeAgentCLI = void 0;
const program = require("commander");
const config_loader_1 = require("./config-process/config-loader");
const command_line_arg_parser_1 = require("./command-line-arg-parser");
const agent_loader_1 = require("./agent-loader");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const Module = require('module');
const nycBinFile = require.resolve('nyc/bin/nyc.js');
//TODO: Agent formal CLIs
class NodeAgentCLI {
    static booleanOption(option) {
        return (option && option.toLowerCase() == 'true');
    }
    static execRun(argv, firstArgIdx) {
        const knownRunOptions = {
            '--cfg': { name: 'cfg' },
            '--token': { name: 'token' },
            '--tokenfile': { name: 'tokenFile' },
            '--appname': { name: 'appName' },
            '--branch': { name: 'branch' },
            '--build': { name: 'build' },
            '--usebranchcoverage': { name: 'useBranchCoverage' },
            '--startagent': { name: 'startAgent', type: 'boolean' }
        };
        const parsedCmd = new command_line_arg_parser_1.CommandLineArgParser().parseCommand(argv, firstArgIdx, knownRunOptions);
        const configLoader = new config_loader_1.ConfigLoader();
        const agentCfg = configLoader.loadAgentConfiguration(parsedCmd.keysAndValues, parsedCmd.keysAndValues['cfg']);
        const spawnNodeArgs = this.getSpawnNodeArgs();
        agent_loader_1.AgentLoader.init(agentCfg, parsedCmd.restArgs, spawnNodeArgs);
    }
    static run() {
        const args = process.argv;
        const cmd = args[2];
        if (cmd == 'run')
            return NodeAgentCLI.execRun(process.argv, 3);
        program
            .command('*', '', { noHelp: true })
            .action(function (cmd) {
            program.help();
        });
        program.parse(process.argv);
    }
    static runUserCode(args) {
        const bootstrapFile = require.resolve('./bootstrap');
        process.argv = [process.argv0, nycBinFile, '-i', bootstrapFile].concat(args);
        Module.runMain();
    }
    static getSpawnNodeArgs() {
        const args = [];
        process.execArgv.forEach(function (arg) {
            if (arg.indexOf('--max_old_space_size') == 0) {
                args.push(arg);
            }
        });
        return args;
    }
}
exports.NodeAgentCLI = NodeAgentCLI;
NodeAgentCLI.run();
//# sourceMappingURL=cli.js.map