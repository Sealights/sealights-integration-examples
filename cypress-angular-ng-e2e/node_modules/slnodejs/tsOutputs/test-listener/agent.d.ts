import { IColoringProvider } from './coloring/icoloring-provider';
import { LogsProcess } from './logs-process';
import { Watchdog } from './watchdog';
import { TestRecommendationHandler } from './test-recommendation-handler';
import { AgentConfig } from '../common/config-process/config';
import { FootprintsProcess } from '../common/footprints-process';
import { FootprintsProcess as FootprintsProcessV6 } from '../common/footprints-process-v6';
import { EventsProcess } from '../common/events-process';
import { StateTracker } from '../common/state-tracker';
import { ConfigProcess } from '../common/config-process';
import { AgentInstanceData } from '../common/agent-instance-data';
import { IToolInfo } from '../common/agent-events/agent-events-contracts';
import { IEvent } from '../common/events-process/events-contracts';
import { Logger } from '../common/contracts';
export declare class NodeJsAgent {
    private _cfg;
    private _footprintsProcess;
    private eventsProcess;
    private logsProcess;
    private stateTracker;
    private configProcess;
    private flushCurrentTestFootprints;
    private coloringProviders;
    private _testRecommendationHandler;
    private agentInstanceData;
    private logger;
    constructor(_cfg: AgentConfig, _footprintsProcess: FootprintsProcessV6, eventsProcess: EventsProcess, logsProcess: LogsProcess, stateTracker: StateTracker, configProcess: ConfigProcess, flushCurrentTestFootprints: Watchdog, coloringProviders: Array<IColoringProvider>, _testRecommendationHandler: TestRecommendationHandler, agentInstanceData: AgentInstanceData, logger: Logger);
    getLogger(component: string): Logger;
    get testRecommendationHandler(): TestRecommendationHandler;
    private isRunning;
    /**
     * Starts the Test Listener
     *
     * @param {(err: Error) => void} [callback] Optional callback that will be called if agent is either disabled, or finished loading (incl. remote config)
     * @returns
     *
     * @memberOf NodeJsAgent
     */
    start(callback?: (err: Error) => void, toolInfo?: IToolInfo): void;
    private isStopping;
    stop(callback: () => void): Promise<void>;
    createExecutionId(): string;
    createTestSuiteId(): string;
    createTestId(executionId: string, testName: string): string;
    setCurrentTestIdentifier(testIdentifier: string): void;
    static getVersion(): string;
    pushEvent(evt: IEvent): void;
    startColoredExecution(executionId: string): Promise<void>;
    get cfg(): AgentConfig;
    get footprintsProcess(): FootprintsProcess | FootprintsProcessV6;
    private registerGlobalAPI;
    private registerShutdownEvents;
    private registerShutdownEventsOnWindows;
}
