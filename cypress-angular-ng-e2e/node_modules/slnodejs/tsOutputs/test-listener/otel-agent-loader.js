"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OtelAgentLoader = void 0;
const agent_instance_data_1 = require("../cli-parse/agent-instance-data");
const process_utils_1 = require("../common/utils/process-utils");
class OtelAgentLoader {
    constructor({ command, useIstanbul = false, agentConfig, logger }) {
        if (!OtelAgentLoader.instance) {
            OtelAgentLoader.instance = this;
            this.setUpOptions({ agentConfig, logger, command, useIstanbul });
        }
        return OtelAgentLoader.instance;
    }
    setUpOptions({ command, useIstanbul = false, agentConfig, logger }) {
        var _a, _b;
        this.useIstanbul = useIstanbul;
        this.runningCommand = command;
        this.agentConfig = agentConfig;
        this.logger = logger;
        this.useOtel = ((_b = (_a = this.agentConfig) === null || _a === void 0 ? void 0 : _a.useOtel) === null || _b === void 0 ? void 0 : _b.value) || false;
    }
    resolveAgentRunningOtelAgent() {
        if (this.runningCommand !== 'mocha' && this.runningCommand !== 'run') {
            return;
        }
        try {
            const { loaded: otelAgentLoaded } = OtelAgentLoader.loadOtelAsModule();
            if (this.useOtel && otelAgentLoaded) {
                OtelAgentLoader.setOtelAgentEnvVariables(this.agentConfig);
                this.resolveUsingIstanbul();
                this.resolveUsingDefaultCommand();
            }
        }
        catch (e) {
            this.logger.warn('SL Otel error in process.', e === null || e === void 0 ? void 0 : e.message);
        }
    }
    resolveUsingIstanbul() {
        if (this.useIstanbul) {
            require((() => 'sl-otel-agent')());
        }
    }
    resolveUsingDefaultCommand() {
        if (!this.useIstanbul) {
            const commandIndex = this.resolveOtelCommandIndex();
            if (commandIndex !== -1) {
                process_utils_1.ProcessUtils.addCommandByIndex({ commandIndex: commandIndex + 1, command: ['-r', 'sl-otel-agent'] });
            }
        }
    }
    resolveOtelCommandIndex() {
        let commandIndex = -1;
        if (this.runningCommand === 'mocha') {
            commandIndex = process_utils_1.ProcessUtils.findMochaBinIndexInProcess();
        }
        if (this.runningCommand === 'run') {
            commandIndex = process_utils_1.ProcessUtils.findLastIndexBinNodeInProcess();
        }
        return commandIndex;
    }
    static setOtelAgentEnvVariables(config) {
        var _a;
        const { loaded, module: { Config } } = OtelAgentLoader.loadOtelAsModule();
        if (!loaded)
            return;
        Config.setEnvVariables({
            build: config.build.value,
            branch: config.branch.value,
            authToken: config.token.value,
            serviceName: config.appName.value,
            clientId: config.customerId.value,
            stageName: config.testStage.value,
            buildSessionId: config.buildSessionId.value,
            agentInstanceId: agent_instance_data_1.agentInstanceData.agentId,
            labId: (_a = config.labId) === null || _a === void 0 ? void 0 : _a.value,
        });
    }
    static loadOtelAsModule() {
        try {
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            const module = require((() => 'sl-otel-agent/module')());
            return ({
                loaded: true,
                module
            });
        }
        catch (e) {
            return ({
                loaded: false,
                module: {}
            });
        }
    }
}
exports.OtelAgentLoader = OtelAgentLoader;
OtelAgentLoader.instance = null;
//# sourceMappingURL=otel-agent-loader.js.map