"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FootprintsServiceProxy = void 0;
const base_proxy_1 = require("../base-proxy");
const messages_formatter_1 = require("../../common/messages-formatter");
class FootprintsServiceProxy extends base_proxy_1.BaseProxy {
    constructor(cfg, request, logger) {
        super(cfg, request, logger);
    }
    submitFootprints(packetToSend, callback) {
        if (!packetToSend) {
            this.logger.info('Submit footprints - got null or empty packet. Skip submitting.');
            return;
        }
        const bufferToSend = new Buffer(JSON.stringify(packetToSend));
        const hitFiles = this.getHitFiles(packetToSend);
        this.logger.debug(`Submitting footprints, tests: ${JSON.stringify(packetToSend.tests)}`);
        this.logger.debug(`Submitting footprints, files: ${hitFiles}`);
        const url = '/v5/agents/footprints';
        this.post(bufferToSend, url, callback);
    }
    getHitFiles(packetToSend) {
        if (!this.logger.isDebugEnabled()) {
            return;
        }
        const formatter = new messages_formatter_1.MessagesFormatter();
        if (packetToSend && packetToSend.apps && packetToSend.apps[0] && packetToSend.apps[0].files) {
            packetToSend.apps[0].files.forEach((file) => {
                formatter.addContent(file.path);
            });
        }
        return formatter.content;
    }
}
exports.FootprintsServiceProxy = FootprintsServiceProxy;
//# sourceMappingURL=footprints-service-proxy.js.map