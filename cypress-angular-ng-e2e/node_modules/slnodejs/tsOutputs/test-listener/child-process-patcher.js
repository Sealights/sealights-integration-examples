"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// eslint-disable-next-line @typescript-eslint/no-var-requires
const childProcess = require('child_process');
const shell_quote_1 = require("shell-quote");
const fs = require("fs");
function isNodeBinary(command) {
    try {
        const source = fs.readFileSync(command, 'utf-8');
        // regex taken from eslint - https://github.com/eslint/eslint/blob/183def6115cad6f17c82ef1c1a245eb22d0bee83/lib/eslint.js#L800
        const result = /^#!([^\r\n]+)/.exec(source);
        if (result && result.length && result[0].indexOf('node') > 0) {
            return true;
        }
        return false;
    }
    catch (err) {
        return false;
    }
}
function isNodeCommand(command) {
    const commandParts = command.split('/');
    const lastPath = commandParts.slice(-1)[0];
    if (lastPath === 'node') {
        return true;
    }
    return false;
}
function wrapper(command, args, checkForCommand, slNodePath) {
    if (checkForCommand && command && isNodeCommand(command)) {
        args.splice(0, 0, slNodePath, 'run');
    }
    else if (command && isNodeBinary(command)) {
        args.splice(0, 0, slNodePath, 'run', command);
        command = process.execPath;
    }
    return command;
}
function execWrapper(slNodePath, exec) {
    return function (command, options, callback) {
        try {
            if (command) {
                const argv = (0, shell_quote_1.parse)(command);
                const commandArg = argv[0];
                const args = argv.splice(1);
                command = wrapper(commandArg, args, true, slNodePath);
                command = [command].concat(args).join(' ');
            }
        }
        catch (err) {
            console.log('Patching exec didn\'t succeed. Reason: ' + err);
        }
        return exec(command, options, callback);
    };
}
function forkWrapper(slNodePath, fork) {
    return function (modulePath, args, options) {
        try {
            if (modulePath) {
                args = args || [];
                modulePath = wrapper(modulePath, args, false, slNodePath);
            }
        }
        catch (err) {
            console.log('Patching fork didn\'t succeed. Reason: ' + err);
        }
        return fork(modulePath, args, options);
    };
}
function execFileWrapper(slNodePath, execFile) {
    return function (file, args, options, callback) {
        try {
            if (file && isNodeBinary(file)) {
                args = args || [];
                file = wrapper(file, args, false, slNodePath);
            }
        }
        catch (err) {
            console.log('Patching execFile didn\'t succeed. Reason: ' + err);
        }
        return execFile(file, args, options, callback);
    };
}
function execFileSyncWrapper(slNodePath, execFileSync) {
    return function (file, args, options) {
        try {
            if (file && isNodeBinary(file)) {
                args = args || [];
                file = wrapper(file, args, false, slNodePath);
            }
        }
        catch (err) {
            console.log('Patching execFileSync didn\'t succeed. Reason: ' + err);
        }
        return execFileSync(file, args, options);
    };
}
function spawnWrapper(slNodePath, spawn) {
    return function (command, args, options) {
        try {
            args = args || [];
            command = wrapper(command, args, true, slNodePath);
        }
        catch (err) {
            console.log('Patching spawn didn\'t succeed. Reason: ' + err);
        }
        return spawn(command, args, options);
    };
}
function spawnSyncWrapper(slNodePath, spawnSync) {
    return function (command, args, options) {
        try {
            args = args || [];
            command = wrapper(command, args, true, slNodePath);
        }
        catch (err) {
            console.log('Patching spawnSync didn\'t succeed. Reason: ' + err);
        }
        return spawnSync(command, args, options);
    };
}
function patchChildProcess(slNodePath) {
    childProcess.spawn = spawnWrapper(slNodePath, childProcess.spawn);
    childProcess.spawnSync = spawnSyncWrapper(slNodePath, childProcess.spawnSync);
    childProcess.exec = execWrapper(slNodePath, childProcess.exec);
    childProcess.execFile = execFileWrapper(slNodePath, childProcess.execFile);
    childProcess.execFileSync = execFileSyncWrapper(slNodePath, childProcess.execFileSync);
    childProcess.fork = forkWrapper(slNodePath, childProcess.fork);
}
module.exports.patchChildProcess = patchChildProcess;
module.exports.spawnWrapper = spawnWrapper;
module.exports.spawnSyncWrapper = spawnSyncWrapper;
module.exports.execWrapper = execWrapper;
module.exports.execFileWrapper = execFileWrapper;
module.exports.execFileSyncWrapper = execFileSyncWrapper;
module.exports.forkWrapper = forkWrapper;
//# sourceMappingURL=child-process-patcher.js.map