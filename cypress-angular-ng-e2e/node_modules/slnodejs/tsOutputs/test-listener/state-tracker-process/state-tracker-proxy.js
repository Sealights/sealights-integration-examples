"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StateTrackerProxy = void 0;
const base_proxy_1 = require("../base-proxy");
class StateTrackerProxy extends base_proxy_1.BaseProxy {
    constructor(cfg, request, logger) {
        super(cfg, request, logger);
        if (!cfg) {
            throw new Error('cfg is required');
        }
        if (!request) {
            throw new Error('request is required');
        }
        if (!logger) {
            throw new Error('logger is required');
        }
    }
    checkMappingStatus(callback) {
        const routeVersion = this.cfg.token.hasValue ? '/v3' : '/v2';
        let url = routeVersion + '/testExecution';
        const queryParams = {
            customerId: this.cfg.customerId.value,
            environment: this.cfg.labId.hasValue && this.cfg.labId.value || this.cfg.environmentName.value
        };
        url += '?customerId=' + queryParams.customerId + '&environment=' + queryParams.environment;
        this.logger.info(`[TO TST] - checkMappingStatus. Url '${url}'.`);
        this.get(url, (err, data) => {
            this.logger.info('[FROM TST] - checkMappingStatus. Had Error: ' + (err != null));
            if (err) {
                this.logger.error('[ACTIVE EXECUTION] Error checking for active execution: ' + err);
                return callback(err, false);
            }
            // No mapping found -> no active execution
            if (!err && data == null) {
                this.logger.info('[ACTIVE EXECUTION] couldn\'t find active execution. not sending footprints.');
                return callback(null, false);
            }
            // execution is pending delete -> no active execution
            if (data.status == 'pendingDelete') {
                this.logger.info('[ACTIVE EXECUTION] execution is pending delete. sending last footprints');
                return callback(null, true);
            }
            // active execution
            if (data.status == null || data.status != 'created') {
                this.logger.warn('[ACTIVE EXECUTION] unexpected status. status: ' + data.status);
            }
            this.logger.info('[ACTIVE EXECUTION] active execution for: ' + JSON.stringify(queryParams) + '. data: ' + JSON.stringify(data));
            return callback(null, true);
        });
    }
}
exports.StateTrackerProxy = StateTrackerProxy;
//# sourceMappingURL=state-tracker-proxy.js.map