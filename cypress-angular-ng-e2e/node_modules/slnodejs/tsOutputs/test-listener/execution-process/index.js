"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Created by nadav on 21/03/2017.
 */
const program = require("commander");
const fs = require("fs");
const request = require("sl-request");
const config_loader_1 = require("../config-process/config-loader");
const logger_1 = require("../../common/logger");
const execution_service_proxy_1 = require("./execution-service-proxy");
const entities_mapper_1 = require("./entities-mapper");
const SEALIGHTS_JSON_FILENAME = './sealights.json';
function splitOption(option) {
    if (option) {
        return option.split(',');
    }
    else {
        return [];
    }
}
function booleanOption(option) {
    return (option.toLowerCase() == 'true');
}
//TODO: Move it do a different location.
function getConfigFromFile() {
    const configLoader = new config_loader_1.ConfigLoader();
    const config = configLoader.loadAgentConfiguration(null, SEALIGHTS_JSON_FILENAME);
    validateConfiguration(config);
    return config;
}
function validateConfiguration(agentConfig) {
    const errors = new Array();
    if (!agentConfig.customerId.hasValue) {
        errors.push('customerId is missing');
    }
    if (!agentConfig.appName.hasValue) {
        errors.push('appName is missing');
    }
    if (!agentConfig.branch.hasValue) {
        errors.push('branch is missing');
    }
    if (!agentConfig.build.hasValue) {
        errors.push('build is missing');
    }
    if (!agentConfig.server.hasValue) {
        errors.push('server is missing');
    }
    if (!agentConfig.token.hasValue && !agentConfig.tokenFile.hasValue) {
        errors.push('token and tokenFile are missing. Please set one of them.');
    }
    if (errors && errors.length > 0) {
        console.error('Wrong configuration. Found the following error(s):');
        errors.forEach((err, i, errors) => {
            console.error('* ' + err);
        });
        process.exit(1);
    }
}
//program.version(version);
/**
 * End Execution for the Generic Agent
 */
program
    .command('end')
    .description('End Execution')
    .action(function (cmd) {
    const agentConfig = getConfigFromFile();
    const config = new entities_mapper_1.EntitiesMapper().toIEndExecutionRequest(agentConfig);
    //TODO: Add validation for the configuration. Repeat in the file.
    const logger = logger_1.LoggerFactory.getCreateApplicationLogger(agentConfig);
    new execution_service_proxy_1.ExecutionServiceProxy(agentConfig, request, logger).endExecution(config, (err) => {
        if (err) {
            process.exit(1);
        }
    });
    // var logger = loggerFactory(config);
    // var needle = new SlNeedle(config.token);
    // new ExecutionService(logger, needle).endExecution(config, function (err) {
    //     if (err) {
    //         process.exit(1);
    //     }
    // });
});
/**
 * Upload Junit Reports for the Generic Agent
 */
program
    .command('uploadReports')
    .description('Upload Reports')
    .option('--reportFile <reportFile>', 'reportFile', splitOption, [])
    .option('--reportFilesFolder <reportFilesFolder>', 'reportFilesFolder', splitOption, [])
    .option('--type <type>', 'type', 'JUnitReport')
    .option('--source <source>', 'source', 'Mocha')
    .option('--hasMoreRequests <hasMoreRequests>', 'hasMoreRequests', booleanOption, true)
    .action(function (cmd) {
    if (!cmd.reportFile && !cmd.reportFilesFolder) {
        console.error('[UPLOAD REPORTS] at least one of --reportFile, --reportFilesFolder must be provided');
        process.exit(1);
    }
    const agentConfig = getConfigFromFile();
    const config = new entities_mapper_1.EntitiesMapper().toIUploadReportRequest(agentConfig);
    config.reportFile = cmd.reportFile;
    config.reportFilesFolder = cmd.reportFilesFolder;
    config.type = cmd.type;
    config.source = cmd.source;
    config.hasMoreRequests = cmd.hasMoreRequests;
    const logger = logger_1.LoggerFactory.getCreateApplicationLogger(agentConfig);
    new execution_service_proxy_1.ExecutionServiceProxy(agentConfig, request, logger).uploadReports(config, (err) => {
        if (err) {
            process.exit(1);
        }
    });
    // var logger = loggerFactory(config);
    // var needle = new SlNeedle((<IConfig>config).token);
    // new ExecutionService(logger, needle).uploadReports(config, function (err) {
    //     if (err) {
    //         process.exit(1);
    //     }
    // });
});
program
    .command('externalReport')
    .description('Upload External Report')
    .option('--report <report>', 'Path to the Sealights\' formatted report file')
    .action(function (cmd) {
    if (!cmd.report) {
        console.log('[UPLOAD EXTERNAL REPORT] --report must be provided');
        process.exit(1);
    }
    const agentConfig = getConfigFromFile();
    const config = new entities_mapper_1.EntitiesMapper().toIUploadReportRequest(agentConfig);
    if (!config.appName || !config.build || !config.branch) {
        console.log('[UPLOAD EXTERNAL REPORT] appName, branch and build must exist in the config file');
        process.exit(1);
    }
    let data = {};
    try {
        const report = fs.readFileSync(cmd.report, 'utf-8');
        data = JSON.parse(report);
    }
    catch (err) {
        console.log('Failed reading and parsing report. Check that path exists and file is a valid json');
        process.exit(1);
    }
    data.appName = config.appName;
    data.buildName = config.build;
    data.branchName = config.branch;
    const logger = logger_1.LoggerFactory.getCreateApplicationLogger(agentConfig);
    new execution_service_proxy_1.ExecutionServiceProxy(agentConfig, request, logger).uploadExternalReport(config, data, (err) => {
        if (err) {
            process.exit(1);
        }
    });
    // var logger = loggerFactory(config);
    // var needle = new SlNeedle(config.token);
    // new ReportService(logger, needle).uploadReport(config, data, function (err) {
    //     if (err) {
    //         process.exit(1);
    //     }
    // });
});
program.parse(process.argv);
//# sourceMappingURL=index.js.map