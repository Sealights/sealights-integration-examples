import { BufferingLogger } from '../../common/logger';
import { LogServiceProxy } from './log-service-proxy';
import { EnvironmentDataService } from '../environment-data-service';
import { Watchdog } from '../watchdog';
import { AgentConfig } from '../../common/config-process/config';
import { AgentInstanceData } from '../../common/agent-instance-data';
import { Logger } from '../../common/contracts';
export declare class LogsProcess {
    private cfg;
    private bufferingLogger;
    private logServiceProxy;
    /**
     * Environments service, used to get environmental data for submission (process id, machine data, etc.)
     */
    private environmentDataService;
    private agentInstanceData;
    /**
     * Background thread that tells the events process to send events from the queue to the server
     */
    private sendToServerWatchdog;
    /**
     * Foreground thread that prevents the process from shutting down, and kept alive while there are items to submit to the server or items are currently being submitted
     */
    private keepaliveWatchdog;
    private logger;
    constructor(cfg: AgentConfig, bufferingLogger: BufferingLogger, logServiceProxy: LogServiceProxy, 
    /**
     * Environments service, used to get environmental data for submission (process id, machine data, etc.)
     */
    environmentDataService: EnvironmentDataService, agentInstanceData: AgentInstanceData, 
    /**
     * Background thread that tells the events process to send events from the queue to the server
     */
    sendToServerWatchdog: Watchdog, 
    /**
     * Foreground thread that prevents the process from shutting down, and kept alive while there are items to submit to the server or items are currently being submitted
     */
    keepaliveWatchdog: Watchdog, logger: Logger);
    private sequence;
    private createLogsPacket;
    private isSubmittingLogs;
    private submitLogBuffer;
    private isRunning;
    start(): void;
    private callStopCallbacks;
    private stopCallbacks;
    stop(callback: () => void): void;
}
