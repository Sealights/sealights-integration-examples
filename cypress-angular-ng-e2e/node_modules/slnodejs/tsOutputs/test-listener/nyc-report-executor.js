"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NycReportExecutor = void 0;
const logger_1 = require("../common/logger");
const environment_data_service_1 = require("../common/environment-data-service");
const istanbul_to_footprints_1 = require("../common/footprints-process/istanbul-to-footprints");
const footprints_service_proxy_1 = require("../common/footprints-process/footprints-service-proxy");
const system_date_1 = require("../common/system-date");
const fs = require("fs");
//TODO: use all constants and interfaces from infra
const DEFAULT_TEST_NAME = '__init';
const DEFAULT_EXECUTION_ID = '00000000-0000-0000-0000-000000000000';
class NycReportExecutor {
    constructor(reportFile, agentConfig, agentInstanceData) {
        if (!reportFile) {
            throw new Error('reportFile must be given');
        }
        if (!agentConfig) {
            throw new Error('agentConfig must be given');
        }
        if (!agentInstanceData) {
            throw new Error('agentInstanceData must be given');
        }
        this.reportFile = reportFile;
        this.agentConfig = agentConfig;
        this.environmentDataService = new environment_data_service_1.EnvironmentDataService(agentConfig);
        this.agentInstanceData = agentInstanceData;
        this.createLogger();
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reportData = this.readReportFile();
                const extendedIstanbulData = this.createExtendedIstanbulData(reportData);
                const footprintsFile = this.convertToFootprints(extendedIstanbulData);
                yield this.submitFootprints(footprintsFile);
                this.logger.lifecycle('Command \'uploadNycReport\' finished successfully');
                return true;
            }
            catch (err) {
                this.logger.error(`Failed to upload nyc report. error: ${err}`);
                return false;
            }
        });
    }
    dryRun(logger) {
        this.logger = logger;
        const reportData = this.readReportFile();
        const extendedIstanbulData = this.createExtendedIstanbulData(reportData);
        return this.convertToFootprints(extendedIstanbulData);
    }
    readReportFile() {
        const content = fs.readFileSync(this.reportFile, { encoding: 'utf8' });
        if (!content) {
            throw new Error('Cannot read report data from: ' + this.reportFile);
        }
        return JSON.parse(content);
    }
    convertToFootprints(extendedIstanbulData) {
        const istanbulToFP = new istanbul_to_footprints_1.IstanbulToFootprints(this.agentConfig, this.logger);
        const footprintsFile = this.createFootprintsFile();
        return istanbulToFP.createFootprintsPackageFromRawData(extendedIstanbulData, footprintsFile);
    }
    submitFootprints(footprintsFile) {
        return new Promise((resolve, reject) => {
            const footprintsProxy = new footprints_service_proxy_1.FootprintsServiceProxy(this.agentConfig, this.agentInstanceData, this.logger);
            footprintsProxy.handleFootprints(footprintsFile, (err) => {
                return err ? reject(err) : resolve();
            });
        });
    }
    createExtendedIstanbulData(rawIstanbulData) {
        return {
            footprints: rawIstanbulData,
            testName: DEFAULT_TEST_NAME,
            executionId: DEFAULT_EXECUTION_ID,
            localTime: (0, system_date_1.getSystemDateValueOf)()
        };
    }
    createFootprintsFile() {
        return {
            customerId: this.agentConfig.customerId.value,
            environment: this.environmentDataService.getEnvDataForSubmission(),
            configurationData: this.agentConfig.toJsonObject(),
            meta: {
                sequence: 0,
                generated: (0, system_date_1.getSystemDateValueOf)(),
                agentId: this.agentInstanceData.agentId,
            },
            tests: [],
            apps: []
        };
    }
    createLogger() {
        this.logger = logger_1.LoggerFactory.getCreateApplicationLogger(this.agentConfig);
    }
}
exports.NycReportExecutor = NycReportExecutor;
//# sourceMappingURL=nyc-report-executor.js.map