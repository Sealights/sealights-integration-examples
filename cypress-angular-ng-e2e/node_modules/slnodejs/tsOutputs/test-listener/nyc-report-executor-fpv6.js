"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NycReportExecutorFpv6 = void 0;
const fs_1 = require("fs");
const cockpit_notifier_1 = require("../common/agent-events/cockpit-notifier");
const collection_interval_1 = require("../common/footprints-process/collection-interval");
class NycReportExecutorFpv6 {
    constructor(backendProxy, hitsCollector, hitsConverter, footprintsBuffer, agentConfig, reportFilePath, logger) {
        this.backendProxy = backendProxy;
        this.hitsCollector = hitsCollector;
        this.hitsConverter = hitsConverter;
        this.footprintsBuffer = footprintsBuffer;
        this.agentConfig = agentConfig;
        this.reportFilePath = reportFilePath;
        this.logger = logger;
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const executionData = yield this.getCurrentExecution();
                const footprintsV6File = yield this.convertToFootprints(executionData.executionId);
                yield this.backendProxy.submitFootprintsV6(footprintsV6File, executionData.buildSessionId, executionData.testStage, this.agentConfig.buildSessionId.value);
                return true;
            }
            catch (e) {
                const message = `Failed to upload nyc report. error '${e}'`;
                cockpit_notifier_1.CockpitNotifier.sendError(message);
                this.logger.error(message);
                return false;
            }
        });
    }
    dryRun() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.convertToFootprints('exid');
        });
    }
    convertToFootprints(executionId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.hitsCollector.globalCoverageObject = this.readReportFile();
            const hitElements = yield this.hitsCollector.getHitElements();
            const convertedFootprints = this.hitsConverter.convertHits(hitElements);
            this.footprintsBuffer.addHit(convertedFootprints, this.getCollectionInterval(), executionId, '', true, true);
            return this.footprintsBuffer.createPacket();
        });
    }
    getCollectionInterval() {
        const collectionInterval = new collection_interval_1.CollectionInterval(this.agentConfig.footprintsCollectIntervalSecs.value);
        collectionInterval.next();
        return collectionInterval.toJson();
    }
    getCurrentExecution() {
        return __awaiter(this, void 0, void 0, function* () {
            const executionResponse = yield this.backendProxy.testExecutionV4(this.agentConfig.labId.value);
            if (!executionResponse.execution) {
                throw new Error('Could not find open execution');
            }
            return executionResponse.execution;
        });
    }
    readReportFile() {
        const content = (0, fs_1.readFileSync)(this.reportFilePath, { encoding: 'utf8' });
        if (!content) {
            throw new Error(`Cannot read report data from: '${this.reportFilePath}'`);
        }
        const parsed = JSON.parse(content);
        this.validateJsonStructure(parsed);
        return parsed;
    }
    validateJsonStructure(obj) {
        Object.keys(obj).forEach(key => {
            const fileCoverage = obj[key].data || obj[key];
            if (!fileCoverage.hasOwnProperty('f') ||
                !fileCoverage.hasOwnProperty('fnMap') ||
                !fileCoverage.hasOwnProperty('b') ||
                !fileCoverage.hasOwnProperty('branchMap')) {
                throw new Error('The provided json file is not in a valid nyc coverage report format');
            }
        });
    }
}
exports.NycReportExecutorFpv6 = NycReportExecutorFpv6;
//# sourceMappingURL=nyc-report-executor-fpv6.js.map