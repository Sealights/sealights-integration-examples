/**
 * Some test frameworks needs (such as testcafe) only TIA ability since coverage is collected in different environment
 * (e.g browser)
 */
import { AgentConfig } from '../common/config-process/config';
import { BackendProxy } from '../common/http/backend-proxy';
import { TestRecommendationHandler } from './test-recommendation-handler';
import { EventsProcess } from '../common/events-process';
import { componentCoverage } from '../common/events-process/events-contracts';
import { RemoteFootprintsProcess } from '../common/footprints-process-v6/remote-footprints-process';
import { RemoteHitsCollector } from '../common/footprints-process-v6/remote-hits-collector';
import { RemoteBrowserHitsConverter } from '../common/footprints-process-v6/remote-browser-hits-converter';
import { StateTracker } from '../common/state-tracker';
import { IComponentConfigData, IExecutionData, Logger } from '../common/contracts';
import { HitsConverter } from '../common/footprints-process-v6/hits-converter';
import { HitsCollector } from '../common/footprints-process-v6/hits-collector';
import { IAgentStartArgs } from '../common/agent-events/agent-events-contracts';
/**
 *  Agent that dose not collects footprints by itself, the coverage collected from another agent (e.g browser)
 */
export declare class RemoteAgent {
    private readonly collectorBackendProxy?;
    private readonly _agentConfig;
    private readonly logger;
    private readonly backendProxy;
    private testRecommendationHandler;
    private eventsProcess;
    private executionId;
    private footprintsProcess;
    private hitsCollector;
    private hitsConverter;
    private stateTracker;
    private queriedBsids;
    private _isStartingExecution;
    constructor(agentConfig: AgentConfig, logger: Logger, backendProxy: BackendProxy, testRecommendationHandler: TestRecommendationHandler, eventsProcess: EventsProcess, footprintsProcess: RemoteFootprintsProcess, hitsCollector: RemoteHitsCollector | HitsCollector, hitsConverter: RemoteBrowserHitsConverter | HitsConverter, stateTracker: StateTracker, collectorBackendProxy?: BackendProxy);
    start(args?: IAgentStartArgs): Promise<void>;
    private getSlMapping;
    stop(): Promise<void>;
    getExcludedTests(): Promise<{
        [name: string]: boolean;
    }>;
    startExecution(): Promise<void>;
    loadExecution(): Promise<void>;
    endExecution(): Promise<void>;
    private buildEndExecutionRequest;
    testStart(testName: string, testSuiteName: string, timestamp?: number): void;
    testEnd(testName: string, testSuiteName: string, duration: number, result: string, coverage: any, timestamp?: number): Promise<void>;
    sendTestCoverage(testName: string, coverage: any): Promise<void>;
    sendComponentsTestCoverage(testName: string, components: IComponentConfigData[]): Promise<void>;
    integTestEnd(testName: string, testSuiteName: string, duration: number, result: string, coverage: componentCoverage, timestamp?: number): Promise<void>;
    getExecutionData(): IExecutionData;
    get agentConfig(): AgentConfig;
    get isStartingExecution(): boolean;
    set isStartingExecution(value: boolean);
}
