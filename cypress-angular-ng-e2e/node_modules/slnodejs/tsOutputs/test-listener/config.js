"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentConfigWithRuntimeArgs = exports.AgentConfig = void 0;
const config_system_1 = require("./config-process/config-system");
class AgentConfig extends config_system_1.BaseConfiguration {
    constructor() {
        super(...arguments);
        /**
         * Sealights agent token (JWT)
         * @type {string}
         * @memberOf Config
         */
        this.token = new config_system_1.StringConfigKey(false);
        this.tokenFile = new config_system_1.StringConfigKey(false);
        this.server = new config_system_1.StringConfigKey(false);
        this.proxy = new config_system_1.StringConfigKey(false);
        this.interval = new config_system_1.NumberConfigKey(false, 10000);
        this.testStatusCheckInterval = new config_system_1.NumberConfigKey(false, 30000);
        this.enabled = new config_system_1.BooleanConfigKey(false, true);
        this.sendFootprints = new config_system_1.BooleanConfigKey(false, true);
        this.sendEvents = new config_system_1.BooleanConfigKey(false, true);
        this.sendLogs = new config_system_1.BooleanConfigKey(false, false);
        this.customerId = new config_system_1.StringConfigKey(false);
        this.appName = new config_system_1.StringConfigKey(false);
        this.branch = new config_system_1.StringConfigKey(false);
        this.build = new config_system_1.StringConfigKey(false);
        this.environmentName = new config_system_1.StringConfigKey(false);
        this.useBranchCoverage = new config_system_1.BooleanConfigKey(false, false);
        this.labId = new config_system_1.StringConfigKey(false);
        this.testStage = new config_system_1.StringConfigKey(false);
        this.httpServerColoring = new config_system_1.BooleanConfigKey(false, false);
        this.httpClientColoring = new config_system_1.BooleanConfigKey(false, false);
        this.useInitialColor = new config_system_1.BooleanConfigKey(false, true);
        this.gzip = new config_system_1.BooleanConfigKey(false, true);
        this.useIstanbul = new config_system_1.BooleanConfigKey(false, false);
        this.enableChildProcessPatcher = new config_system_1.BooleanConfigKey(false, false);
        /**
         * Comma-separated list of loggers. Available: console, file
         */
        this.loggers = new config_system_1.StringConfigKey(false, '');
        /**
        * Port number for coloring
        * */
        this.httpListeningPort = new config_system_1.NumberConfigKey(false, 0);
        this.useFootprintsV3 = new config_system_1.BooleanConfigKey(false, true);
        this.extendedFootprints = new config_system_1.BooleanConfigKey(false, false);
    }
}
exports.AgentConfig = AgentConfig;
class AgentConfigWithRuntimeArgs extends AgentConfig {
    constructor() {
        super(...arguments);
        /**
         * Path to config file
         *
         * @memberOf AgentConfigWithRuntimeArgs
         */
        this.cfg = new config_system_1.StringConfigKey(false);
    }
}
exports.AgentConfigWithRuntimeArgs = AgentConfigWithRuntimeArgs;
//# sourceMappingURL=config.js.map