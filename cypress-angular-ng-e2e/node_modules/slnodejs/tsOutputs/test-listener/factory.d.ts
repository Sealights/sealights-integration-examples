import { EnvironmentDataService } from './environment-data-service';
import { LogsProcess } from './logs-process';
import { StateTrackerProxy } from './state-tracker-process/state-tracker-proxy';
import { NodeJsAgent } from './agent';
import { LogServiceProxy } from './logs-process/log-service-proxy';
import { IColoringProvider } from './coloring/icoloring-provider';
import { TestRecommendationHandler } from './test-recommendation-handler';
import { AgentConfig } from '../common/config-process/config';
import { AgentInstanceData } from '../common/agent-instance-data';
import { Logger, IFootprintsHandler } from '../common/contracts';
import { EventsProcess } from '../common/events-process';
import { FootprintsProcess as FootprintsProcessV6 } from '../common/footprints-process-v6';
import { Watchdog as InfraWatchdog } from '../common/watchdog';
import { ConfigProcess } from '../common/config-process';
import { StateTracker } from '../common/state-tracker';
import { IstanbulToFootprints } from '../common/footprints-process/istanbul-to-footprints';
import { BackendProxy } from '../common/http/backend-proxy';
import { FootprintsBuffer } from '../common/footprints-process-v6/footprints-buffer';
import { RelativePathResolver } from '../common/footprints-process-v6/relative-path-resolver';
import { SourceMapData } from '../common/footprints-process-v6/source-map-data';
import { HitsCollector } from '../common/footprints-process-v6/hits-collector';
import { HitsConverter } from '../common/footprints-process-v6/hits-converter';
import { RemoteAgent } from './remote-agent';
import { RemoteHitsCollector } from '../common/footprints-process-v6/remote-hits-collector';
import { RemoteFootprintsProcess } from '../common/footprints-process-v6/remote-footprints-process';
import { RemoteBrowserHitsConverter } from '../common/footprints-process-v6/remote-browser-hits-converter';
import { CollectorFootprintsBuffer } from '../common/footprints-process-v6/collector-footprints-buffer';
import { CollectorFootprintsProcess } from '../common/footprints-process-v6/collector-footprints-process';
import { NoopStateTracker } from '../common/no-op-state-tracker';
import { NoopConfigProcess } from '../common/config-process/no-op-config-process';
import { CollectorRemoteFootprintsProcess } from '../common/footprints-process-v6/collector-remote-footprints-process';
export declare class NodeAgentFactory {
    private static cfg;
    private static agentInstanceData;
    constructor(cfg: AgentConfig);
    static getAgentInstanceData(): AgentInstanceData;
    private static footprintsHandler;
    getCreateFootprintsHandler(): IFootprintsHandler;
    private static eventsProcesss;
    getCreateEventsProcess(): EventsProcess;
    private static footprintsProcess;
    getCreateFootprintsProcess(): FootprintsProcessV6;
    private static collectorFootprintsProcess;
    getCreateCollectorFootprintsProcess(): CollectorFootprintsProcess;
    private static collectorRemoteFootprintsProcess;
    getCreateCollectorRemoteFootprintsProcess(useRelativeCoverage: any): CollectorRemoteFootprintsProcess;
    shouldCreateFootprintsV6(): boolean;
    getCreateFootprintsProcessV6(logger: Logger, keepaliveWatchdog: InfraWatchdog): FootprintsProcessV6;
    getCreateRemoteFootprintsProcess(useRelativeCoverage: any): RemoteFootprintsProcess;
    private createWatchdog;
    private createWatchdogInfra;
    private createKeepaliveWatchdog;
    private createKeepaliveWatchdogInfra;
    private static configProcess;
    getCreateConfigProcess(): ConfigProcess;
    private static noopConfigProcess;
    getCreateNoopConfigProcess(): NoopConfigProcess;
    private static environmentDataService;
    getCreateEnvironmentDataService(): EnvironmentDataService;
    private static nodeJsAgent;
    getCreateNodeJsAgent(): NodeJsAgent;
    createRemoteAgent(useRelativeCoverage: any): RemoteAgent;
    private static logServiceProxy;
    getCreateLogServiceProxy(): LogServiceProxy;
    private static logsProcess;
    getCreateLogsProcess(): LogsProcess;
    private static stateTracker;
    getCreateStateTracker(): StateTracker;
    private static noopStateTracker;
    getCreateNoopStateTracker(): NoopStateTracker;
    private static stateTrackerProxy;
    getCreateStateTrackerProxy(): StateTrackerProxy;
    private static istanbulToFootprintsConverter;
    getCreateIstanbulToFootprintsCoverter(): IstanbulToFootprints;
    private static applicationLogger;
    getCreateApplicationLogger(): Logger;
    private static coloringProviders;
    getCreateColoringProviders(): IColoringProvider[];
    private static testRecommendationHandler;
    getCreateTestRecommendationHandler(): TestRecommendationHandler;
    private static backendProxy;
    getCreateBackendProxy(): BackendProxy;
    private static collectorBackendProxy;
    getCreateCollectorBackendProxy(): BackendProxy;
    private static footprintsBuffer;
    getCreateFootprintsBuffer(): FootprintsBuffer;
    private static collectorFootprintsBuffer;
    getCreateCollectorFootprintsBuffer(): CollectorFootprintsBuffer;
    private static relativePathResolver;
    getCreateRelativePathResolver(): RelativePathResolver;
    private static sourceMapData;
    getCreateSourceMapData(): SourceMapData;
    private static hitsCollector;
    getCreateHitsCollector(): HitsCollector;
    private static remoteHitsCollector;
    getCreateRemoteHitsCollector(): RemoteHitsCollector;
    private static hitsConverter;
    getCreateHitsConverter(): HitsConverter;
    private static remoteBrowserHitsConverter;
    getCreateRemoteBrowserHitsConverter(): RemoteBrowserHitsConverter;
    static resetAll(): void;
}
