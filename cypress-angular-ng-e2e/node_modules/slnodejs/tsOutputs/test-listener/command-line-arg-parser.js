"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandLineArgParser = void 0;
class CommandLineArgParser {
    parseCommand(argv, firstArgIdx, knownOpts) {
        const restArgs = [];
        const keysAndValues = {};
        function parseRunCommandLineArg(firstArg, allArgs, i) {
            const ret = {
                argumentsConsumed: 0,
                key: null,
                value: null,
                option: null
            };
            const argLowercase = firstArg.toLowerCase();
            if (knownOpts[argLowercase]) {
                ret.key = knownOpts[argLowercase].name;
                ret.value = allArgs[i + 1];
                ret.argumentsConsumed = 1;
                ret.option = knownOpts[argLowercase];
                if (ret.option.type) {
                    switch (ret.option.type) {
                        case 'boolean':
                            if (ret.value == 'true') {
                                ret.value = true;
                            }
                            else if (ret.value == 'false') {
                                ret.value = false;
                            }
                            else {
                                ret.value = true;
                                ret.argumentsConsumed = 0;
                            }
                            break;
                        case 'number':
                            try {
                                ret.value = parseInt(ret.value);
                            }
                            catch (err) {
                                console.error('Error converting value to number: ' + ret.value);
                                ret.value = 0;
                            }
                            break;
                    }
                }
            }
            return ret;
        }
        let finishedProcessingRunArgs = false;
        for (let i = firstArgIdx; i < argv.length; i++) {
            const arg = argv[i];
            if (finishedProcessingRunArgs) {
                restArgs.push(arg);
                continue;
            }
            if (arg.length == 0)
                continue;
            if (arg[0] == '-') {
                const parsedArg = parseRunCommandLineArg(arg, argv, i);
                if (parsedArg.key) {
                    i += parsedArg.argumentsConsumed;
                    if (parsedArg.option.isArray) {
                        keysAndValues[parsedArg.key] = keysAndValues[parsedArg.key] || [];
                        keysAndValues[parsedArg.key].push(parsedArg.value);
                    }
                    else {
                        keysAndValues[parsedArg.key] = parsedArg.value;
                    }
                }
                else {
                    finishedProcessingRunArgs = true;
                    restArgs.push(arg);
                    continue;
                }
            }
            else {
                finishedProcessingRunArgs = true;
                restArgs.push(arg);
                continue;
            }
        }
        return {
            restArgs: restArgs,
            keysAndValues: keysAndValues
        };
    }
}
exports.CommandLineArgParser = CommandLineArgParser;
//# sourceMappingURL=command-line-arg-parser.js.map