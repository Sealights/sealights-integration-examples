"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlGulp = void 0;
/**
 * Created by nadav on 12/03/2017.
 */
const ScanModeData_1 = require("../entities/build-scanner/ScanModeData");
const ConfigModeData_1 = require("../entities/build-scanner/ConfigModeData");
const SlNodeJsProxy_1 = require("../SlNodeJsProxy");
const UserMessageHelper_1 = require("../UserMessageHelper");
const AppNameResolver_1 = require("../resolvers/AppNameResolver");
const BuildResolver_1 = require("../resolvers/BuildResolver");
const BuildSessionIdResolver_1 = require("../resolvers/BuildSessionIdResolver");
const BuildSessionIdFileResolver_1 = require("../resolvers/BuildSessionIdFileResolver");
const TokenResolver_1 = require("../resolvers/TokenResolver");
const ProxyResolver_1 = require("../resolvers/ProxyResolver");
const objectAssign = require("object-assign");
// gulp-util is used to created well-formed plugin errors
// eslint-disable-next-line @typescript-eslint/no-var-requires
const PluginError = require('plugin-error');
/**
 * This class integrates Sealights into Gulp.
 * Among its main responsibilities, it runs the build-scanner and test-listener.
 * */
class SlGulp {
    constructor(slNodeJsProxy) {
        this.slNodeJsProxy = slNodeJsProxy;
        this.userMessageHelper = new UserMessageHelper_1.UserMessageHelper('[SL-GULP]', false);
        this.appNameResolver = new AppNameResolver_1.AppNameResolver(this.userMessageHelper);
        this.buildResolver = new BuildResolver_1.BuildResolver(this.userMessageHelper);
        this.buildSessionIdResolver = new BuildSessionIdResolver_1.BuildSessionIdResolver(this.userMessageHelper);
        this.buildSessionIdFileResolver = new BuildSessionIdFileResolver_1.BuildSessionIdFileResolver(this.userMessageHelper);
        this.tokenResolver = new TokenResolver_1.TokenResolver(this.userMessageHelper);
        this.proxyResolver = new ProxyResolver_1.ProxyResolver(this.userMessageHelper);
        if (!slNodeJsProxy) {
            this.slNodeJsProxy = new SlNodeJsProxy_1.SlNodeJsProxy(this.userMessageHelper);
        }
    }
    runConfigMode(configModeData, callback) {
        if (!this.isEnabled()) {
            return callback(null);
        }
        this.userMessageHelper.println('About to run config mode.');
        if (!configModeData) {
            configModeData = new ConfigModeData_1.ConfigModeData();
        }
        if (!callback) {
            throw new Error('\'callback\' cannot be null or undefined');
        }
        configModeData = objectAssign(new ConfigModeData_1.ConfigModeData(), configModeData);
        configModeData.appName = this.appNameResolver.resolve(configModeData.appName);
        configModeData.build = this.buildResolver.resolve(configModeData.build);
        configModeData.buildSessionId = this.buildSessionIdResolver.resolve(configModeData.buildSessionId);
        configModeData.buildSessionIdFile = this.buildSessionIdFileResolver.resolve(configModeData.buildSessionIdFile);
        configModeData.token = this.tokenResolver.resolve(configModeData.token, configModeData.tokenFile);
        configModeData.proxy = this.proxyResolver.resolve(configModeData.proxy);
        this.slNodeJsProxy.runConfigMode(configModeData, (error) => {
            if (error) {
                const e = new PluginError('gulp-slnodejs', 'SlNodeJS failed while running \'config\' mode. Error: ' + error.message);
                if (e) {
                    console.log('Failed to run \'config\' mode. Error:', e);
                    return callback(e);
                }
            }
            return callback(null);
        });
    }
    runScanMode(scanModeData, callback) {
        if (!this.isEnabled()) {
            return callback(null);
        }
        if (!scanModeData) {
            scanModeData = new ScanModeData_1.ScanModeData();
        }
        if (!callback) {
            throw new Error('\'callback\' cannot be null or undefined');
        }
        scanModeData = objectAssign(new ScanModeData_1.ScanModeData(), scanModeData);
        scanModeData.appName = this.appNameResolver.resolve(scanModeData.appName);
        scanModeData.buildSessionIdFile = this.buildSessionIdFileResolver.resolve(scanModeData.buildSessionIdFile);
        scanModeData.buildSessionId = this.buildSessionIdResolver.resolve(scanModeData.buildSessionId, scanModeData.buildSessionIdFile);
        scanModeData.token = this.tokenResolver.resolve(scanModeData.token, scanModeData.tokenFile);
        scanModeData.proxy = this.proxyResolver.resolve(scanModeData.proxy);
        this.slNodeJsProxy.runScanMode(scanModeData, (error) => {
            if (error) {
                const e = new PluginError('gulp-slnodejs', 'SlNodeJS failed while running \'scan\' mode. Error: ' + error.message);
                if (e) {
                    console.log('Failed to run \'scan\' mode. Error:', e);
                    return callback(e);
                }
            }
            return callback(null);
        });
    }
    isEnabled() {
        if (process.env && process.env['SL_ENABLED']) {
            process.env['SL_ENABLED'].toLowerCase() === 'true';
        }
        return true;
        //return isEnabled;
    }
}
exports.SlGulp = SlGulp;
//# sourceMappingURL=SlGulp.js.map