"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArgumentResolver = void 0;
/**
 * Created by nadav on 12/03/2017.
 */
const fs = require("fs");
const path_1 = require("path");
class ArgumentResolver {
    constructor(userMessageHelper, argumentName) {
        this.userMessageHelper = userMessageHelper;
        this.argumentName = argumentName;
        this.userMessageHelper = userMessageHelper;
    }
    resolve(argument, filePath, environmentVariableName) {
        if (argument) {
            return argument;
        }
        if (filePath) {
            argument = this.tryGetValueFromFile(filePath);
            if (argument) {
                this.userMessageHelper.println('Argument \'' + this.argumentName + '\' resolved from file. Value: ' + argument);
                return argument;
            }
        }
        if (process.env && environmentVariableName) {
            argument = process.env[environmentVariableName];
            if (argument) {
                this.userMessageHelper.println('Argument \'' + this.argumentName + '\' resolved from environment variable (\'' + environmentVariableName + '\'). Value: ' + argument);
                return argument;
            }
            const fileEnvVariable = environmentVariableName + '_FILE';
            filePath = process.env[fileEnvVariable];
            argument = this.tryGetValueFromFile(filePath);
            if (argument) {
                this.userMessageHelper.println('Argument \'' + this.argumentName + '\' resolved from environment variable (\'' + fileEnvVariable + '\'). Value: ' + argument);
                return argument;
            }
        }
        this.userMessageHelper.println('Argument \'' + this.argumentName + '\' could not be resolved');
        return null;
    }
    tryGetValueFromFile(argumentFile) {
        try {
            console.log('1' + argumentFile);
            if (argumentFile) {
                console.log('2' + argumentFile);
                if (fs.existsSync(argumentFile)) {
                    console.log('4' + argumentFile);
                    const contents = fs.readFileSync(argumentFile, 'utf8');
                    return contents;
                }
                this.userMessageHelper.printError('The provided file \'' + (0, path_1.resolve)(argumentFile) + '\' does not exists.');
            }
        }
        catch (e) {
            this.userMessageHelper.printError('Failed to get content of file \'' + (0, path_1.resolve)(argumentFile) + '\'. Error: ', e);
        }
        console.log('3' + argumentFile);
        return null;
    }
}
exports.ArgumentResolver = ArgumentResolver;
//# sourceMappingURL=ArgumentResolver.js.map