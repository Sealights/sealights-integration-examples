"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAgentConfig = exports.bsidResolvedFromLabid = exports.cliArgsToAgentConfig = exports.createRemoteAgent = exports.CockpitNotifier = exports.LoggerFactory = exports.slWindowObject = exports.skipBrowserAgentKey = exports.RemoteAgent = exports.getSystemDateValueOf = void 0;
const token_data_builder_1 = require("./common/utils/token-data-builder");
const backend_proxy_1 = require("./common/http/backend-proxy");
const agent_instance_data_1 = require("./cli-parse/agent-instance-data");
const config_loader_1 = require("./common/config-process/config-loader");
const logger_1 = require("./common/logger");
Object.defineProperty(exports, "LoggerFactory", { enumerable: true, get: function () { return logger_1.LoggerFactory; } });
const factory_1 = require("./test-listener/factory");
const constants_1 = require("./common/constants/constants");
const test_runner_build_session_data_builder_1 = require("./common/utils/test-runner-build-session-data-builder");
var system_date_1 = require("./common/system-date");
Object.defineProperty(exports, "getSystemDateValueOf", { enumerable: true, get: function () { return system_date_1.getSystemDateValueOf; } });
var remote_agent_1 = require("./test-listener/remote-agent");
Object.defineProperty(exports, "RemoteAgent", { enumerable: true, get: function () { return remote_agent_1.RemoteAgent; } });
exports.skipBrowserAgentKey = constants_1.Constants.SKIP_BROWSER_AGENT;
exports.slWindowObject = constants_1.Constants.SL_WINDOW_OBJECT;
var cockpit_notifier_1 = require("./common/agent-events/cockpit-notifier");
Object.defineProperty(exports, "CockpitNotifier", { enumerable: true, get: function () { return cockpit_notifier_1.CockpitNotifier; } });
const logger = logger_1.LoggerFactory.getCreateApplicationLogger();
function createRemoteAgent(cliArgs, useRelativeCoverage = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const agentConfig = yield cliArgsToAgentConfig(cliArgs);
        const agent = new factory_1.NodeAgentFactory(agentConfig).createRemoteAgent(useRelativeCoverage);
        agent.isStartingExecution = !bsidResolvedFromLabid(cliArgs);
        return agent;
    });
}
exports.createRemoteAgent = createRemoteAgent;
function cliArgsToAgentConfig(cliArgs) {
    return __awaiter(this, void 0, void 0, function* () {
        const tokenData = new token_data_builder_1.TokenDataBuilder().build(cliArgs);
        if (!tokenData.isValid) {
            throw new Error('Token is not valid');
        }
        const httpConfig = Object.assign(Object.assign({}, tokenData), { proxy: cliArgs.proxy });
        const backendProxy = new backend_proxy_1.BackendProxy(agent_instance_data_1.agentInstanceData, httpConfig, logger);
        const buildSessionData = yield new test_runner_build_session_data_builder_1.TestRunnerBuildSessionDataBuilder(backendProxy).build(cliArgs);
        if (!buildSessionData) {
            throw new Error('could not resolve build session data');
        }
        backendProxy.updateMetadata({
            buildSessionId: buildSessionData.buildSessionId
        });
        logger.debug(`Resolved build session data ${buildSessionData}`);
        return createAgentConfig(Object.assign(Object.assign(Object.assign(Object.assign({}, cliArgs), tokenData), buildSessionData), { build: buildSessionData.buildName, branch: buildSessionData.branchName }));
    });
}
exports.cliArgsToAgentConfig = cliArgsToAgentConfig;
function bsidResolvedFromLabid(cliArgs) {
    return cliArgs.labid && !cliArgs.buildsessionid && !cliArgs.buildsessionidfile;
}
exports.bsidResolvedFromLabid = bsidResolvedFromLabid;
function createAgentConfig(configJson) {
    const agentConfig = new config_loader_1.ConfigLoader().loadAgentConfiguration({});
    const agentConfigKeys = agentConfig.getLowerCaseToKeyMap();
    Object.keys(configJson).forEach(key => {
        const property = agentConfigKeys[key.toLowerCase()];
        if (property) {
            agentConfig[property].value = configJson[key];
        }
    });
    return agentConfig;
}
exports.createAgentConfig = createAgentConfig;
//# sourceMappingURL=api.js.map