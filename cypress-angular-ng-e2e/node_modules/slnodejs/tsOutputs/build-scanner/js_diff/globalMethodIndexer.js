/**
 * This class holds a global method index in the entire build.
 * The index used in the 'idxInMapping' field in reported methods.
 * @type {{ignoredMethodsMap: {}, index: number, incrementIndex: globalMethodIndexer1.incrementIndex}}
 */
function GlobalMethodIndexer() {
    this.index = 0;
    this.ignoredMethodsMap = {};
}
GlobalMethodIndexer.prototype.incrementIndex = function () {
    this.index++;
};
GlobalMethodIndexer.prototype.getCurrentIndex = function () {
    return this.index;
};
GlobalMethodIndexer.prototype.setIgnoredMethod = function (methodIndex) {
    this.ignoredMethodsMap[methodIndex] = true;
};
GlobalMethodIndexer.prototype.isMethodIgnored = function (methodIndex) {
    return this.ignoredMethodsMap[methodIndex];
};
GlobalMethodIndexer.prototype.resetData = function () {
    this.index = 0;
    this.ignoredMethodsMap = {};
};
module.exports = new GlobalMethodIndexer();
//# sourceMappingURL=globalMethodIndexer.js.map