"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserSlMapper = exports.SlMapper = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const mkdirp_1 = require("mkdirp");
/**
 * Map between uniqueId in generated file to relevant uniqueId in source file.
 * This object will be added to 'window' object due to instrumentation, in order to resolve uniquId's in browser agent
 * @constructor
 */
class SlMapper {
    constructor(outputPath, backendProxy, buildSessionId, logger) {
        this.outputPath = outputPath;
        this.backendProxy = backendProxy;
        this.buildSessionId = buildSessionId;
        this.logger = logger;
        this._sourcePathMappings = new Map();
    }
    addMapping(source, target) {
        this._sourcePathMappings.set(source, target);
    }
    toJSON() {
        const mappings = {};
        this._sourcePathMappings.forEach((value, key) => {
            mappings[key] = value;
        });
        return mappings;
    }
    submitMapping(uniqueModuleId) {
        return __awaiter(this, void 0, void 0, function* () {
            const blobId = uniqueModuleId ? `${SlMapper.BLOB_ID}-${uniqueModuleId}` : SlMapper.BLOB_ID;
            return this.backendProxy.submitBlobAsync(this.toJSON(), this.buildSessionId, blobId);
        });
    }
}
exports.SlMapper = SlMapper;
SlMapper.BLOB_ID = 'sl-mapping';
class BrowserSlMapper extends SlMapper {
    writeToFile() {
        const filePath = (0, path_1.resolve)(this.outputPath);
        const outputFolder = (0, path_1.dirname)(filePath);
        (0, mkdirp_1.sync)(outputFolder);
        const fileContent = this.getFileContent();
        try {
            (0, fs_1.writeFileSync)(filePath, fileContent);
        }
        catch (e) {
            this.logger.error(`Failed to write sl-mapping file Error: ${e}`);
        }
    }
    getFileContent() {
        return 'var slMapping =' + JSON.stringify(this.toJSON(), null, '\t') + '\n' +
            '        if(window && (!window.$Sealights || !window.$Sealights.slMapping)){\n' +
            '            window.$Sealights = window.$Sealights  || {};\n' +
            '            window.$Sealights.slMapping = slMapping;\n' +
            '        }';
    }
}
exports.BrowserSlMapper = BrowserSlMapper;
//# sourceMappingURL=sl-mapper.js.map