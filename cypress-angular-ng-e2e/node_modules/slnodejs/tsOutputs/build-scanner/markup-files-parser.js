var ValidationUtils = require("../common/utils/validation-utils").ValidationUtils;
var regex = /<script[\s\S]*?>[\s\S]*?<\/script>/gi;
/*
    This class used for handling markup files (i.e: html, ftl).
    This class can find all script tags in file and return them as one piece of code or as array.
*/
function MarkupFileParser(fileContent, filename, logger) {
    ValidationUtils.verifyNotNullOrEmpty(fileContent, "fileContent");
    ValidationUtils.verifyNotNullOrEmpty(filename, "filename");
    ValidationUtils.verifyNotNullOrEmpty(logger, "logger");
    this.fileContent = fileContent;
    this.filename = filename;
    this.logger = logger;
    this.scriptTags = [];
    this.extractScriptTags = function () {
        var tagsArray = this.fileContent.match(regex) || [];
        if (tagsArray.length === 0) {
            this.logger.info(`no script tags found in '${this.filename}'`);
        }
        for (var i = 0; i < tagsArray.length; i++) {
            var currentTag = tagsArray[i];
            var jsCode = extractJsCodeFromTag(currentTag);
            var linesToAdd = calculateLinesToAdd(jsCode);
            this.scriptTags.push(new ScriptTag(jsCode, linesToAdd));
        }
    };
    this.getPaddedTags = function () {
        var paddedTags = [];
        for (var i = 0; i < this.scriptTags.length; i++) {
            var scriptTag = this.scriptTags[i];
            paddedTags.push(scriptTag.padContent());
        }
        return paddedTags;
    };
    this.getAllJsInFile = function () {
        var tags = this.scriptTags;
        var allJsCode = "";
        for (var i = 0; i < tags.length; i++) {
            var currentTag = tags[i];
            var linesSoFar = allJsCode.match(/\n/g) || [];
            var linesToRemove = Array(linesSoFar.length).fill("\n").join("");
            allJsCode += currentTag.padContent().replace(linesToRemove, "");
        }
        return allJsCode;
    };
    function calculateLinesToAdd(jsCode) {
        var contentUntilTag = fileContent.substring(0, fileContent.indexOf(jsCode));
        var count = contentUntilTag.match(/\n/g) || [];
        return count.length;
    }
    function extractJsCodeFromTag(tagAsString) {
        var codeStartIndex = tagAsString.indexOf(">") + 1;
        var codeEndIndex = tagAsString.lastIndexOf("<");
        return tagAsString.substring(codeStartIndex, codeEndIndex);
    }
}
function ScriptTag(content, offset) {
    this.content = content;
    this.offset = offset;
    this.getPadding = function () {
        var padding = "";
        for (var i = 0; i < this.offset; i++) {
            padding += '\n';
        }
        return padding;
    };
    this.padContent = function () {
        return this.getPadding() + this.content;
    };
}
module.exports = MarkupFileParser;
//# sourceMappingURL=markup-files-parser.js.map