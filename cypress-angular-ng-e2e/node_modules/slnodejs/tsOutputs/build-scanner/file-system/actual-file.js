var fs = require('fs');
var path = require("path");
var sourceMap = require("source-map");
var fileAndFolderUtils = require('../file-and-folder-utils');
var utils = require('../utils');
var SourceMapReader = require("../../common/source-map-reader").SourceMapReader;
// TODO: refactor to normal module
function readSourceMaps(sourceMapData, fullFilename, logger) {
    try {
        if (!sourceMapData) {
            return null;
        }
        var consumer = new sourceMap.SourceMapConsumer(sourceMapData);
        return consumer;
    }
    catch (e) {
        logger.warn(`Failed while reading source map for '${fullFilename}'`);
        logger.warn(e);
        return null;
    }
}
function readRawSourceMaps(fullFilename, fileContent, logger) {
    var log = logger.child({
        methodName: "readSourceMaps"
    });
    if (!fullFilename || !fileContent) {
        log.warn("'fullFilename' and 'fileContent' cannot be null or empty");
        log.debug(`fullFilename: '${fullFilename}'`);
        return null;
    }
    try {
        var reader = new SourceMapReader(fullFilename, logger);
        return reader.readSourceMapData(fileContent);
    }
    catch (e) {
        logger.warn(`Failed while reading source map for '${fullFilename}'`);
        logger.warn(e);
        return null;
    }
}
function readSourceMapsWithRaw(fullFilename, fileContent, logger) {
    var rawSourceMaps = readRawSourceMaps(fullFilename, fileContent, logger);
    var sourceMapConsumer = readSourceMaps(rawSourceMaps, fullFilename, logger);
    return {
        rawSourceMaps: rawSourceMaps,
        consumer: sourceMapConsumer
    };
}
function ActualFile(relativeFileName, fullFilename) {
    this.fullFilename = fullFilename;
}
ActualFile.prototype.getContent = function ActualFile$getContent() {
    if (!this.content) {
        this.content = fs.readFileSync(this.fullFilename, 'utf-8');
    }
    return this.content;
};
ActualFile.prototype.readSourceMaps = function ActualFile$readSourceMaps(logger) {
    var rawSourceMaps = readRawSourceMaps(this.fullFilename, this.getContent(), logger);
    return readSourceMaps(rawSourceMaps, logger);
};
ActualFile.prototype.readSourceMapsWithRaw = function ActualFile$readSourceMaps(logger) {
    return readSourceMapsWithRaw(this.fullFilename, this.getContent(), logger);
};
module.exports = ActualFile;
//# sourceMappingURL=actual-file.js.map