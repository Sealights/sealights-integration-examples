"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceMapsEraser = void 0;
const glob_1 = require("glob");
const fs_1 = require("fs");
const skip_copy_source_maps_1 = require("./skip-copy-source-maps");
class SourceMapsEraser extends skip_copy_source_maps_1.SkipCopySourceMaps {
    constructor(logger, workspace, pattern = '**/*.js.map') {
        super(pattern);
        this.logger = logger;
        this.workspace = workspace;
        this.pattern = pattern;
    }
    isShouldSkipCopy(path) {
        return this.ignoredForCopyFilesHandler.ignores(path);
    }
    remove() {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: update glob package to v10 and use Promise version (have impact on files order)
            const files = glob_1.glob.sync(this.pattern, {
                cwd: this.workspace,
                absolute: true,
            });
            if (!files.length) {
                this.logger.warn(`Source map files were not found. Nothing to remove`);
                return;
            }
            for (const path of files) {
                (0, fs_1.unlinkSync)(path);
            }
            this.logger.warn(`${files.length} source map files were deleted from '${this.workspace}' folder`);
        });
    }
}
exports.SourceMapsEraser = SourceMapsEraser;
//# sourceMappingURL=source-maps-eraser.js.map