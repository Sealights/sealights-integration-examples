var BuildDiffProcess = require("./build-diff-process.js").BuildDiffProcess, LoggerFactory = require("../common/logger").LoggerFactory, expandCommaSeparatedValues = require('./utils').expandCommaSeparatedValues, BackendProxy = require("../common/http/backend-proxy").BackendProxy, ScmFactory = require("../common/scm/scm-factory").ScmFactory, DependencyUtils = require("../common/utils/dependency-utils").DependencyUtils, DefaultValuesResolver = require('./default-values-resolver'), agentInstanceData = require('./current-agent-instance'), utils = require('./utils.js'), BuildScanDiagnosis = require('./diagnostic').BuildScanDiagnosis, DryRunDiagnosis = require('./diagnostic').DryRunDiagnosis, // should be changed
NoneDiagnosis = require('./diagnostic').NoneDiagnosis;
function CIA() {
}
CIA.prototype.run = function run(buildArguments, callback) {
    //TODO: Better way to retrieve the version number
    // console.log('SeaLights Build agent ' + require("../package.json").version);
    var context = this;
    this.setDefaultsArguments(buildArguments);
    var logger = LoggerFactory.getCreateApplicationLogger();
    printConfiguration(buildArguments, logger);
    try {
        var parsedDependencies = context._tryParseDependenciesForIntegrationBuild(buildArguments, logger);
        var buildMappingProxy = new BackendProxy(agentInstanceData, buildArguments, logger);
        context.runBuildDiffProcess(buildMappingProxy, parsedDependencies, buildArguments, logger, callback);
    }
    catch (e) {
        callback(e);
    }
};
CIA.prototype.dryRun = function (dryRunProxy, buildArguments, logger) {
    this.setDefaultsArguments(buildArguments);
    buildArguments.isDryRunMode = true;
    buildArguments.enableDiagnostic = true;
    var diagnosticCollector = buildArguments.enableDiagnostic ? new DryRunDiagnosis(buildArguments.buildSessionId, dryRunProxy) : new NoneDiagnosis();
    return new BuildDiffProcess(buildArguments, dryRunProxy, new ScmFactory(), [], logger, diagnosticCollector).run(buildArguments);
};
CIA.prototype.runBuildDiffProcess = function (buildMappingProxy, parsedDependencies, buildArguments, logger, callback) {
    var diagnosticCollector = buildArguments.enableDiagnostic ? new BuildScanDiagnosis(buildArguments.buildSessionId, buildMappingProxy, buildArguments.diagnosticThreshold) : new NoneDiagnosis();
    var buildDiffProcess = new BuildDiffProcess(buildArguments, buildMappingProxy, new ScmFactory(), parsedDependencies, logger, diagnosticCollector);
    buildDiffProcess.run(buildArguments).then(function () {
        shutdownAgent(logger, buildArguments, null, callback);
    }).catch(function (err) {
        logger.error('Shutdown agent: ' + err);
        shutdownAgent(logger, buildArguments, err, callback);
    });
};
CIA.prototype.setDefaultsArguments = function (buildArguments) {
    var defaults = this._createDefaults();
    for (var i in defaults) {
        if (!buildArguments[i]) {
            buildArguments[i] = defaults[i];
        }
    }
    buildArguments.includedFiles = expandCommaSeparatedValues(buildArguments.includedFiles);
    buildArguments.excludedFiles = expandCommaSeparatedValues(buildArguments.excludedFiles);
};
CIA.prototype._tryParseDependenciesForIntegrationBuild = function (buildArguments, logger) {
    try {
        if (buildArguments.dependency) {
            return DependencyUtils.parseDependencies(buildArguments.dependency, logger);
        }
        else if (buildArguments.dependenciesFile) {
            return DependencyUtils.parseDependenciesFile(utils.readJsonSync(buildArguments.dependenciesFile), logger);
        }
        else
            return [];
    }
    catch (err) {
        logger.error(`Error parsing dependencies ${err}`);
    }
};
CIA.prototype._createDefaults = function () {
    var defaultValuesResolver = new DefaultValuesResolver();
    return {
        "includedFiles": defaultValuesResolver.getIncludedFiles(),
        "excludedFiles": defaultValuesResolver.getExcludedFiles(),
        "sendCommitTitles": defaultValuesResolver.getSendCommitTitles(),
        "prefixesOfExcludedFiles": process.env["SL_prefixesOfExcludedFiles"] ? process.env["SL_prefixesOfExcludedFiles"] : "~, :, webpack, node_modules",
        "delayShutdownInSeconds": 30
    };
};
function printConfiguration(cfg, logger) {
    logger.info("***************************************************************");
    logger.info("Current Configuration: ");
    logger.info("***************************************************************");
    for (p in cfg) {
        if (typeof cfg[p] != "function") {
            logger.info(`${p}: ${cfg[p]}`);
        }
    }
    logger.info("***************************************************************");
}
//TODO: [SLDEV-4709] Verify if we can remove this completely. Should check how SlNodeJS invokes it.
function sendLastLogs(cfg, logger, callback) {
    if (cfg.sendLogs) {
        logger.remoteStream.checkBuffer(true, function (err) {
            callback();
        });
    }
    else {
        callback();
    }
}
function shutdownAgent(logger, cfg, err, callback) {
    sendLastLogs(cfg, logger, function () {
        callback(err);
    });
}
module.exports.CIA = CIA;
//# sourceMappingURL=cia.js.map