"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseContentToAST = void 0;
const parser_1 = require("@babel/parser");
const cockpit_notifier_1 = require("../common/agent-events/cockpit-notifier");
const logger_1 = require("../common/logger");
const logger = logger_1.LoggerFactory.getCreateApplicationLogger();
function getDecoratorsPlugin(babylonPlugins, filename) {
    const decoratorsLegacy = 'decorators-legacy';
    if (babylonPlugins.indexOf(decoratorsLegacy) > -1) {
        logger.info(`Using '${decoratorsLegacy}' plugin to parse ast for '${filename}'`);
        return;
    }
    return ['decorators', { decoratorsBeforeExport: true }];
}
function getParserPlugins(babylonPlugins, filename) {
    babylonPlugins = babylonPlugins || [];
    const decoratorsPlugin = getDecoratorsPlugin(babylonPlugins, filename);
    if (decoratorsPlugin) {
        babylonPlugins.push(decoratorsPlugin);
    }
    return babylonPlugins;
}
function parseContentToAST(content, opts, filename, diagnostic) {
    var _a;
    const sourceType = (opts && opts.es6Modules) ? 'module' : 'script';
    const plugins = getParserPlugins(opts && opts.babylonPlugins, filename);
    diagnostic.usedPlugins(filename, plugins);
    const file = (0, parser_1.parse)(content, {
        sourceType: sourceType,
        plugins: plugins,
        errorRecovery: true
    });
    if ((_a = file === null || file === void 0 ? void 0 : file.errors) === null || _a === void 0 ? void 0 : _a.length) {
        cockpit_notifier_1.CockpitNotifier.sendWarning(`File '${filename}' parsed to AST with the following error(s): ${file.errors.map(e => e.message)}`);
    }
    return file;
}
exports.parseContentToAST = parseContentToAST;
//# sourceMappingURL=ast-utils.js.map