"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilesDataContainer = void 0;
class FilesDataContainer {
    constructor() {
        this._files = {};
    }
    get files() {
        return Object.values(this._files);
    }
    addFile(file) {
        if (!(file.absolutePath in this._files)) {
            this._files[file.absolutePath] = file;
        }
    }
    addMethod(path, method) {
        var _a;
        this._files[path] = this._files[path] || this.createEmptyFileData(path);
        const index = this._files[path].methods.push(method) - 1;
        this._files[path].positionToMethod[method.position.join(',')] = index;
        this._files[path].endPositionToMethod[method.endPosition.join(',')] = index;
        if ((_a = method.meta.identifierPosition) === null || _a === void 0 ? void 0 : _a.every(x => x !== null)) {
            this._files[path].positionToMethod[method.meta.identifierPosition.join(',')] = index;
        }
    }
    addBranch(path, branch) {
        this._files[path] = this._files[path] || this.createEmptyFileData(path);
        const index = this._files[path].branches.push(branch) - 1;
        this._files[path].positionToBranch[`${branch.position.join(',')}|${branch.index}`] = index;
    }
    createEmptyFileData(cleanPath) {
        return {
            lines: [],
            methods: [],
            branches: [],
            logicalPath: cleanPath,
            physicalPath: '',
            hash: '',
            fromSourceMaps: true,
            positionToMethod: {},
            positionToBranch: {},
            endPositionToMethod: {}
        };
    }
}
exports.FilesDataContainer = FilesDataContainer;
//# sourceMappingURL=files-data-container.js.map