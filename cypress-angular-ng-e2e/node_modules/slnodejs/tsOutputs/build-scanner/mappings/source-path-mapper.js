"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourcePathMapper = void 0;
class SourcePathMapper {
    constructor(buildSessionId, backendProxy) {
        this.buildSessionId = buildSessionId;
        this.backendProxy = backendProxy;
        this._sourcePathMappings = new Map();
    }
    addMapping(sourcePath, resolvedPath) {
        this._sourcePathMappings.set(sourcePath, resolvedPath);
    }
    addSource(sourcePath, resolvedPath) {
        this._sourcePathMappings.set(sourcePath, resolvedPath);
    }
    toJSON() {
        const mappings = {};
        this._sourcePathMappings.forEach((value, key) => {
            mappings[key] = value;
        });
        return mappings;
    }
    submitMapping() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.backendProxy.submitBlobAsync(this.toJSON(), this.buildSessionId, 'source-path-mapping');
        });
    }
}
exports.SourcePathMapper = SourcePathMapper;
//# sourceMappingURL=source-path-mapper.js.map