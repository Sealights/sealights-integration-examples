"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsFileInstrumentationStrategy = void 0;
const instrumented_file_size_reducer_1 = require("../instrumented-file-size-reducer");
const fs_1 = require("fs");
const validation_utils_1 = require("../../../common/utils/validation-utils");
class JsFileInstrumentationStrategy {
    constructor(config, instrumenter, preamble, logger, cockpitNotifier) {
        this.config = config;
        this.instrumenter = instrumenter;
        this.preamble = preamble;
        this.logger = logger;
        this.cockpitNotifier = cockpitNotifier;
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(config, 'config');
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(instrumenter, 'instrumenter');
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(preamble, 'preamble');
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(logger, 'logger');
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(cockpitNotifier, 'cockpitNotifier');
    }
    process(inputFile, outputFile, fileKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const content = this.getContent(inputFile);
            let instrumentedContent = this.instrumenter.instrumentContent(content, fileKey);
            instrumentedContent = this.postInstrumentation(instrumentedContent, fileKey);
            (0, fs_1.writeFileSync)(outputFile, instrumentedContent, 'utf8');
        });
    }
    getContent(inputFile) {
        const contentBuffer = (0, fs_1.readFileSync)(inputFile);
        return contentBuffer.toString();
    }
    postInstrumentation(instrumentedContent, fileKey) {
        // TODO - when newInstrumenter is used instead of the current instrumenter remove the use of reduceFileSize
        if (this.config.shouldReduceInstrumentedFileSize && !this.config.newInstrumenter) {
            instrumentedContent = this.reduceFileSize(instrumentedContent, fileKey, this.config.omitInstrumentedFunctionMap);
        }
        instrumentedContent = this.addPreamble(instrumentedContent);
        return instrumentedContent;
    }
    addPreamble(instrumentedContent) {
        if (!instrumentedContent)
            return instrumentedContent;
        // Regular expression to match variations of "use strict"
        const useStrictRegex = /^(["']use strict["'];?)/;
        let contentToPrepend = '';
        // Check if instrumentedContent starts with a variation of "use strict"
        const match = instrumentedContent.match(useStrictRegex);
        if (match) {
            contentToPrepend = match[1];
            // Remove the matched "use strict" from the original content
            instrumentedContent = instrumentedContent.substring(contentToPrepend.length).trim();
        }
        // Concatenate the preamble and instrumentedContent, prepending any "use strict" if found
        return [contentToPrepend, ...this.preamble, instrumentedContent].filter(Boolean).join('\n');
    }
    reduceFileSize(instrumentedCode, fileKey, omitInstrumentedFunctionMap) {
        return (0, instrumented_file_size_reducer_1.reduceContentSize)(fileKey, instrumentedCode, this.config.babylonPlugins, !this.config.useBranchCoverage, this.config.shouldMinifyInstrumentedOutput, this.logger, this.cockpitNotifier, this.config.experimentalSizeReduction, omitInstrumentedFunctionMap);
    }
}
exports.JsFileInstrumentationStrategy = JsFileInstrumentationStrategy;
//# sourceMappingURL=js-instrumnetation-strategy.js.map