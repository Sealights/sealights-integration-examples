"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const files_instrumenter_1 = require("../files-instrumenter");
const logger_1 = require("../../../common/logger");
const contracts_1 = require("./contracts");
const args = JSON.parse(process.argv[2]);
const params = args.config;
const preambleHeader = args.preambleHeader;
const logger = logger_1.LoggerFactory.getCreateSubprocessLogger(process);
const cockpitNotifierPiggyback = {
    sendError(message) {
        process.send({
            type: contracts_1.PROCESS_MESSAGE_TYPE.COCKPIT_NOTIFY,
            payload: { message },
        });
    },
};
const filesInstrumenter = new files_instrumenter_1.FilesInstrumenter(params, preambleHeader, logger, cockpitNotifierPiggyback);
process.on('message', (task) => __awaiter(void 0, void 0, void 0, function* () {
    const result = yield filesInstrumenter.processSingleFileAsync(task.inputFile, task.skipInstrumentation);
    process.send({ type: contracts_1.PROCESS_MESSAGE_TYPE.INSTRUMENTATION_RESULT, payload: result });
}));
//# sourceMappingURL=instrumenter-spawn.js.map