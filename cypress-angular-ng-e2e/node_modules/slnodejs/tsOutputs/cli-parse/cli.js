"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const custom_commander_1 = require("./custom-commander");
const config_executor_1 = require("./executors/config-executor");
const pr_config_executor_1 = require("./executors/pr-config-executor");
const build_executor_1 = require("./executors/build-executor");
const mocha_executor_1 = require("./executors/mocha-executor");
const run_executor_1 = require("./executors/run-executor");
const start_execution_executor_1 = require("./executors/start-execution-executor");
const end_execution_executor_1 = require("./executors/end-execution-executor");
const upload_report_executor_1 = require("./executors/upload-report-executor");
const nyc_report_executor_1 = require("./executors/nyc-report-executor");
const integration_build_update_components_executor_1 = require("./executors/integration-build-update-components-executor");
const integration_build_delete_components_executor_1 = require("./executors/integration-build-delete-components-executor");
const build_end_executor_1 = require("./executors/build-end-executor");
const dry_run_executor_1 = require("./executors/dry-run/dry-run-executor");
const constants_1 = require("./constants/constants");
const logger_1 = require("../common/logger");
const contracts_1 = require("./contracts");
const options = {
    'token': 'Token (mandatory if tokenfile is not provided). case-sensitive.',
    'tokenfile': 'Token File (mandatory if token is not provided). case-sensitive.',
    'appname': 'Application name. case-sensitive.',
    'branch': 'Branch name. case-sensitive.',
    'build': 'Build id. Should be unique between builds. case-sensitive',
    'buildsessionid': 'Build Session Id (mandatory if buildsessionidfile is not provided). case-sensitive.',
    'buildsessionidfile': 'Build Session Id File (mandatory if buildsessionid is not provided). case-sensitive.',
    'proxy': 'Proxy server (optional, must be a valid URL. in the form of \'http://127.0.0.1:3333\').',
    'failbuild': 'Fail Build, Flag indicating whether or not to exit with status code 1 if command fails. Default is false',
    'usebranchcoverage': 'Branch Coverage, Flag indicating whether or not to collect branch cover coverage. Default is false',
    'workspacepath': 'Path to the workspace where the source code exists',
    'excludedpaths': 'Comma-separated list of excluded paths glob strings, in the form of \'public/**/*.js,files/**/*.js',
    'jobName': 'The CI job name that triggered the build.',
    'logsUrl': 'The logs url of the build.',
    'commit': 'Commit ID, as provided by the SCM',
    'scm': 'The Source Control Management used (currently only \'git\' is supported)',
    'dependency': 'Project dependencies. Pattern should be a semicolon-separated AppName@Branch@Build list.',
    'dependenciesFile': 'A path to a json file that is in the following format: [{"appname":"","branch":"","build":"","buildSessionId":""},{...}]. Every entry may include appName+branch+build OR buildSessionID',
    'teststage': 'The tests stage (e.g \'integration tests\', \'regression\'). The default will be \'Unit Tests\'',
    'labid': 'Lab Id. case-sensitive.',
    'testgroupid': 'Test-group Id. case-sensitive.',
    'useinitialcolor': 'Run in generic mode for unsupported test frameworks. Default is false',
    'reportFile': 'Report files. This argument can be declared multiple times in order to upload multiple files.',
    'reportFilesFolder': 'Folders that contains nothing but report files. All files in folder will be uploaded. ' +
        'This argument can be declared multiple times in order to upload multiple files from multiple folders.',
    'hasMoreRequests': 'Flag indicating whether or not to stop execution after upload. Default is true',
    'type': 'Type of test report. Default is JUnitReport',
    'source': 'Source of test framework. Default is Mocha',
    'report': 'Path to the relevant Sealights formatted json report.',
    'httpServerColoring': 'Enable coloring for the server, meaning that the server can be colored by incoming requests and return the color on its responses',
    'httpClientColoring': 'Enable coloring for the client, meaning that the client can be colored by responses from the server and send colors for outgoing requests',
    'useslnode2': '(Deprecated) this option isn\'t supported.',
    'uniqueModuleId': 'Unique module id, case-sensitive. This value should remain consistent between runs.',
    'downloadAgent': 'Set this value to \'false\' in order to prevent the instrumented javascript to try and download the browser test listener (for example, when using \'Karma\').',
    'es6Modules': 'Use ES6 \'module\' mode when scanning files.',
    'useBabylon': 'Use babylon for scanning files',
    'instrumentationOnly': 'When provided with \'instrumentForBrowsers\', prevents a new build from being reported to Sealights.',
    'instrumentForBrowsers': 'Use this in order to instrument the javascript for working with the browser test listener.',
    'sendContributors': 'Send contributor details for advanced committer reports and features',
    'delayShutdownInSeconds': 'Shutdown time in seconds for the browser agent. Default is 30 seconds.',
    'shouldSetEnv': 'Should override NODE_ENV value. ',
    'nodeEnvValue': 'Values used when override NODE_ENV value, separated by comma',
    'skipUpgrade': 'Should not try to upgrade agent',
    'scmProvider': 'The provider name of your Source Control Management (SCM) tool. Supported values are \'Github\', \'Bitbucket\' and \'Gitlab\'. If not used, \'Github\' is assumed.',
    'scmVersion': 'The version of your Source Control Management (SCM) tool. If left blank, cloud version is assumed. Otherwise, specify the version of your on-premise server.',
    'scmBaseUrl': 'The URL to the repository which contains the code. If left blank, the url of the remote GIT origin is being used.',
    'babylonPlugins': 'List of non default babylon parser plugins, separated by comma. (list of plugins: https://github.com/babel/babel/tree/master/packages/babylon#plugins)',
    'nycReport': 'Path to the relevant nyc json report.',
    'projectRoot': 'Determine the root directory of project, default is current working directory',
    'repositoryUrl': 'Repository url of the target branch',
    'pullRequestNumber': 'Pull request number',
    'latestCommit': 'Head SHA of the pull request source',
    'targetBranch': 'Target branch of the pull request',
    'userDefinedBuildSessionId': 'Provide build session id manually',
    'enforceFullRun': 'Overrides test selection configuration (deprecated, please use tiaDisabled instead).',
    'componentIds': 'a list of comma-separated components bsids',
    'ok': 'build finished successfully',
    'failed': 'build finished not successfully',
    'folderDepth': 'Folder depth for printing unique ids in dry run command, default is 3',
    'hasNycReport': 'Should parse nyc coverage report, default is false',
    'verbose': 'Show verbose output',
    'useModulePrefix': 'Add uniqueModuleId as prefix (if exists) to uniqueId and files path',
    'collectorUrl': 'The url to Sealights collector will be used to collect footprints from browser environment',
    'enableOpenTelemetry': 'Enable open-telemetry instrumentation when working with the browser test listener. Defaults to false.',
    'allowCORS': 'Comma separated origins (* to enable propagation everywhere) to which headers should be propagated on each outgoing Fetch/XHR call. Defaults to current origin only, enableOpenTelemetry must be true for this option.',
    'resolveWithoutHash': 'resolveWithoutHash. Default is true.',
    'sourceHash': 'Enable generation of method hash from source files instead of generated code.',
    'outputpath': 'outputpath',
    'footprintsMapping': 'Determine where browser footprint will be resolved against sl-mapping, options are: \'agent\', \'server\'. Default is \'agent\'.',
    'excludeSourceMapFiles': `Define how source maps will be processed. 'skipCopy' source maps will be copied to 'output' during the instrumentation. 'skipAndDelete' source files also will be deleted from 'workspace' also. 'none' - source maps will be copied as is. By default - 'skipCopy'. When not provider - 'none'.`,
    'es6Classes': 'Use adjustments for esClasses and update uniqueIds during the scan. Use it when you scan ts classes that later transpiled to es6 classes.',
    'enrichPrivateMethods': 'Use adjustments for esClasses during the scan. Use it when you need to enrich methods with accesibility modifier.',
    'awsConfigure': 'Creates sl-config file in each sub-directory of the workspace path. The file will contain the necessary Sealights configuration for the Node Lambda layer.',
    'tiaDisabled': 'Disregard TIA recommendations and run all tests',
    'enrichByLinesMatch': 'Enable experimental algorithm of method metching',
    'newInstrumenter': 'Use sl-istanbul-lib-instrument instead of istanbul-lib-instrument',
};
const customCommander = new custom_commander_1.CustomCommander();
const program = customCommander.getCommander();
program
    .command(contracts_1.COMMANDS.CONFIG)
    .description('Create a buildSessionId')
    .option('--tokenfile <tokenfile>', options.tokenfile)
    .option('--token <token>', options.token)
    .requiredOption('--appname <appname>', options.appname)
    .requiredOption('--branch <branch>', options.branch)
    .requiredOption('--build <build>', options.build)
    .option('--buildsessionid <buildsessionid>', options.userDefinedBuildSessionId)
    .option('--buildsessionidfile <buildsessionidfile>', options.buildsessionidfile)
    .option('--proxy <proxy>', options.proxy)
    .option('--failbuild <failbuild>', options.failbuild, false)
    .option('--skipUpgrade', options.skipUpgrade, booleanOption, false)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new config_executor_1.ConfigExecutor().execute(cmd);
    });
});
program
    .command(contracts_1.COMMANDS.PR_CONFIG)
    .description('Create a buildSessionId for pull request integration')
    .option('--tokenfile <tokenfile>', options.tokenfile)
    .option('--token <token>', options.token)
    .requiredOption('--appname <appname>', options.appname)
    .requiredOption('--targetBranch <targetBranch>', options.targetBranch)
    .requiredOption('--latestCommit <latestCommit>', options.latestCommit)
    .requiredOption('--pullRequestNumber <pullRequestNumber>', options.pullRequestNumber)
    .requiredOption('--repositoryUrl <repositoryUrl>', options.repositoryUrl)
    .option('--proxy <proxy>', options.proxy)
    .option('--buildsessionidfile <buildsessionidfile>', options.buildsessionidfile)
    .option('--failbuild <failbuild>', options.failbuild, false)
    .option('--skipUpgrade', options.skipUpgrade, booleanOption, false)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new pr_config_executor_1.PRConfigExecutor().execute(cmd);
    });
});
function createBuildOptions({ command, description }) {
    return createCommand(command)
        .description(description)
        .option('--workspacepath <workspacepath>', options.workspacepath)
        .option('--scm <scm>', options.scm)
        .option('--usebranchcoverage [usebranchcoverage]', options.usebranchcoverage, booleanOption, false)
        .option('--excludedpaths <excludedpaths>', options.excludedpaths)
        .option('--jobName <jobName>', options.jobName)
        .option('--logsUrl <logsUrl>', options.logsUrl)
        .option('--commit  <commit>', options.commit)
        .option('--dependency <dependency>', options.dependency, csvToArray)
        .option('-d, --dependenciesFile <dependenciesFile>', options.dependenciesFile)
        .option('--recursive', 'recursive', true)
        .option('--instrumentForBrowsers', options.instrumentForBrowsers, false)
        .option('--es6Modules', options.es6Modules, false)
        .option('--useBabylon [useBabylon]', options.useBabylon, booleanOption, true)
        .option('--sendContributors [sendContributors]', options.sendContributors, booleanOption, true)
        .option('--delayShutdownInSeconds <n>', options.delayShutdownInSeconds, parseInt)
        .option('--instrumentationOnly', options.instrumentationOnly, false)
        .option('--resolveWithoutHash [resolveWithoutHash]', options.resolveWithoutHash, booleanOption, true) // not in use hardcoded to `true` during instrumnetation
        .option('--sourceHash', options.sourceHash)
        .option('--outputpath <outputpath>', options.outputpath)
        .option('--uniqueModuleId <uniqueModuleId>', options.uniqueModuleId)
        .option('--downloadAgent <downloadAgent>', options.downloadAgent)
        .option('--scmProvider <scmProvider>', options.scmProvider)
        .option('--scmBaseUrl <scmBaseUrl>', options.scmBaseUrl)
        .option('--scmVersion <scmVersion>', options.scmVersion)
        .option('--babylonPlugins <babylonPlugins>', options.babylonPlugins, csvToArray)
        .option('--projectRoot <projectRoot>', options.projectRoot)
        .option('--labid <labid>', options.labid)
        .option('--useModulePrefix', options.useModulePrefix, false)
        .option('--collectorUrl <collectorUrl>', options.collectorUrl)
        .option('--footprintsMapping <footprintsMapping>', options.footprintsMapping, 'agent')
        .option('--enableOpenTelemetry', options.enableOpenTelemetry, false)
        .option('--allowCORS <allowCORS>', options.allowCORS)
        .option('--excludeSourceMapFiles [mode]', options.excludeSourceMapFiles)
        .option('--es6Classes [es6Classes]', options.es6Classes)
        .option('--enrichPrivateMethods [enrichPrivateMethods]', options.enrichPrivateMethods)
        .option('--awsConfigure', options.awsConfigure, false)
        .option('-l, --enrichByLinesMatch', options.enrichByLinesMatch, false)
        // TODO - remove after new instrumenter has enough usage.
        .option('--newInstrumenter', options.newInstrumenter, false)
        .action(function (cmd) {
        return __awaiter(this, void 0, void 0, function* () {
            yield new build_executor_1.BuildExecutor()
                .setAliasCommand(command)
                .execute(cmd);
        });
    });
}
function createBuildEndOptions({ command, description }) {
    return createCommand(command, false)
        .description(description)
        .option('--ok', options.ok)
        .option('--failed', options.failed)
        .action(function (cmd) {
        return __awaiter(this, void 0, void 0, function* () {
            yield new build_end_executor_1.BuildEndExecutor()
                .setAliasCommand(command)
                .execute(cmd);
        });
    });
}
createBuildEndOptions({
    command: contracts_1.COMMANDS.BUILD_END,
    description: `Notify sealighs for end of build and status. Deprecated, use 'scanned' instead.`
});
createBuildEndOptions({
    command: contracts_1.COMMANDS.SCANNED,
    description: `Notify sealighs for end of build and status`
});
createBuildOptions({
    command: contracts_1.COMMANDS.SCAN,
    description: 'Run Build Scanner'
});
createBuildOptions({
    command: contracts_1.COMMANDS.BUILD,
    description: `Run Build Scanner. Deprecated, use 'scan' instead.`
});
createCommand(`${contracts_1.COMMANDS.MOCHA} [args...]`)
    .description('Run Unit Tests with Mocha')
    .option('--usebranchcoverage [usebranchcoverage]', options.usebranchcoverage, booleanOption, false)
    // command specific options
    .option('--teststage <teststage>', options.teststage, 'Unit Tests')
    .option('--labid <labid>', options.labid, undefined)
    .option('--testgroupid <testgroupid>', options.testgroupid, undefined)
    .option('--useslnode2 [useslnode2]', options.useslnode2, booleanOption, true)
    .option('--httpServerColoring', options.httpServerColoring, false)
    .option('--httpClientColoring', options.httpClientColoring, false)
    .option('--resolveWithoutHash [resolveWithoutHash]', options.resolveWithoutHash, booleanOption, true)
    .option('--projectRoot <projectRoot>', options.projectRoot)
    .option('--enforceFullRun', options.enforceFullRun, false)
    .option('--tiaDisabled', options.tiaDisabled, booleanOption, false)
    .action(function (args, cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new mocha_executor_1.MochaExecutor().execute(cmd, args);
    });
});
createCommand(`${contracts_1.COMMANDS.JASMINE} [args...]`)
    .description('Run tests with jasmine-node')
    .option('--usebranchcoverage [usebranchcoverage]', options.usebranchcoverage, booleanOption, false)
    // command specific options
    .option('--teststage <teststage>', options.teststage, 'Unit Tests')
    .option('--labid <labid>', options.labid, undefined)
    // general options
    .action(function () {
    notifyDeprecatedCommand(contracts_1.COMMANDS.JASMINE);
});
createCommand(`${contracts_1.COMMANDS.MOCHA_PHANTOM_JS} [args...]`)
    .description('Create \'sl-hooks.js\' for integration with mocha-phantomjs')
    // command specific options
    .option('--labid <labid>', options.labid, undefined)
    .option('--resolveWithoutHash [resolveWithoutHash]', options.resolveWithoutHash, booleanOption, true)
    // general options
    .action(function () {
    notifyDeprecatedCommand(contracts_1.COMMANDS.MOCHA_PHANTOM_JS);
});
createCommand(`${contracts_1.COMMANDS.RUN} [args...]`)
    .description('Run Program with Agent')
    .option('--usebranchcoverage [usebranchcoverage]', options.usebranchcoverage, booleanOption, false)
    // command specific options
    .option('--teststage <teststage>', options.teststage, 'Unit Tests')
    .option('--proxy <proxy>', options.proxy)
    .option('--useinitialcolor <useinitialcolor>', options.useinitialcolor, false)
    .option('--workspacepath <workspacepath>', options.workspacepath, '.')
    .option('--labid <labid>', options.labid, undefined)
    .option('--useslnode2 [useslnode2]', options.useslnode2, booleanOption, true)
    .option('--httpServerColoring', options.httpServerColoring, false)
    .option('--httpClientColoring', options.httpClientColoring, false)
    .option('--collectorUrl <collectorUrl>', options.collectorUrl)
    .option('--projectRoot <projectRoot>', options.projectRoot)
    // general options
    .action(function (args, cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new run_executor_1.RunExecutor().execute(cmd, args);
    });
});
/**
 * Start Execution for the Generic Agent
 */
createCommand(contracts_1.COMMANDS.START)
    .description('Start Execution')
    .option('--teststage <teststage>', options.teststage, 'Unit Tests')
    .option('--labid <labid>', options.labid, undefined)
    .option('--testgroupid <testgroupid>', options.testgroupid)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new start_execution_executor_1.StartExecutionExecutor().execute(cmd);
    });
});
/**
 * End Execution for the Generic Agent
 */
createCommand(contracts_1.COMMANDS.END)
    .description('End Execution')
    .option('--labid <labid>', options.labid, undefined)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new end_execution_executor_1.EndExecutionExecutor().execute(cmd);
    });
});
/**
 * Upload Junit Reports for the Generic Agent
 */
createCommand(contracts_1.COMMANDS.UPLOAD_REPORTS)
    .description('Upload Reports')
    .option('--labid <labid>', options.labid, undefined)
    .option('--reportFile <reportFile>', options.reportFile, csvToArray, [])
    .option('--reportFilesFolder <reportFilesFolder>', options.reportFilesFolder, csvToArray, [])
    .option('--type <type>', options.type, 'JUnitReport')
    .option('--source <source>', options.source, 'Mocha')
    .option('--hasMoreRequests [hasMoreRequests]', options.hasMoreRequests, booleanOption, true)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new upload_report_executor_1.UploadReportExecutor().execute(cmd);
    });
});
createCommand(contracts_1.COMMANDS.EXTERNAL_REPORT)
    .description('Upload External Report')
    .option('--report <report>', options.report)
    .action(function () {
    notifyDeprecatedCommand(contracts_1.COMMANDS.EXTERNAL_REPORT);
});
createCommand(contracts_1.COMMANDS.NYC_REPORT)
    .description('Upload nyc report')
    .option('--labid <labid>', options.labid, undefined)
    .option('--report <report>', options.nycReport, nyc_report_executor_1.NycReportExecutor.DEFAULT_NYC_REPORT_FILE_LOC)
    .option('--projectRoot <projectRoot>', options.projectRoot)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new nyc_report_executor_1.NycReportExecutor().execute(cmd);
    });
});
createCommand(contracts_1.COMMANDS.COMPONENT_UPDATE)
    .description('Add/update components to an integration build')
    .option('--componentIds <componentIds>', options.componentIds, csvToArray)
    .option('--componentFile <componentFile>', options.dependenciesFile)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new integration_build_update_components_executor_1.IntegrationBuildUpdateComponentsExecutor().execute(cmd);
    });
});
createCommand(contracts_1.COMMANDS.COMPONENT_DELETE)
    .description('Delete components to an integration build')
    .option('--componentIds <componentIds>', options.componentIds, csvToArray)
    .option('--componentFile <componentFile>', options.dependenciesFile)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new integration_build_delete_components_executor_1.IntegrationBuildDeleteComponentsExecutor().execute(cmd);
    });
});
program
    .command(contracts_1.COMMANDS.INSTALL_BABEL)
    .description('Set babel config to support sealights')
    .option('--nodeEnvValue <nodeEnvValue>', options.nodeEnvValue, csvToArray)
    // general options
    .option('--skipUpgrade', options.skipUpgrade, booleanOption, false)
    .action(function () {
    notifyDeprecatedCommand(contracts_1.COMMANDS.INSTALL_BABEL);
});
program
    .command(contracts_1.COMMANDS.DRY_RUN)
    .description('Dry run mode for the node agent')
    .allowUnknownOption()
    .option('--workspacepath <workspacepath>', options.workspacepath)
    .option('--scm <scm>', options.scm, 'none')
    .option('--usebranchcoverage [usebranchcoverage]', options.usebranchcoverage, booleanOption, false)
    .option('--excludedpaths <excludedpaths>', options.excludedpaths)
    .option('--instrumentForBrowsers', options.instrumentForBrowsers, false)
    .option('--es6Modules', options.es6Modules, false)
    .option('--babylonPlugins <babylonPlugins>', options.babylonPlugins, csvToArray)
    .option('--buildScanProjectRoot <buildScanProjectRoot>', `${options.projectRoot} applied for build scanner`)
    .option('--nycProjectRoot <nycProjectRoot>', `${options.projectRoot} applied for nycReport`)
    .option('--instrumentationOnly', options.instrumentationOnly, false)
    .option('--outputpath <outputpath>', options.outputpath)
    .option('--folderDepth <folderDepth>', options.folderDepth, constants_1.DEFAULT_FOLDER_DEPTH)
    .option('--usebranchcoverage [usebranchcoverage]', options.usebranchcoverage, booleanOption, false)
    .option('--verbose', options.verbose, false)
    .option('--hasNycReport', options.hasNycReport, false)
    .option('--report <report>', options.nycReport, nyc_report_executor_1.NycReportExecutor.DEFAULT_NYC_REPORT_FILE_LOC)
    .option('--sourceHash', options.sourceHash)
    .option('--excludeSourceMapFiles [mode]', options.excludeSourceMapFiles)
    .option('--es6Classes [es6Classes]', options.es6Classes)
    .option('--enrichPrivateMethods [enrichPrivateMethods]', options.enrichPrivateMethods)
    .option('-l, --enrichByLinesMatch [enrichByLinesMatch]', options.enrichByLinesMatch)
    // TODO - remove after new instrumenter has enough usage.
    .option('--newInstrumenter', options.newInstrumenter, false)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new dry_run_executor_1.DryRunExecutor().execute(cmd);
    });
});
(function checkUnknownCommand() {
    var _a, _b;
    try {
        const currentCommand = (_a = program === null || program === void 0 ? void 0 : program.args) === null || _a === void 0 ? void 0 : _a[0];
        const isCommandUnknown = !!(program.commands.filter(v => v._name === currentCommand).length);
        if (isCommandUnknown) {
            logger_1.LoggerFactory.getCreateApplicationLogger().lifecycle(`Unknown command ${(_b = program === null || program === void 0 ? void 0 : program.args) === null || _b === void 0 ? void 0 : _b[0]}`);
            process.exit(1);
        }
    }
    catch (e) { }
})();
program.parse(process.argv);
if (!process.argv.slice(2).length) {
    printHelpAndExit();
}
if (!program._actionResults.length) {
    console.error(`Unknown command: ${process.argv[2]}`);
    printHelpAndExit();
}
function printHelpAndExit() {
    program.outputHelp();
    process.exit(1);
}
function csvToArray(raw) {
    const trimmedValues = [];
    raw.split(',').forEach((val) => {
        if (val)
            trimmedValues.push(val.trim());
    });
    return trimmedValues;
}
function booleanOption(option) {
    return (option && option.toLowerCase() == 'true');
}
function notifyDeprecatedCommand(commandName) {
    logger_1.LoggerFactory.getCreateApplicationLogger().lifecycle(`Command ${commandName} is not supported anymore.
    If you still using it please use slnodejs version lower or equals to 3.5.265.
    Or connect Sealights team`);
}
function createCommand(name, addOldParams = true) {
    const command = program.command(name)
        .option('--tokenfile <tokenfile>', options.tokenfile)
        .option('--token <token>', options.token)
        .option('--buildsessionid <buildsessionid>', options.buildsessionid)
        .option('--buildsessionidfile <buildsessionidfile>', options.buildsessionidfile)
        .option('--failbuild <failbuild>', options.failbuild, false)
        .option('--proxy <proxy>', options.proxy)
        .option('--skipUpgrade', options.skipUpgrade, booleanOption, false);
    // Unused params
    if (addOldParams) {
        command.option('--appname <appname>', options.appname)
            .option('--branch <branch>', options.branch)
            .option('--build <build>', options.build);
    }
    return command;
}
//# sourceMappingURL=cli.js.map