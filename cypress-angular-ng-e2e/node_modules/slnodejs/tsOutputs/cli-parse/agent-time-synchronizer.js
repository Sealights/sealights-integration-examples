"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentTimeSynchronizer = void 0;
const http_client_1 = require("../common/http/http-client");
const backend_proxy_1 = require("../common/http/backend-proxy");
const system_date_1 = require("../common/system-date");
const agent_time_1 = require("../common/agent-time");
class AgentTimeSynchronizer extends agent_time_1.AgentTime {
    constructor(syncIntervalSec, logger, agentBaseData, agentInstanceData) {
        super(syncIntervalSec, logger);
        this.agentBaseData = agentBaseData;
        this.agentInstanceData = agentInstanceData;
    }
    static getCreateAgentTimeSynchronizer(syncIntervalSec, logger, agentBaseData, agentInstanceData) {
        return (this._instance ||
            (this._instance = new this(syncIntervalSec, logger, agentBaseData, agentInstanceData)));
    }
    getSynchronizationTime() {
        return __awaiter(this, void 0, void 0, function* () {
            const timeSyncResult = { offset: 0 };
            const config = Object.assign(Object.assign({}, this.agentBaseData), { server: this.agentBaseData.origin, defaultTimeout: agent_time_1.AgentTime.DEFAULT_TIMEOUT });
            const httpClientMetadata = {
                agentId: this.agentInstanceData.agentId,
                buildSessionId: this.agentBaseData.buildSessionId,
                agentType: this.agentInstanceData.agentType,
                agentTechnology: this.agentInstanceData.technology,
            };
            const httpClient = new http_client_1.HttpClient(config, httpClientMetadata, this.logger);
            const backendProxy = new backend_proxy_1.BackendProxy(this.agentInstanceData, config, this.logger, httpClient);
            try {
                const time = yield backendProxy.getSyncedTime((0, system_date_1.getSystemDateValueOf)());
                if (time === null || time === void 0 ? void 0 : time.offset) {
                    timeSyncResult.offset = Number(time.offset);
                }
            }
            catch (error) {
                this.logger.error(error);
            }
            return timeSyncResult;
        });
    }
}
exports.AgentTimeSynchronizer = AgentTimeSynchronizer;
//# sourceMappingURL=agent-time-synchronizer.js.map