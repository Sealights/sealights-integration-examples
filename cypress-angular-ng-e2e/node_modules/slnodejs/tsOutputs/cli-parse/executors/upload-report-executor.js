"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadReportExecutor = void 0;
const api_1 = require("../../test-listener/api");
const test_executions_executor_1 = require("./test-executions-executor");
class UploadReportExecutor extends test_executions_executor_1.TestExecutionsExecutor {
    constructor() {
        super(...arguments);
        this.commandName = 'UploadReports';
    }
    innerExecute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise(resolve => {
                const agentData = this.createAgentData(args);
                const request = this.createRequest(args);
                return (0, api_1.uploadReports)(request, this.baseData, agentData, (err) => err ? resolve(false) : resolve(true));
            });
        });
    }
    mapArgs(args) { }
    validateArgs(args) {
        if (args.reportFile.length == 0 && args.reportFilesFolder.length == 0) {
            this.logger.lifecycle('At least \'reportFile\' or \'reportFilesFolder\' must be  provided');
            return false;
        }
        return true;
    }
    createAgentData(args) {
        const labid = args.labid || this.baseData.buildSessionId;
        return {
            appName: this.baseData.appName,
            buildName: this.baseData.buildName,
            branchName: this.baseData.branchName,
            customerId: this.baseData.customerid,
            hasMoreRequests: args.hasMoreRequests,
            source: args.source,
            type: args.type,
            environment: { environmentName: labid, labId: labid }
        };
    }
    createRequest(args) {
        const labid = args.labid || this.baseData.buildSessionId;
        return {
            appName: this.baseData.appName,
            branch: this.baseData.branchName,
            build: this.baseData.buildName,
            customerId: this.baseData.customerid,
            environmentName: labid,
            labId: labid,
            hasMoreRequests: args.hasMoreRequests,
            isValidToken: this.baseData.isValid,
            proxy: args.proxy,
            reportFile: args.reportFile,
            reportFilesFolder: args.reportFilesFolder,
            server: this.baseData.server,
            source: args.source,
            type: args.type
        };
    }
}
exports.UploadReportExecutor = UploadReportExecutor;
//# sourceMappingURL=upload-report-executor.js.map