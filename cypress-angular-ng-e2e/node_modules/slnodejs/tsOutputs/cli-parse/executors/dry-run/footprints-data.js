"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FootprintsData = void 0;
const config_1 = require("../../../common/config-process/config");
const agent_instance_data_1 = require("../../agent-instance-data");
const Constants = require("../../constants/constants");
const helper_methods_1 = require("./helper-methods");
const base_data_1 = require("./base-data");
const chalk_1 = require("chalk");
const nyc_report_executor_fpv6_1 = require("../../../test-listener/nyc-report-executor-fpv6");
const hits_collector_1 = require("../../../common/footprints-process-v6/hits-collector");
const hits_converter_1 = require("../../../common/footprints-process-v6/hits-converter");
const relative_path_resolver_1 = require("../../../common/footprints-process-v6/relative-path-resolver");
const source_map_data_1 = require("../../../common/footprints-process-v6/source-map-data");
const footprints_buffer_1 = require("../../../common/footprints-process-v6/footprints-buffer");
class FootprintsData extends base_data_1.BaseData {
    constructor(buildArguments, logger) {
        super(buildArguments);
        this.idsFoldersFilename = Constants.FP_IDS_FILENAME;
        this.idsFoldersTitle = Constants.FP_IDS_KEY;
        this.logger = logger;
    }
    getFootprintsFile(dryRunProxy) {
        const agentConfig = new config_1.AgentConfig();
        const projectRoot = this.buildArguments.nycProjectRoot;
        agentConfig.projectRoot.value = projectRoot;
        const hitsCollector = new hits_collector_1.HitsCollector(this.logger);
        const relativePathResolver = new relative_path_resolver_1.RelativePathResolver(projectRoot);
        const sourceMapData = new source_map_data_1.SourceMapData(this.logger);
        const hitsConverter = new hits_converter_1.HitsConverter(relativePathResolver, sourceMapData, projectRoot, this.logger);
        const footprintsBuffer = new footprints_buffer_1.FootprintsBuffer(agent_instance_data_1.agentInstanceData, agentConfig);
        const nycReportExecutorFpv6 = new nyc_report_executor_fpv6_1.NycReportExecutorFpv6(dryRunProxy, hitsCollector, hitsConverter, footprintsBuffer, agentConfig, this.buildArguments.report, this.logger);
        return nycReportExecutorFpv6.dryRun();
    }
    saveDataToFiles() {
        (0, helper_methods_1.saveDataToFile)(Constants.FOOTPRINTS, this.footprints);
        (0, helper_methods_1.saveArrayToFile)(Constants.FP_IDS_FILENAME, this.uniqueIds);
    }
    printVerbose() {
    }
    static run(buildArguments, logger, dryRunProxy) {
        return __awaiter(this, void 0, void 0, function* () {
            const footprintsData = new FootprintsData(buildArguments, logger);
            if (!buildArguments.hasNycReport) {
                return footprintsData;
            }
            console.log(chalk_1.default.blue('Reading nyc report\n\n'));
            footprintsData.footprints = yield footprintsData.getFootprintsFile(dryRunProxy);
            if (footprintsData.footprints) {
                footprintsData.uniqueIds = (0, helper_methods_1.getUniqueIdsFootprints)(footprintsData.footprints);
                footprintsData.files = (0, helper_methods_1.uniqueIdsToFoldersByDepth)(footprintsData.uniqueIds, buildArguments.depth);
                footprintsData.saveDataToFiles();
            }
            console.log(chalk_1.default.blue('Done reading nyc report\n\n'));
            return footprintsData;
        });
    }
    get footprints() {
        return this._footprints;
    }
    set footprints(value) {
        this._footprints = value;
    }
}
exports.FootprintsData = FootprintsData;
//# sourceMappingURL=footprints-data.js.map