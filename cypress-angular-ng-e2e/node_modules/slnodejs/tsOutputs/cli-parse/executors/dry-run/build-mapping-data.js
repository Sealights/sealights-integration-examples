"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildMappingData = void 0;
const cia_1 = require("../../../build-scanner/cia");
const Constants = require("../../constants/constants");
const helper_methods_1 = require("./helper-methods");
const third_parties_1 = require("../../constants/third-parties");
const git_1 = require("../../../common/scm/git");
const base_data_1 = require("./base-data");
const chalk_1 = require("chalk");
class BuildMappingData extends base_data_1.BaseData {
    constructor(dryRunProxy, buildArguments, logger) {
        super(buildArguments);
        this.thirdPartiesRegExps = third_parties_1.THIRD_PARTIES.map(elm => new RegExp(elm));
        this.idsFoldersFilename = Constants.BUILD_SCAN_IDS_FILENAME;
        this.idsFoldersTitle = Constants.BUILD_SCAN_IDS_KEY;
        this._dryRunProxy = dryRunProxy;
        this.logger = logger;
    }
    runBuildScanner() {
        return __awaiter(this, void 0, void 0, function* () {
            return new cia_1.CIA().dryRun(this._dryRunProxy, this.buildArguments, this.logger);
        });
    }
    saveDataToFiles() {
        var _a;
        (0, helper_methods_1.saveDataToFile)(Constants.BUILD_MAPPING, this._dryRunProxy.buildMappingRequest);
        (0, helper_methods_1.saveArrayToFile)(Constants.INCLUDED_FILENAME, this._dryRunProxy.buildMappingRequest.includedFiles);
        (0, helper_methods_1.saveArrayToFile)(Constants.EXCLUDED_FILENAME, this._dryRunProxy.buildMappingRequest.excludedFiles);
        (0, helper_methods_1.saveArrayToFile)(Constants.BUILD_SCAN_IDS_FILENAME, this.uniqueIds);
        (0, helper_methods_1.saveDataToFile)(Constants.SL_MAPPING, this._dryRunProxy.slMapping);
        if ((_a = this === null || this === void 0 ? void 0 : this._buildMappingResult) === null || _a === void 0 ? void 0 : _a.processedFiles) {
            (0, helper_methods_1.saveArrayToFile)(Constants.INSTRUMENTED_FILENAME, this._buildMappingResult.processedFiles.instrumented);
            (0, helper_methods_1.saveArrayToFile)(Constants.NON_INSTRUMENTED_FILENAME, this._buildMappingResult.processedFiles.notInstrumented);
            (0, helper_methods_1.saveArrayToFile)(Constants.ERROR_INSTRUMENTED_FILENAME, this._buildMappingResult.processedFiles.withInstrumentationErrors.map(helper_methods_1.stringifyErrorFileEntry));
            (0, helper_methods_1.saveArrayToFile)(Constants.ERROR_NON_INSTRUMENTED_FILENAME, this._buildMappingResult.processedFiles.withCopyErrors.map(helper_methods_1.stringifyErrorFileEntry));
        }
    }
    validate() {
        if (!this._dryRunProxy.buildMappingRequest) {
            throw Constants.BUILD_MAPPING_NOT_SUBMITTED;
        }
        if (!this._dryRunProxy.buildMappingRequest.files || this._dryRunProxy.buildMappingRequest.files.length == 0) {
            throw Constants.MISSING_FILES_IN_BUILD_MAPPING;
        }
    }
    printVerbose() {
        var _a;
        let fullMessage = '';
        fullMessage += (0, helper_methods_1.buildFilesMessage)(this.buildMapping.includedFiles, Constants.INCLUDED_KEY, Constants.INCLUDED_FILENAME);
        fullMessage += (0, helper_methods_1.buildFilesMessage)(this.buildMapping.excludedFiles, Constants.EXCLUDED_KEY, Constants.EXCLUDED_FILENAME);
        if ((_a = this.buildMappingResult) === null || _a === void 0 ? void 0 : _a.processedFiles) {
            fullMessage += (0, helper_methods_1.buildFilesMessage)(this.buildMappingResult.processedFiles.instrumented, Constants.INSTRUMENTED_KEY, Constants.INSTRUMENTED_FILENAME);
            fullMessage += (0, helper_methods_1.buildFilesMessage)(this.buildMappingResult.processedFiles.notInstrumented, Constants.NON_INSTRUMENTED_KEY, Constants.NON_INSTRUMENTED_FILENAME);
            fullMessage += (0, helper_methods_1.buildFilesMessage)(this.buildMappingResult.processedFiles.withInstrumentationErrors.map(helper_methods_1.stringifyErrorFileEntry), Constants.ERROR_INSTRUMENTED_KEY, Constants.ERROR_INSTRUMENTED_FILENAME);
            fullMessage += (0, helper_methods_1.buildFilesMessage)(this.buildMappingResult.processedFiles.withCopyErrors.map(helper_methods_1.stringifyErrorFileEntry), Constants.ERROR_NON_INSTRUMENTED_KEY, Constants.ERROR_NON_INSTRUMENTED_FILENAME);
        }
        console.log(fullMessage);
    }
    static run(dryRunProxy, buildArguments, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            const buildMappingData = new BuildMappingData(dryRunProxy, buildArguments, logger);
            console.log(chalk_1.default.blue('Start scanning\n\n'));
            buildMappingData._buildMappingResult = yield buildMappingData.runBuildScanner();
            console.log(chalk_1.default.blue('Done scanning\n\n'));
            buildMappingData.validate();
            buildMappingData.buildMapping = buildMappingData.dryRunProxy.buildMappingRequest;
            buildMappingData.uniqueIds = (0, helper_methods_1.getUniqueIdsBuildMap)(buildMappingData.buildMapping.files);
            buildMappingData.files = (0, helper_methods_1.uniqueIdsToFoldersByDepth)(buildMappingData.uniqueIds, buildArguments.depth);
            buildMappingData.saveDataToFiles();
            buildMappingData.storeThirdParties();
            return buildMappingData;
        });
    }
    hasColumnInfo() {
        let hasColumnInfo = false;
        this.buildMapping.files.forEach(file => {
            const elements = file.methods.concat(file.branches);
            elements.forEach(element => {
                if (element.position[1] != 0) {
                    hasColumnInfo = true;
                }
            });
        });
        return hasColumnInfo;
    }
    storeThirdParties() {
        this._rawThirdParties = (0, helper_methods_1.getMatchedElements)(this.buildMapping.includedFiles, this.thirdPartiesRegExps, this.buildArguments.workspacepath);
        this._logicalThirdParties = (0, helper_methods_1.getMatchedElements)(this.buildMapping.files.map(file => file.logicalPath), this.thirdPartiesRegExps, this.buildArguments.workspacepath);
        this._logicalThirdParties = this._logicalThirdParties.filter(file => !this._rawThirdParties.includes(file));
    }
    hasGitPathDiff() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.buildArguments.scm !== 'git') {
                return false;
            }
            const gitFilePaths = yield new git_1.Git(this.buildArguments).getFiles({ buildArguments: this.buildArguments }, this.logger);
            const slFilePaths = this.buildMapping.files.map(file => file.logicalPath);
            const differance = slFilePaths.filter(path => !gitFilePaths.includes(path));
            if (differance.length > 0) {
                (0, helper_methods_1.saveArrayToFile)(Constants.GIT_FILE_PATHS, gitFilePaths);
                (0, helper_methods_1.saveArrayToFile)(Constants.SL_FILE_PATHS, slFilePaths);
                return true;
            }
            return false;
        });
    }
    get buildMapping() {
        return this._buildMapping;
    }
    set buildMapping(value) {
        this._buildMapping = value;
    }
    get buildMappingResult() {
        return this._buildMappingResult;
    }
    set buildMappingResult(value) {
        this._buildMappingResult = value;
    }
    get dryRunProxy() {
        return this._dryRunProxy;
    }
    set dryRunProxy(value) {
        this._dryRunProxy = value;
    }
    get rawThirdParties() {
        return this._rawThirdParties;
    }
    get logicalThirdParties() {
        return this._logicalThirdParties;
    }
}
exports.BuildMappingData = BuildMappingData;
//# sourceMappingURL=build-mapping-data.js.map