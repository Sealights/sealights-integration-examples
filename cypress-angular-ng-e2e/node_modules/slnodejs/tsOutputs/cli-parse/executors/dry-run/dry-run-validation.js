"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Validations = exports.Status = exports.LogicalThirdPartyValidation = exports.RawThirdPartyValidation = exports.PositionValidation = exports.NycPathsValidation = exports.GitPathsValidation = exports.NoColumnValidation = exports.DryRunValidation = void 0;
const constants_1 = require("../../constants/constants");
class DryRunValidation {
    constructor() {
        this.status = Status.OK;
    }
    setFailure(prefix) {
        if (prefix != null) {
            this.message = `${prefix}${this.message}`;
        }
        this.status = Status.FAILED;
    }
    setStatus(status) {
        this.status = status;
    }
    toPrintableArray() {
        const printableArr = [this.name, this.status];
        const message = this.status == Status.FAILED ? this.message : '';
        printableArr.push(message);
        return printableArr;
    }
}
exports.DryRunValidation = DryRunValidation;
class NoColumnValidation extends DryRunValidation {
    constructor() {
        super(...arguments);
        this.message = constants_1.NO_COLUMN_MSG;
        this.name = Validations.COLUMN_INFO;
    }
}
exports.NoColumnValidation = NoColumnValidation;
class GitPathsValidation extends DryRunValidation {
    constructor() {
        super(...arguments);
        this.message = constants_1.GIT_PATH_DIFF_MSG;
        this.name = Validations.GIT_PATH;
    }
}
exports.GitPathsValidation = GitPathsValidation;
class NycPathsValidation extends DryRunValidation {
    constructor() {
        super(...arguments);
        this.message = constants_1.NYC_PATH_DIFF_MSG;
        this.name = Validations.NYC_PATH;
    }
}
exports.NycPathsValidation = NycPathsValidation;
class PositionValidation extends DryRunValidation {
    constructor() {
        super(...arguments);
        this.message = constants_1.POSITION_DIFF_MSG;
        this.name = Validations.POSITION;
    }
}
exports.PositionValidation = PositionValidation;
class RawThirdPartyValidation extends DryRunValidation {
    constructor() {
        super(...arguments);
        this.message = constants_1.RAW_THIRD_PARTY_MSG;
        this.name = Validations.RAW_THIRD_PARTY;
    }
}
exports.RawThirdPartyValidation = RawThirdPartyValidation;
class LogicalThirdPartyValidation extends DryRunValidation {
    constructor() {
        super(...arguments);
        this.message = constants_1.LOGICAL_THIRD_PARTY_MSG;
        this.name = Validations.LOGICAL_THIRD_PARTY;
    }
}
exports.LogicalThirdPartyValidation = LogicalThirdPartyValidation;
var Status;
(function (Status) {
    Status["OK"] = "ok";
    Status["FAILED"] = "failed";
    Status["NOT_APPLICABLE"] = "NA";
})(Status = exports.Status || (exports.Status = {}));
var Validations;
(function (Validations) {
    Validations["GIT_PATH"] = "Git paths";
    Validations["NYC_PATH"] = "Nyc paths";
    Validations["POSITION"] = "Position match";
    Validations["COLUMN_INFO"] = "Column information";
    Validations["RAW_THIRD_PARTY"] = "Third party (in source folder)";
    Validations["LOGICAL_THIRD_PARTY"] = "Third party (referenced from scanned artifact)";
})(Validations = exports.Validations || (exports.Validations = {}));
//# sourceMappingURL=dry-run-validation.js.map