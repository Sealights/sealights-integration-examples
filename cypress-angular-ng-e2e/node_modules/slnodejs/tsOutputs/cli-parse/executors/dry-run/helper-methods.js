"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildFilesMessage = exports.truncatePathByDepth = exports.calculateDiffPercentage = exports.removeDuplicates = exports.printArray = exports.getMatchedElements = exports.uniqueIdsToFoldersByDepth = exports.getUniqueIdsFootprints = exports.getUniqueIdsBuildMap = exports.stringifyErrorFileEntry = exports.saveArrayToFile = exports.saveDataToFile = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const Constants = require("../../constants/constants");
const flatMap = require("lodash.flatmap");
const files_utils_1 = require("../../../common/utils/files-utils");
function saveDataToFile(filename, data = []) {
    (0, fs_1.writeFileSync)((0, path_1.join)(Constants.DRY_RUN_OUTPUT, filename), JSON.stringify(data, null, '\t'));
}
exports.saveDataToFile = saveDataToFile;
function saveArrayToFile(filename, arr) {
    saveDataToFile(filename, arr === null || arr === void 0 ? void 0 : arr.sort(compareCaseInsensitive));
}
exports.saveArrayToFile = saveArrayToFile;
function stringifyErrorFileEntry(entry) {
    return `${entry.file}, error: ${entry.error};`;
}
exports.stringifyErrorFileEntry = stringifyErrorFileEntry;
function getUniqueIdsBuildMap(files) {
    return flatMap(files, file => file.methods.map(method => method.uniqueId).concat(file.branches.map(branch => branch.uniqueId)));
}
exports.getUniqueIdsBuildMap = getUniqueIdsBuildMap;
function getUniqueIdsFootprints(file) {
    var _a, _b;
    return (_a = file === null || file === void 0 ? void 0 : file.methods) === null || _a === void 0 ? void 0 : _a.map(method => method).concat((_b = file === null || file === void 0 ? void 0 : file.branches) === null || _b === void 0 ? void 0 : _b.map(branch => branch));
}
exports.getUniqueIdsFootprints = getUniqueIdsFootprints;
function uniqueIdsToFoldersByDepth(uniqueIds, depth) {
    return uniqueIds.map(extractUniqueIdPathByDepth(depth));
}
exports.uniqueIdsToFoldersByDepth = uniqueIdsToFoldersByDepth;
function getMatchedElements(files, regExps, prefixToTrim = '') {
    files = files.map(file => file.replace(prefixToTrim, ''));
    const matchedElements = flatMap(files, getMatchedStrings(regExps));
    const unique = new Set(matchedElements);
    return Array.from(unique);
}
exports.getMatchedElements = getMatchedElements;
function printArray(arr, filename) {
    arr = arr === null || arr === void 0 ? void 0 : arr.sort(compareCaseInsensitive);
    let message = `\n\t${arr.slice(0, Constants.MAX_ITEMS_TO_PRINT).join('\n\t')}`;
    if (arr.length > Constants.MAX_ITEMS_TO_PRINT) {
        message += `\n\t...
                        \n\tFull files list is in ${Constants.DRY_RUN_OUTPUT}/${filename}`;
    }
    return message;
}
exports.printArray = printArray;
function removeDuplicates(arr) {
    return Array.from(new Set(arr));
}
exports.removeDuplicates = removeDuplicates;
/**
 * Returns the percentage of all items exists in setA and not in setB
 * @param setA
 * @param setB
 * @private
 */
function calculateDiffPercentage(setA, setB) {
    const difference = setA.filter(x => !setB.includes(x));
    return ((difference.length / setA.length) * 100);
}
exports.calculateDiffPercentage = calculateDiffPercentage;
function truncatePathByDepth(path, depth) {
    return path.split('/').slice(0, depth).join('/');
}
exports.truncatePathByDepth = truncatePathByDepth;
function buildFilesMessage(files, key, fileName) {
    let message = `\n${key} files:`;
    if (arrayIsEmpty(files)) {
        message += `\n\tNo files were ${key} in the scan`;
    }
    else {
        message += printArray(files, fileName);
    }
    return message;
}
exports.buildFilesMessage = buildFilesMessage;
function arrayIsEmpty(arr) {
    return !arr || arr.length == 0;
}
function getMatchedStrings(regExps) {
    return (file) => {
        const thirdParties = [];
        regExps.forEach(regExp => {
            if (regExp.test(file)) {
                thirdParties.push(`'${regExp.source}'`);
            }
        });
        return thirdParties;
    };
}
function extractUniqueIdPathByDepth(depth) {
    return (id) => {
        id = id.split(Constants.METHOD_DELIMITER)[0];
        id = id.split(Constants.BRANCH_DELIMITER)[0];
        id = files_utils_1.FilesUtils.adjustPathSlashes(id);
        return id.split('/').slice(0, depth).join('/');
    };
}
function compareCaseInsensitive(a, b) {
    return a.toLowerCase().localeCompare(b.toLowerCase());
}
//# sourceMappingURL=helper-methods.js.map