"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NycReportExecutor = void 0;
const base_executor_1 = require("./base-executor");
const path_1 = require("path");
const utils_1 = require("../utils");
const api_1 = require("../../test-listener/api");
const agent_instance_data_1 = require("../agent-instance-data");
class NycReportExecutor extends base_executor_1.BaseExecutor {
    constructor() {
        super(...arguments);
        this.commandName = 'nycReport';
    }
    innerExecute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const nycReportData = this.mapArgs(args);
            const agentConfig = (0, utils_1.createAgentConfig)(Object.assign(Object.assign({}, nycReportData), this.agentRemoteConfig));
            return (0, api_1.uploadNycReport)(args.report, agentConfig, agent_instance_data_1.agentInstanceData);
        });
    }
    mapArgs(args) {
        return Object.assign(Object.assign({}, this.baseData), { projectRoot: args.projectRoot, branch: this.baseData.branchName, build: this.baseData.buildName, labId: args.labid || this.baseData.buildSessionId });
    }
    // Added for tests
    setBaseData(baseData) {
        this.baseData = baseData;
    }
}
exports.NycReportExecutor = NycReportExecutor;
NycReportExecutor.DEFAULT_NYC_REPORT_FILE_NAME = 'coverage-final.json';
NycReportExecutor.COVERAGE_FOLDER = 'coverage';
NycReportExecutor.DEFAULT_NYC_REPORT_FILE_LOC = (0, path_1.resolve)('.', NycReportExecutor.COVERAGE_FOLDER, NycReportExecutor.DEFAULT_NYC_REPORT_FILE_NAME);
//# sourceMappingURL=nyc-report-executor.js.map