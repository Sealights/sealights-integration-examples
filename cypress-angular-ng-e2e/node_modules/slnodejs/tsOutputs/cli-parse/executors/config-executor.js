"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigExecutor = void 0;
const base_executor_1 = require("./base-executor");
const backend_proxy_1 = require("../../common/http/backend-proxy");
const build_session_data_builder_1 = require("../../common/utils/build-session-data-builder");
const agent_instance_data_1 = require("../agent-instance-data");
const fs_1 = require("fs");
class ConfigExecutor extends base_executor_1.BaseExecutor {
    constructor() {
        super(...arguments);
        this.commandName = 'config';
    }
    innerExecute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = this.mapArgs(args);
            const backendProxy = new backend_proxy_1.BackendProxy(agent_instance_data_1.agentInstanceData, this.baseData, this.logger);
            try {
                const buildSessionId = yield backendProxy.createBuildSessionIdPromise(data);
                const buildSessionIdFile = this.getPath(args);
                (0, fs_1.writeFileSync)(buildSessionIdFile, buildSessionId);
                this.logger.info(`Build Session Id was created: ${buildSessionId} and was saved to ${buildSessionIdFile}`);
                return true;
            }
            catch (e) {
                this.logger.error(`Error while trying to create build session id. error: ${e}`);
                return false;
            }
        });
    }
    getPath(args) {
        return args.buildsessionidfile || 'buildSessionId';
    }
    getBuildSessionData(backendProxy, cmd) {
        return __awaiter(this, void 0, void 0, function* () {
            return new build_session_data_builder_1.BuildSessionDataBuilder(backendProxy).parseFromCli(cmd);
        });
    }
    mapArgs(args) {
        const data = {
            appName: args.appname,
            branchName: args.branch,
            buildName: args.build,
            buildSessionId: args.buildsessionid
        };
        return data;
    }
}
exports.ConfigExecutor = ConfigExecutor;
//# sourceMappingURL=config-executor.js.map