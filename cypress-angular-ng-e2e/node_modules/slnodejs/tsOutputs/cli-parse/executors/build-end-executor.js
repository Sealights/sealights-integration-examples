"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildEndExecutor = void 0;
const base_executor_1 = require("./base-executor");
const contracts_1 = require("../contracts");
const backend_proxy_1 = require("../../common/http/backend-proxy");
const agent_instance_data_1 = require("../agent-instance-data");
const cockpit_notifier_1 = require("../../common/agent-events/cockpit-notifier");
const utils_1 = require("../utils");
const system_date_1 = require("../../common/system-date");
class BuildEndExecutor extends base_executor_1.BaseExecutor {
    constructor() {
        super(...arguments);
        this.commandName = 'buildEnd';
    }
    innerExecute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const agentConfig = (0, utils_1.createAgentConfig)(this.baseData);
            const backendProxy = new backend_proxy_1.BackendProxy(agent_instance_data_1.agentInstanceData, this.baseData, this.logger);
            yield cockpit_notifier_1.CockpitNotifier.notifyStart(agentConfig, agent_instance_data_1.agentInstanceData, this.logger, system_date_1.getSystemOffset, {}, backendProxy);
            try {
                yield backendProxy.buildEnd(this.mapArgs(args));
                return true;
            }
            finally {
                yield cockpit_notifier_1.CockpitNotifier.notifyShutdown();
            }
        });
    }
    mapArgs(args) {
        return {
            appName: this.baseData.appName,
            branch: this.baseData.branchName,
            build: this.baseData.buildName,
            status: {
                success: args.ok || !args.failed
            }
        };
    }
    setAliasCommand(alias) {
        this.commandName = alias;
        return this;
    }
    handleLegacyCommand(args) {
        var _a;
        const mainCommand = (_a = args === null || args === void 0 ? void 0 : args.args) === null || _a === void 0 ? void 0 : _a[0];
        if (mainCommand === contracts_1.COMMANDS.BUILD_END) {
            this.logger.lifecycle(`'buildend' command is deprecated and should be replaced by the 'scanned' command `);
        }
    }
    validateArgs(args) {
        this.handleLegacyCommand(args);
        if (!args.ok && !args.failed) {
            this.logger.lifecycle('\'--ok\' or \'--failed\' must be provided');
            return false;
        }
        if (args.ok && args.failed) {
            this.logger.lifecycle('\'--ok\' or \'--failed\' need to be be provided not both');
            return false;
        }
        return true;
    }
}
exports.BuildEndExecutor = BuildEndExecutor;
//# sourceMappingURL=build-end-executor.js.map