"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartExecutionExecutor = void 0;
const test_executions_executor_1 = require("./test-executions-executor");
const api_1 = require("../../test-listener/api");
class StartExecutionExecutor extends test_executions_executor_1.TestExecutionsExecutor {
    constructor() {
        super(...arguments);
        this.commandName = 'startExecution';
    }
    innerExecute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                (0, api_1.startExecution)(this.mapArgs(args), this.baseData, err => {
                    err ? reject(err) : resolve(true);
                });
            });
        });
    }
    mapArgs(args) {
        return {
            isValidToken: true,
            labId: args.labid,
            testGroupId: args.testgroupid,
            proxy: this.baseData.proxy,
            server: this.baseData.server,
            appName: this.baseData.appName,
            branchName: this.baseData.branchName,
            buildName: this.baseData.buildName,
            customerId: this.baseData.customerid,
            environment: args.labid || this.baseData.buildSessionId,
            newEnvironment: args.teststage,
            testStage: args.teststage
        };
    }
}
exports.StartExecutionExecutor = StartExecutionExecutor;
//# sourceMappingURL=start-execution-executor.js.map