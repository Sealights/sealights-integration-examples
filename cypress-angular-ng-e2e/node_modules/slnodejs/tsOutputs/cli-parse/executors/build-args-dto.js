"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildArgsDTO = void 0;
const contracts_1 = require("../../common/contracts");
/**
 * Build scanner takes the given arg object and parse it to json.
 * The arg received is a 'Commander' object which cannot be parsed due to circular error.
 * This is a class that implements the IBuildArgs with all members as undefined in order to
 * get all the keys by 'Object.keys' in {@toDto}
 */
class BuildArgsDTO {
    constructor() {
        this.babylonPlugins = undefined;
        this.buildsessionid = undefined;
        this.buildsessionidfile = undefined;
        this.commit = undefined;
        this.delayShutdownInSeconds = undefined;
        this.dependenciesFile = undefined;
        this.dependency = undefined;
        this.downloadAgent = undefined;
        this.es6Modules = undefined;
        this.excludedpaths = undefined;
        this.failbuild = undefined;
        this.instrumentForBrowsers = undefined;
        this.instrumentationOnly = undefined;
        this.jobName = undefined;
        this.labid = undefined;
        this.logsUrl = undefined;
        this.outputpath = undefined;
        this.projectRoot = undefined;
        this.proxy = undefined;
        this.recursive = undefined;
        this.resolveWithoutHash = undefined;
        this.sourceHash = undefined;
        this.scm = undefined;
        this.scmBaseUrl = undefined;
        this.scmProvider = undefined;
        this.scmVersion = undefined;
        this.sendContributors = undefined;
        this.skipUpgrade = undefined;
        this.token = undefined;
        this.tokenfile = undefined;
        this.uniqueModuleId = undefined;
        this.useBabylon = undefined;
        this.usebranchcoverage = undefined;
        this.workspacepath = undefined;
        this.useModulePrefix = false;
        this.collectorUrl = undefined;
        this.enableOpenTelemetry = false;
        this.allowCORS = undefined;
        this.excludeSourceMapFiles = undefined;
        this.es6Classes = undefined;
        this.enrichPrivateMethods = undefined;
        this.enrichByLinesMatch = undefined;
        this.footprintsMapping = contracts_1.FootprintsMapping.AGENT;
        this.awsConfigure = undefined;
        this.newInstrumenter = false;
    }
    static create(args) {
        const result = {};
        const iBuildArgs = new BuildArgsDTO();
        const keys = Object.keys(iBuildArgs);
        keys.forEach((key) => result[key] = args[key]);
        return result;
    }
}
exports.BuildArgsDTO = BuildArgsDTO;
//# sourceMappingURL=build-args-dto.js.map