"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunExecutor = void 0;
const test_listener_executor_1 = require("./test-listener-executor");
const child_process_wrapper_1 = require("../child-process-wrapper");
const agent_loader_1 = require("../../test-listener/agent-loader");
class RunExecutor extends test_listener_executor_1.TestListenerExecutor {
    constructor() {
        super(...arguments);
        this.commandName = 'run';
    }
    innerExecute(args, extraParams) {
        const _super = Object.create(null, {
            innerExecute: { get: () => super.innerExecute }
        });
        return __awaiter(this, void 0, void 0, function* () {
            this.isSLCommandRan = true;
            yield _super.innerExecute.call(this, args, extraParams);
            process.env['SL_useIstanbul'] = String(this.useIstanbul).toLowerCase();
            agent_loader_1.AgentLoader.run(extraParams, this.useIstanbul, this.spawnRuntimeArgs, true, {
                command: this.commandName
            });
        });
    }
    runWithoutSealights() {
        return __awaiter(this, void 0, void 0, function* () {
            return child_process_wrapper_1.ChildProcessWrapper.runNodeCommand(this.extraArgs);
        });
    }
}
exports.RunExecutor = RunExecutor;
//# sourceMappingURL=run-executor.js.map