"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationBuildComponentsExecutor = void 0;
const base_executor_1 = require("./base-executor");
const dependency_utils_1 = require("../../common/utils/dependency-utils");
const fs_1 = require("fs");
const backend_proxy_1 = require("../../common/http/backend-proxy");
const agent_instance_data_1 = require("../agent-instance-data");
class IntegrationBuildComponentsExecutor extends base_executor_1.BaseExecutor {
    innerExecute(args, extraArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            this.backendProxy = new backend_proxy_1.BackendProxy(agent_instance_data_1.agentInstanceData, this.baseData, this.logger);
            const components = this.getIntegrationBuildDependenciesFromArgs(args);
            if (components.length > 0) {
                yield this.submitRequest(this.baseData.buildSessionId, components, agent_instance_data_1.agentInstanceData.agentId);
                return true;
            }
            else {
                this.logger.lifecycle('No components were passed');
                return false;
            }
        });
    }
    getIntegrationBuildDependenciesFromArgs(integrationBuildUpdateArgs) {
        try {
            let deps = [];
            if (integrationBuildUpdateArgs.componentIds) {
                deps = dependency_utils_1.DependencyUtils.parseDependencies(integrationBuildUpdateArgs.componentIds, this.logger);
            }
            else if (integrationBuildUpdateArgs.componentFile) {
                const depsFile = this.parseJsonFile(integrationBuildUpdateArgs.componentFile);
                deps = dependency_utils_1.DependencyUtils.parseDependenciesFile(depsFile, this.logger);
            }
            //Convert from IBuildDependency(appName, branch, build) to IBuildDependency (appName, branchName, buildName),
            // as requried by backendProxy.addOrUpdateIntegrationBuildComponents/deleteIntegrationBuildComponents
            return deps.map(dep => {
                const mappedDependency = {};
                if (dep.appName)
                    mappedDependency.appName = dep.appName;
                if (dep.branch)
                    mappedDependency.branchName = dep.branch;
                if (dep.build)
                    mappedDependency.buildName = dep.build;
                if (dep.buildSessionId)
                    mappedDependency.buildSessionId = dep.buildSessionId;
                return mappedDependency;
            });
        }
        catch (err) {
            this.logger.lifecycle('Error parsing dependencies %s', err);
            return [];
        }
    }
    parseJsonFile(filename) {
        let rawFile;
        try {
            rawFile = (0, fs_1.readFileSync)(filename).toString();
        }
        catch (err) {
            this.logger.lifecycle('Error reading file \'%s\'. %s', filename, err);
            throw err;
        }
        try {
            return JSON.parse(rawFile);
        }
        catch (err) {
            this.logger.lifecycle('Error parsing JSON content from \'%s\'. %s', filename, err);
            throw err;
        }
    }
}
exports.IntegrationBuildComponentsExecutor = IntegrationBuildComponentsExecutor;
//# sourceMappingURL=integration-build-components-executor.js.map