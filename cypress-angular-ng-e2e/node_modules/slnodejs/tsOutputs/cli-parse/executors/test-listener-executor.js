"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestListenerExecutor = void 0;
const base_executor_1 = require("./base-executor");
const utils_1 = require("../utils");
const sl_env_vars_1 = require("../../common/constants/sl-env-vars");
const config_system_1 = require("../../common/config-process/config-system");
class TestListenerExecutor extends base_executor_1.BaseExecutor {
    constructor() {
        super();
        this.isSLCommandRan = false;
        this.allowedV8Options = ['max_old_space_size'];
        this.spawnRuntimeArgs = this.getSpawnNodeArgs() || [];
        this.useIstanbul = sl_env_vars_1.SlEnvVars.isUseIstanbul();
    }
    mapArgs(args) {
        return Object.assign(Object.assign(Object.assign({}, args), this.baseData), { appname: this.baseData.appName, build: this.baseData.buildName, branch: this.baseData.branchName, labid: args.labid || this.baseData.buildSessionId, buildsessionid: this.baseData.buildSessionId });
    }
    innerExecute(args, extraArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            this.isSLCommandRan = true;
            const remoteConfig = this.agentRemoteConfig;
            this.saveConfigurationToProcessEnv(Object.assign(Object.assign({}, this.mapArgs(args)), remoteConfig));
            process.env['SL_httpClientColoring'] = args.httpClientColoring.toString();
            process.env['SL_httpServerColoring'] = args.httpServerColoring.toString();
            if (remoteConfig.useOtel)
                sl_env_vars_1.SlEnvVars.turnOtelOn();
        });
    }
    /**
     * Since mocha and run command runs new process (test, node server) no need to handle the process.exit.
     * If sealights failed before trying to run the command (mocha/run) then it should run without sealights
     * @param result
     * @param failbuild
     */
    exitProcess(result, failbuild) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isSLCommandRan) {
                this.logger.lifecycle('Sealights is disabled, running command without sealights');
                const code = yield this.runWithoutSealights();
                if (code !== 0) {
                    process.exit(code);
                }
            }
        });
    }
    saveConfigurationToProcessEnv(cmd) {
        const agentConfig = (0, utils_1.createAgentConfig)(cmd);
        /**
         * 2. This is how the cli program, executed on the parent process, communicates with this process.
         * This configuration takes precedence over other environment variables
         */
        if (process.env.SL_CONFIGURATION) {
            try {
                const jsonCfg = JSON.parse(process.env.SL_CONFIGURATION);
                agentConfig.loadConfiguration(new config_system_1.JsonObjectConfigurationProvider(jsonCfg));
            }
            catch (e) {
                console.error(`Error parsing agent configuration ${e}`);
                //TODO: Log
            }
        }
        process.env.SL_CONFIGURATION = JSON.stringify(agentConfig.toJsonObject());
    }
    getSpawnNodeArgs() {
        const args = [];
        process.execArgv.forEach((arg) => {
            if (this.isAllowedNodeArg(arg)) {
                args.push(arg);
            }
        });
        return args;
    }
    isAllowedNodeArg(nodeArg) {
        const optionName = this.getNodeArgName(nodeArg);
        return this.allowedV8Options.indexOf(optionName) > -1;
    }
    getNodeArgName(nodeArg) {
        nodeArg = nodeArg.replace('--', '');
        const equalIndex = nodeArg.indexOf('=');
        if (equalIndex > -1) {
            nodeArg = nodeArg.substring(0, equalIndex);
        }
        return nodeArg.replace(/-/g, '_');
    }
}
exports.TestListenerExecutor = TestListenerExecutor;
//# sourceMappingURL=test-listener-executor.js.map