"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PRConfigExecutor = void 0;
const config_executor_1 = require("./config-executor");
class PRConfigExecutor extends config_executor_1.ConfigExecutor {
    constructor() {
        super(...arguments);
        this.commandName = 'prConfig';
    }
    getBuildSessionData(backendProxy, cmd) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = {};
            data.appName = cmd.appname;
            return data;
        });
    }
    // TODO: resolve correct typings
    mapArgs(args) {
        const pullRequestParams = {
            latestCommit: args.latestCommit,
            targetBranch: args.targetBranch,
            pullRequestNumber: args.pullRequestNumber,
            repositoryUrl: args.repositoryUrl
        };
        return { appName: args.appname, pullRequestParams: pullRequestParams };
    }
}
exports.PRConfigExecutor = PRConfigExecutor;
//# sourceMappingURL=pr-config-executor.js.map