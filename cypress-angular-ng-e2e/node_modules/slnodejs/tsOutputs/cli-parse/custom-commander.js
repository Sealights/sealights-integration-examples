"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomCommander = void 0;
/*
    In cli we use commander module which responsible to parse options that passed to command, (i.e. --buildsessionId).
    to find matching it use 'is' function which is case sensitive, so we override the function to achieve case insensitivity.
 */
const program = require("commander");
const flatMap = require("lodash.flatmap");
const filter = require("lodash.filter");
class CustomCommander {
    constructor() {
        this.commander = program;
        this.overrideIsFunc();
    }
    overrideIsFunc() {
        const customOption = this.commander.Option;
        customOption.prototype.is = function (arg) {
            if (this.short && this.long) {
                return arg.toLowerCase() == this.short.toLowerCase() || arg.toLowerCase() == this.long.toLowerCase();
            }
            if (this.long && !this.short) {
                return arg.toLowerCase() == this.long.toLowerCase();
            }
            return false;
        };
    }
    getCommander() {
        return this.commander;
    }
    parse(argv) {
        const allOptions = flatMap(this.commander.options, opt => [opt.short, opt.long]).join('|');
        const regExp = new RegExp(`\\S\\s+--(${allOptions})\\s+`, 'gm');
        const argDidNotEscapedCorrectly = filter(argv, arg => regExp.test(arg))[0];
        if (argDidNotEscapedCorrectly) {
            console.error(`Process args were not escaped successfully, please check the following string '${argDidNotEscapedCorrectly}' for special characters (such as '\', '"' and similar)`);
        }
        else {
            this.commander.parse(argv);
        }
    }
}
exports.CustomCommander = CustomCommander;
//# sourceMappingURL=custom-commander.js.map