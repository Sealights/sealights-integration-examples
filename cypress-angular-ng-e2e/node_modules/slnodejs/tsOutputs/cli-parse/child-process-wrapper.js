"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChildProcessWrapper = void 0;
const child_process_1 = require("child_process");
const logger_1 = require("../common/logger");
/**
 * Wrapper class for running childProcess command in order to install sealights agent
 */
class ChildProcessWrapper {
    static runCommand(command, args) {
        return new Promise((resolve, reject) => {
            const spawned = (0, child_process_1.spawn)(command, args, { stdio: [process.stdin, process.stdout, process.stderr] });
            spawned.on('error', err => {
                this.logger.error(`Error while trying to execute '${command}' with args '${args}'. error: ${err}`);
                reject(err);
            });
            spawned.on('close', (code) => {
                this.logger.info(`command '${command}' with args '${args}' finished successfully`);
                resolve(code);
            });
        });
    }
    static runNodeCommand(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const allArgs = process.execArgv.concat(args);
            return this.runCommand(this.NODE, allArgs);
        });
    }
}
exports.ChildProcessWrapper = ChildProcessWrapper;
ChildProcessWrapper.NPM = 'npm';
ChildProcessWrapper.NODE = 'node';
ChildProcessWrapper.YARN = 'yarn';
ChildProcessWrapper.INSTALL = 'install';
ChildProcessWrapper.ADD = 'add';
ChildProcessWrapper.CMD = 'cmd';
ChildProcessWrapper.STRICT = '@';
ChildProcessWrapper.USE_YARN_KEY = 'SL_useYarn';
ChildProcessWrapper.logger = logger_1.LoggerFactory.getCreateApplicationLogger();
//# sourceMappingURL=child-process-wrapper.js.map