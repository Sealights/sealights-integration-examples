"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OtelAgent = void 0;
const otel_agent_loader_1 = require("../test-listener/otel-agent-loader");
const cockpit_notifier_1 = require("../common/agent-events/cockpit-notifier");
const agent_events_contracts_1 = require("../common/agent-events/agent-events-contracts");
class OtelAgent {
    constructor({ agentConfig, logger }) {
        this.useOtel = false;
        this.logger = null;
        this.agentConfig = null;
        if (!OtelAgent.instance) {
            OtelAgent.instance = this;
            this.setConfigurations({ agentConfig, logger });
            this.setUpOtel();
        }
        return OtelAgent.instance;
    }
    setConfigurations({ agentConfig, logger }) {
        var _a;
        this.useOtel = ((_a = agentConfig === null || agentConfig === void 0 ? void 0 : agentConfig.useOtel) === null || _a === void 0 ? void 0 : _a.value) || false;
        this.agentConfig = agentConfig;
        this.logger = logger;
    }
    setUpOtel() {
        var _a, _b;
        if (!this.useOtel)
            return;
        const { loaded, module } = otel_agent_loader_1.OtelAgentLoader.loadOtelAsModule();
        if (loaded && (module === null || module === void 0 ? void 0 : module.MochaWorker)) {
            this._mochaWorker = module.MochaWorker.create();
        }
        else {
            const message = `Cannot load otel agent.`;
            this.useOtel = false;
            (_b = (_a = this.logger).error) === null || _b === void 0 ? void 0 : _b.call(_a, message);
            cockpit_notifier_1.CockpitNotifier.sendEvent(agent_events_contracts_1.AgentEventCode.OTEL_ERROR, message);
        }
    }
    runHook({ runner, context, testData = {}, done = () => { } }) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.useOtel)
                    return done === null || done === void 0 ? void 0 : done();
                yield runner({ context, testData, done });
            }
            catch (e) {
                (_b = (_a = this.logger).error) === null || _b === void 0 ? void 0 : _b.call(_a, `Error in running otel method. Err: ${e}`);
                done === null || done === void 0 ? void 0 : done();
            }
        });
    }
    handleBeforeEach({ context, testData = {}, done = () => { } }) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const runner = (_a = this._mochaWorker) === null || _a === void 0 ? void 0 : _a.handleBeforeEach;
            yield this.runHook({ runner, context, testData, done });
        });
    }
    handleAfterEach({ context, testData = {}, done = () => { } }) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const runner = (_a = this._mochaWorker) === null || _a === void 0 ? void 0 : _a.handleAfterEach;
            yield this.runHook({ runner, context, testData, done });
        });
    }
    handleAfterAll({ context, testData = {}, done = () => { } }) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const runner = (_a = this._mochaWorker) === null || _a === void 0 ? void 0 : _a.handleAfterEach;
            yield this.runHook({ runner, context, testData, done });
        });
    }
}
exports.OtelAgent = OtelAgent;
OtelAgent.instance = null;
//# sourceMappingURL=otel-agent.js.map