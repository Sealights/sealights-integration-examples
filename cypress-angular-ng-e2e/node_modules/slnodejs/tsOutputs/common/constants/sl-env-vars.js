"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlEnvVars = void 0;
const buffer_size_helper_1 = require("../footprints-process-v6/buffer-size-helper");
const env_var_parsing_1 = require("../utils/env-var-parsing");
class SlEnvVars {
    static inProductionListenerMode() {
        return !!process.env[SlEnvVars.PRODUCTION_LISTENER];
    }
    static getProductionListenerModes() {
        return (process.env[SlEnvVars.PRODUCTION_LISTENER] || '').split(',');
    }
    static getFileStorage() {
        return process.env[SlEnvVars.FILE_STORAGE];
    }
    static getBasePath() {
        return process.env[SlEnvVars.BASE_PATH];
    }
    static isUseNewUniqueId() { return env_var_parsing_1.EnvVarParsing.parseBoolean(SlEnvVars.NEW_UNIQUE_ID); }
    static isUseIstanbul() { return env_var_parsing_1.EnvVarParsing.parseBoolean(SlEnvVars.USE_ISTANBUL); }
    static enableFootprintsV6() {
        return env_var_parsing_1.EnvVarParsing.parseBoolean(SlEnvVars.ENABLE_FOOTPRINTS_V6);
    }
    static getFootprintsCollectIntervalSecs() {
        return env_var_parsing_1.EnvVarParsing.parseNumber(SlEnvVars.FOOTPRINTS_COLLECTION_INTERVAL_SECS);
    }
    static getFootprintsSendMaxIntervalSecs() {
        return env_var_parsing_1.EnvVarParsing.parseNumber(SlEnvVars.FOOTPRINTS_SEND_MAX_INTERVAL_SECS);
    }
    static getFootprintsQueueSize() {
        return env_var_parsing_1.EnvVarParsing.parseNumber(SlEnvVars.FOOTPRINTS_QUEUE_SIZE);
    }
    static getExecutionQueryIntervalSecs() {
        return env_var_parsing_1.EnvVarParsing.parseNumber(SlEnvVars.EXECUTION_QUERY_INTERVAL_SEC);
    }
    static getFootprintsBufferThresholdMb() {
        return env_var_parsing_1.EnvVarParsing.parseNumber(SlEnvVars.FOOTPRINTS_BUFFER_THRESHOLD_MB);
    }
    static blockBrowserHttpTraffic() {
        return env_var_parsing_1.EnvVarParsing.parseBoolean(SlEnvVars.BLOCK_BROWSER_HTTP_TRAFFIC);
    }
    static getDisableHookDependencyGuard() {
        return env_var_parsing_1.EnvVarParsing.parseBoolean(SlEnvVars.DISABLE_HOOK_DEPENDENCY_GUARD);
    }
    static shouldUseOtel() {
        return env_var_parsing_1.EnvVarParsing.parseBoolean(SlEnvVars.USE_OTEL_AGENT);
    }
    static useSlMapping() {
        return env_var_parsing_1.EnvVarParsing.parseBoolean(SlEnvVars.USE_SL_MAPPING);
    }
    static turnOtelOn() {
        process.env[SlEnvVars.USE_OTEL_AGENT] = 'true';
    }
    static turnOtelOff() {
        process.env[SlEnvVars.USE_OTEL_AGENT] = 'false';
    }
    static useSpawnWrap() {
        return env_var_parsing_1.EnvVarParsing.parseBoolean(SlEnvVars.SL_USE_SPAWN_WRAP);
    }
}
exports.SlEnvVars = SlEnvVars;
//Set to 'true' in order to report production data.
SlEnvVars.PRODUCTION_LISTENER = 'SL_production';
//Determines the path in which we store files.
SlEnvVars.FILE_STORAGE = 'SL_fileStorage';
//Determines if should resolve with new uniqueId format.
SlEnvVars.NEW_UNIQUE_ID = 'SL_newUniqueId';
//Determines the cwd
SlEnvVars.BASE_PATH = 'SL_basePath';
SlEnvVars.USE_ISTANBUL = 'SL_useIstanbul';
SlEnvVars.ENABLE_FOOTPRINTS_V6 = 'SL_footprintsEnableV6';
SlEnvVars.FOOTPRINTS_COLLECTION_INTERVAL_SECS = 'SL_footprintsCollectIntervalSecs';
SlEnvVars.FOOTPRINTS_SEND_MAX_INTERVAL_SECS = 'SL_footprintsSendIntervalSecs';
SlEnvVars.FOOTPRINTS_QUEUE_SIZE = 'SL_footprintsQueueSize';
SlEnvVars.EXECUTION_QUERY_INTERVAL_SEC = 'SL_executionQueryIntervalSecs';
SlEnvVars.FOOTPRINTS_BUFFER_THRESHOLD_MB = 'SL_footprintsBufferThresholdMb';
SlEnvVars.BLOCK_BROWSER_HTTP_TRAFFIC = 'SL_blockBrowserHttpTraffic';
//Determines if it should add dummy test in case of hooks dependency (Boolean)
SlEnvVars.DISABLE_HOOK_DEPENDENCY_GUARD = 'SL_disableHookDependencyGuard';
// Allow to use SL agent alongside with node agent in bootstrap
SlEnvVars.USE_OTEL_AGENT = 'SL_useOtelAgent';
SlEnvVars.USE_SL_MAPPING = 'SL_useSlMapping';
SlEnvVars.SL_USE_SPAWN_WRAP = 'SL_useSpawnWrap';
SlEnvVars.CIA = (_a = class {
        static getFileExtensions() {
            return process.env[SlEnvVars.CIA.FILE_EXTENSIONS];
        }
        static getSendCommitTitles() {
            return env_var_parsing_1.EnvVarParsing.parseBoolean(SlEnvVars.CIA.SEND_COMMIT_TITLES, true);
        }
        static getSourceRoot() {
            return process.env[SlEnvVars.CIA.SL_SOURCE_ROOT];
        }
        static getSlMappingPath() {
            return process.env[SlEnvVars.CIA.SL_MAPPING_PATH];
        }
        static getSlMappingUrl() {
            return process.env[SlEnvVars.CIA.SL_MAPPING_URL];
        }
        static reduceInstrumentedFileSize() {
            return env_var_parsing_1.EnvVarParsing.parseBoolean(SlEnvVars.CIA.REDUCE_INSTRUMENTED_FILE_SIZE);
        }
        static omitInstrumentedFunctionMap() {
            return env_var_parsing_1.EnvVarParsing.parseBoolean(SlEnvVars.CIA.OMIT_INSTRUMENTED_FUNCTION_MAP);
        }
        static minifyInstrumentedOutput() { return env_var_parsing_1.EnvVarParsing.parseBoolean(SlEnvVars.CIA.MINIFY_INSTRUMENTED_OUTPUT); }
        static inProcessInstrumentation() { return env_var_parsing_1.EnvVarParsing.parseBoolean(SlEnvVars.CIA.IN_PROCESS_INSTRUMENTATION); }
        // TODO: remove after proper fix
        static useExperimentalSizeReduction() { return env_var_parsing_1.EnvVarParsing.parseBoolean(SlEnvVars.CIA.USE_EXPERIMENTAL_SIZE_REDUCTION); }
        // TODO: remove after proper fix
        static useNewInstrumenter() { return env_var_parsing_1.EnvVarParsing.parseBoolean(SlEnvVars.CIA.USE_NEW_INSTRUMENTER); }
        static getMaxBuffer() {
            const bufferInBytes = env_var_parsing_1.EnvVarParsing.parseNumber(SlEnvVars.CIA.MAX_BUFFER);
            if (bufferInBytes !== null) {
                return bufferInBytes * buffer_size_helper_1.BufferSizeHelper.BYTES_IN_MB;
            }
            return bufferInBytes;
        }
    },
    //Allow to override the files extensions that will be scanned and instrumented by the Build Scanner.
    _a.FILE_EXTENSIONS = 'SL_fileExtensions',
    //Determines the root path we should add to the source files.
    _a.SL_SOURCE_ROOT = 'SL_sourceRoot',
    //Determine the physical path of sl-mapping file (relevant to cwd)
    _a.SL_MAPPING_PATH = 'SL_mappingPath',
    //Determine the url of sl-mapping file (relevant application root)
    _a.SL_MAPPING_URL = 'SL_mappingUrl',
    _a.REDUCE_INSTRUMENTED_FILE_SIZE = 'SL_reduceInstrumentedFileSize',
    _a.OMIT_INSTRUMENTED_FUNCTION_MAP = 'SL_omitInstrumentedFunctionMap',
    _a.MINIFY_INSTRUMENTED_OUTPUT = 'SL_minifyInstrumentedOutput',
    _a.IN_PROCESS_INSTRUMENTATION = 'SL_inProcessInstrumentation',
    // TODO: remove after proper fix
    _a.USE_EXPERIMENTAL_SIZE_REDUCTION = 'SL_experimentalSizeReduction',
    // TODO: remove after proper fix
    _a.USE_NEW_INSTRUMENTER = 'SL_newInstrumenter',
    _a.SEND_COMMIT_TITLES = 'SL_sendCommitTitles',
    // Set the max buffer size for instrumentation in child process (in MB)
    _a.MAX_BUFFER = 'SL_maxBuffer',
    _a);
//# sourceMappingURL=sl-env-vars.js.map