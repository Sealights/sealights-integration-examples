import { AgentData, BuildMappingRequest, BuildSessionData, CreateBuildSessionIdResponse, EndExecutionRequest, GetRemoteConfigRequest, GetVersionRequest, IBuildEndData, IColoredExecutionRequest, ITestsRecommendationResponse, SlAgentMetadata, StartExecutionRequest, SubmitLogsRequest, UploadReportsBody } from './contracts';
import { IExecutionResponse, IIntegrationBuildDependency } from '../contracts';
import { IEventsFile } from '../events-process/events-contracts';
import { IAgentEventRequest } from '../agent-events/agent-events-contracts';
import { IFootprintsV6File } from '../footprints-process-v6/contracts';
export interface IBackendProxy {
    getBuildSession(buildSessionId: string, callback: (err: Error, response: BuildSessionData) => void): void;
    createBuildSessionId(request: BuildSessionData, callback: (err: Error, response: CreateBuildSessionIdResponse) => void): void;
    createBuildSessionIdPromise<T extends BuildSessionData>(request: T): Promise<string>;
    getRecommendedVersion(request: GetVersionRequest): Promise<any>;
    submitBuildMapping(request: BuildMappingRequest): Promise<any>;
    submitLogs(request: SubmitLogsRequest, callback: (err: Error, body: any) => void): void;
    getRemoteConfig(request: GetRemoteConfigRequest, callback: (err: Error, body: any) => void): void;
    getRemoteConfigPromise(request: GetRemoteConfigRequest): Promise<object>;
    startExecution(request: StartExecutionRequest, callback: (err: Error, body: any) => void): void;
    startColoredExecution(request: IColoredExecutionRequest): Promise<void>;
    testExecutionV4(labId: string, async: any, executionId?: string): Promise<IExecutionResponse>;
    uploadReport(request: UploadReportsBody | AgentData, callback: (err: Error, body: any) => void): void;
    externalReport(request: UploadReportsBody | AgentData, callback: (err: Error, body: any) => void): void;
    endExecution(request: EndExecutionRequest, callback: (err: Error, body: any) => void): void;
    submitEvents(packetToSend: IEventsFile, callback: (err: Error, body: any) => void, async: any): void;
    submitEventsPromise(packetToSend: IEventsFile): Promise<void>;
    submitBlob(body: object, buildSessionId: string, blobId: string, callback: (err: Error, body: any) => void): void;
    submitBlobAsync(body: object, buildSessionId: string, blobId: string): Promise<void>;
    submitAgentEvent<T>(body: IAgentEventRequest<T>): Promise<void>;
    getTestsRecommendation(buildSessionId: string, stage: string): Promise<ITestsRecommendationResponse>;
    addOrUpdateIntegrationBuildComponents(buildSessionId: string, components: IIntegrationBuildDependency[], agentId: string): Promise<any>;
    deleteIntegrationBuildComponents(buildSessionId: string, components: IIntegrationBuildDependency[], agentId: string): Promise<any>;
    buildEnd(data: IBuildEndData): Promise<void>;
    submitFootprintsV6(footprintsPacket: IFootprintsV6File, executionBsid: string, testStage: string, buildSessionId: string): Promise<void>;
    getBuildSessionData(buildSessionId: string): Promise<BuildSessionData>;
    getRecommendedAgent(configuration?: any): Promise<{}>;
    getBuildSessionDataFromLabId(labid: string): Promise<BuildSessionData>;
    updateMetadata(metadata: Partial<SlAgentMetadata>): void;
}
