/// <reference types="request" />
import { ContentType, IHttpClientConfigData, IHttpClient, SlAgentMetadata } from './contracts';
import { OptionsWithUrl } from 'sl-request';
import { HttpVerb } from './http-verb';
import { Logger } from '../contracts';
export { getSystemDateValueOf } from '../../common/system-date';
export declare class HttpClient implements IHttpClient {
    protected cfg: IHttpClientConfigData;
    protected metadata: SlAgentMetadata;
    protected logger: Logger;
    static DEFAULT_HTTP_TIMEOUT: number;
    constructor(cfg: IHttpClientConfigData, metadata: SlAgentMetadata, logger: Logger);
    get<T>(urlPath: string, callback: (err: Error, response: T, statusCode: number) => void, isNotFoundAcceptable?: boolean): void;
    delete<T>(body: any, urlPath: string, callback: (err: Error, data: T, statusCode: number) => void): void;
    put(requestData: any, urlPath: string, callback: (err: Error, body: any, statusCode: number) => void, async?: boolean, contentType?: ContentType): void;
    post(requestData: any, urlPath: string, callback: (err: Error, body: any, statusCode: number) => void, async?: boolean, contentType?: ContentType): void;
    postMultipart(requestData: any, urlPath: string, callback: (err: Error, body: any, statusCode: number) => void): void;
    updateMetadata(metadata: Partial<SlAgentMetadata>): void;
    private submitRequestWithBody;
    private invokeHttpRequest;
    protected createOnRequestCallback({ httpVerb, url, requestStarted, callback, isNotFoundAcceptable, }: {
        httpVerb: HttpVerb;
        url: string;
        requestStarted: number;
        callback: (err: Error, body: any, statusCode: number) => void;
        isNotFoundAcceptable?: boolean;
    }): (err: any, requestResponse: any, body: any) => void;
    private allowUntrustedCertificates;
    protected createDefaultOptions(urlPath: string, contentType?: ContentType): OptionsWithStringUrl;
    protected get defaultTimeout(): number;
}
interface OptionsWithStringUrl extends OptionsWithUrl {
    url: string;
    compressed: boolean;
}
