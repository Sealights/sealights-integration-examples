"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SLRoutes = void 0;
const constants_1 = require("../constants/constants");
const validation_utils_1 = require("../utils/validation-utils");
class SLRoutes {
    static agentsV1() {
        return SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.V1) + SLRoutes.toUri(SLRoutes.AGENTS);
    }
    static agentsV2() {
        return SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.V2) + SLRoutes.toUri(SLRoutes.AGENTS);
    }
    static agentsV3() {
        return SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.V3) + SLRoutes.toUri(SLRoutes.AGENTS);
    }
    static agentsV4() {
        return SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.V4) + SLRoutes.toUri(SLRoutes.AGENTS);
    }
    static agentsV5() {
        return SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.V5) + SLRoutes.toUri(SLRoutes.AGENTS);
    }
    static agentsV6() {
        return SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.V6) + SLRoutes.toUri(SLRoutes.AGENTS);
    }
    static testExecution() {
        return SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.V3) + SLRoutes.toUri(SLRoutes.TEST_EXECUTION);
    }
    static testExecutionV4(labId, executionId) {
        let url = SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.V4) + SLRoutes.toUri(SLRoutes.TEST_EXECUTION) + SLRoutes.toUri(labId);
        if (executionId) {
            url += SLRoutes.buildQueryParams({ executionId: executionId });
        }
        return url;
    }
    static endExecution(customerId, appName, buildName, branchName, environment) {
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(appName, 'appName');
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(customerId, 'customerId');
        let result = SLRoutes.testExecution();
        const query = {
            customerId: customerId,
            appName: appName,
            buildName: buildName,
            branchName: branchName,
            environment: environment
        };
        result += SLRoutes.buildQueryParams(query);
        return result;
    }
    static externalData() {
        return SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.V3) + SLRoutes.toUri(SLRoutes.EXTERNAL_DATA);
    }
    static externalReport() {
        return SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.V1) + SLRoutes.toUri(SLRoutes.EXTERNAL_REPORT);
    }
    static configV3(agentInstanceData, appName, branchName, buildName, testStage, labId) {
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(agentInstanceData, 'agentInstanceData');
        let result = SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.V3) + SLRoutes.CONFIG;
        const query = {
            agentType: agentInstanceData.agentType,
            agentVersion: agentInstanceData.agentVersion,
            agentId: agentInstanceData.agentId
        };
        if (appName)
            query.appName = appName;
        if (branchName)
            query.branchName = branchName;
        if (buildName)
            query.buildName = buildName;
        if (testStage)
            query.testStage = testStage;
        if (labId)
            query.labId = labId;
        result += SLRoutes.buildQueryParams(query);
        return result;
    }
    static buildSessionV2(buildSessionId) {
        const result = SLRoutes.agentsV2() + SLRoutes.toUri(SLRoutes.BUILD_SESSION_ID) + SLRoutes.toUri(buildSessionId);
        return result;
    }
    static prBuildSession() {
        return SLRoutes.buildSessionV2() + SLRoutes.toUri(SLRoutes.PULL_REQUEST);
    }
    static logSubmissionV2() {
        const result = SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.V2) + SLRoutes.LOG_SUBMISSION;
        return result;
    }
    static buildMappingV4() {
        const result = SLRoutes.agentsV4() + SLRoutes.toUri(SLRoutes.BUILD_MAPPING);
        return result;
    }
    static footprintsV5() {
        const result = SLRoutes.agentsV5() + SLRoutes.toUri(SLRoutes.FOOTPRINTS);
        return result;
    }
    /**
     *
     * @param executionBsid - The build session id that used to open the execution (could be integration build)
     * @param testStage
     * @param buildSessionId - The build session id that the agent started with
     */
    static footprintsV6(executionBsid, testStage, buildSessionId) {
        return SLRoutes.agentsV6() + SLRoutes.toUri(executionBsid) + SLRoutes.toUri(SLRoutes.FOOTPRINTS) + SLRoutes.toUri(testStage) + SLRoutes.toUri(buildSessionId);
    }
    static footprintsToCollector(buildSessionId) {
        return SLRoutes.agentsV6() + SLRoutes.toUri(buildSessionId) + encodeURIComponent(SLRoutes.FOOTPRINTS);
    }
    static eventsV2() {
        return SLRoutes.agentsV2() + SLRoutes.toUri(SLRoutes.EVENTS);
    }
    static productionV1(buildSessionId) {
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(buildSessionId, 'buildSessionId');
        const result = SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.V1) + SLRoutes.toUri(SLRoutes.AGENTS) + SLRoutes.toUri(SLRoutes.PRODUCTION) + SLRoutes.toUri(SLRoutes.BSID) + SLRoutes.toUri(buildSessionId);
        return result;
    }
    static recommendedAgentV2(component, customerId, appName, branchName, testStage) {
        if (!component) {
            throw new Error(`'component' ${constants_1.Constants.Messages.CANNOT_BE_NULL_OR_UNDEFINED}.`);
        }
        let result = SLRoutes.agentsV2() + SLRoutes.toUri(component) + SLRoutes.toUri(SLRoutes.RECOMMENDED_VERSION);
        const query = {
            customerId: customerId,
            appName: appName,
            branch: branchName,
            envName: testStage
        };
        result += SLRoutes.buildQueryParams(query);
        return result;
    }
    static blobs(buildSessionId, blobId, blobType) {
        let route = SLRoutes.agentsV1() + SLRoutes.toUri(SLRoutes.BLOBS) + SLRoutes.toUri(buildSessionId) + SLRoutes.toUri(blobId);
        if (blobType) {
            route = route.slice(0, -1);
            route += SLRoutes.buildQueryParams({ blobType });
        }
        return route;
    }
    static blobsForBsidAsJson(buildSessionId, blobType) {
        let url = SLRoutes.agentsV1() + SLRoutes.toUri(SLRoutes.BLOBS) + SLRoutes.toUri(buildSessionId);
        url = url.slice(0, -1); // Remove lastSlash
        return url + SLRoutes.buildQueryParams({ view: 'concatJson', blobType });
    }
    static agentEvents() {
        return SLRoutes.agentsV3() + SLRoutes.toUri(SLRoutes.AGENT_EVENTS);
    }
    static testsRecommendations(buildSessionId, stage, testGroupId) {
        if (testGroupId === null || testGroupId === void 0 ? void 0 : testGroupId.length) {
            return SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.V4) + SLRoutes.toUri(SLRoutes.TEST_EXCLUSIONS) + SLRoutes.toUri(buildSessionId) + SLRoutes.toUri(stage) + SLRoutes.toUri(testGroupId);
        }
        return SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.V3) + SLRoutes.toUri(SLRoutes.TEST_EXCLUSIONS) + SLRoutes.toUri(buildSessionId) + SLRoutes.toUri(stage);
    }
    static integrationBuildComponents(buildSessionId) {
        return SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.V1) + SLRoutes.AGENTS + SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.INTEGRATION_BUILDS) +
            SLRoutes.toUri(buildSessionId) + SLRoutes.COMPONENTS;
    }
    static buildEnd() {
        return SLRoutes.agentsV3() + SLRoutes.toUri(SLRoutes.BUILD_END);
    }
    static activeBuildSessionId(labid) {
        return SLRoutes.SLASH + SLRoutes.toUri(SLRoutes.V1) + SLRoutes.toUri(SLRoutes.LAB_IDS) + SLRoutes.toUri(labid) +
            SLRoutes.toUri(SLRoutes.BUILD_SESSIONS) + SLRoutes.toUri(SLRoutes.ACTIVE);
    }
    static toUri(uri) {
        if (uri == null || uri.length == null || uri.length === 0) {
            return '';
        }
        return encodeURIComponent(uri) + SLRoutes.SLASH;
    }
    static buildQueryParams(paramsMap) {
        if (!paramsMap) {
            throw new Error('\'paramsMap\' cannot be null or undefined.');
        }
        let queryString = '';
        for (const key in paramsMap) {
            const value = paramsMap[key];
            queryString += SLRoutes.addQueryStringValue(key, value);
        }
        queryString = '?' + queryString;
        queryString = queryString.substring(0, queryString.length - 1); //Remove the last &.
        return queryString;
    }
    static addQueryStringValue(key, value) {
        if (!key && !value)
            return '';
        if (!value) {
            value = '';
        }
        let paramString = '';
        paramString += encodeURIComponent(key);
        paramString += '=';
        paramString += encodeURIComponent(value);
        paramString += '&';
        return paramString;
    }
    static syncTypeRoute(currentTime) {
        return SLRoutes.SLASH + SLRoutes.CLOCK + SLRoutes.SLASH + SLRoutes.SYNC + SLRoutes.buildQueryParams({ time: currentTime });
    }
}
exports.SLRoutes = SLRoutes;
SLRoutes.SLASH = '/';
SLRoutes.V1 = 'v1';
SLRoutes.V2 = 'v2';
SLRoutes.V3 = 'v3';
SLRoutes.V4 = 'v4';
SLRoutes.V5 = 'v5';
SLRoutes.V6 = 'v6';
SLRoutes.AGENTS = 'agents';
SLRoutes.EVENTS = 'events';
SLRoutes.PRODUCTION = 'productiondata';
SLRoutes.BSID = 'bsid';
SLRoutes.BUILD_SESSION_ID = 'buildsession';
SLRoutes.BUILD_MAPPING = 'buildmapping';
SLRoutes.RECOMMENDED_VERSION = 'recommended';
SLRoutes.CONFIG = 'config';
SLRoutes.LOG_SUBMISSION = 'logsubmission';
SLRoutes.FOOTPRINTS = 'footprints';
SLRoutes.TEST_EXECUTION = 'testExecution';
SLRoutes.EXTERNAL_DATA = 'externaldata';
SLRoutes.EXTERNAL_REPORT = 'externalreport';
SLRoutes.BLOBS = 'blobs';
SLRoutes.AGENT_EVENTS = 'agent-events';
SLRoutes.PULL_REQUEST = 'pull-request';
SLRoutes.TEST_EXCLUSIONS = 'test-exclusions';
SLRoutes.INTEGRATION_BUILDS = 'integration-builds';
SLRoutes.COMPONENTS = 'components';
SLRoutes.BUILD_END = 'buildend';
SLRoutes.LAB_IDS = 'lab-ids';
SLRoutes.BUILD_SESSIONS = 'build-sessions';
SLRoutes.ACTIVE = 'active';
SLRoutes.CLOCK = 'clock';
SLRoutes.SYNC = 'sync';
//# sourceMappingURL=sl-routes.js.map