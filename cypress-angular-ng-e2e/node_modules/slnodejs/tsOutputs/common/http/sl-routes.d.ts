import { AgentInstanceData } from '../agent-instance-data';
export declare class SLRoutes {
    static SLASH: string;
    static V1: string;
    static V2: string;
    static V3: string;
    static V4: string;
    static V5: string;
    static V6: string;
    static AGENTS: string;
    static EVENTS: string;
    static PRODUCTION: string;
    static BSID: string;
    static BUILD_SESSION_ID: string;
    static BUILD_MAPPING: string;
    static RECOMMENDED_VERSION: string;
    static CONFIG: string;
    static LOG_SUBMISSION: string;
    static FOOTPRINTS: string;
    static TEST_EXECUTION: string;
    static EXTERNAL_DATA: string;
    static EXTERNAL_REPORT: string;
    static BLOBS: string;
    static AGENT_EVENTS: string;
    static PULL_REQUEST: string;
    static TEST_EXCLUSIONS: string;
    static INTEGRATION_BUILDS: string;
    static COMPONENTS: string;
    static BUILD_END: string;
    static readonly LAB_IDS = "lab-ids";
    static readonly BUILD_SESSIONS = "build-sessions";
    static readonly ACTIVE = "active";
    static readonly CLOCK = "clock";
    static readonly SYNC = "sync";
    private static agentsV1;
    private static agentsV2;
    private static agentsV3;
    private static agentsV4;
    private static agentsV5;
    private static agentsV6;
    static testExecution(): string;
    static testExecutionV4(labId: string, executionId?: string): string;
    static endExecution(customerId: string, appName: string, buildName: string, branchName: string, environment: string): string;
    static externalData(): string;
    static externalReport(): string;
    static configV3(agentInstanceData: AgentInstanceData, appName: string, branchName: string, buildName: string, testStage: string, labId: string): string;
    static buildSessionV2(buildSessionId?: string): string;
    static prBuildSession(): string;
    static logSubmissionV2(): string;
    static buildMappingV4(): string;
    static footprintsV5(): string;
    /**
     *
     * @param executionBsid - The build session id that used to open the execution (could be integration build)
     * @param testStage
     * @param buildSessionId - The build session id that the agent started with
     */
    static footprintsV6(executionBsid: string, testStage: string, buildSessionId: string): string;
    static footprintsToCollector(buildSessionId: string): string;
    static eventsV2(): string;
    static productionV1(buildSessionId: any): string;
    static recommendedAgentV2(component: string, customerId: string, appName: string, branchName: string, testStage: string): string;
    static blobs(buildSessionId: string, blobId: string, blobType?: string): string;
    static blobsForBsidAsJson(buildSessionId: string, blobType?: string): string;
    static agentEvents(): string;
    static testsRecommendations(buildSessionId: string, stage: string, testGroupId?: string): string;
    static integrationBuildComponents(buildSessionId: string): string;
    static buildEnd(): string;
    static activeBuildSessionId(labid: string): string;
    private static toUri;
    static buildQueryParams(paramsMap: any): string;
    private static addQueryStringValue;
    static syncTypeRoute(currentTime: any): string;
}
