export interface IAgentMeta {
    sequence: number;
    generated: number;
    agentId: string;
}
export interface IEnvironment {
    agentType: string;
    agentVersion: string;
    agentId: string;
    environmentName?: string;
    testStage?: string;
    labId?: string;
}
export interface IEventsFile {
    customerId: string;
    environment: IEnvironment;
    configurationData: Record<string, any>;
    meta: IAgentMeta;
    appName: string;
    build: string;
    branch: string;
    events: IEvent[];
    testSelectionStatus: TestSelectionStatus;
}
export interface IEvent {
    type: EventTypes;
    executionId?: string;
    framework?: string;
    reporterVersion?: string;
    localTime?: number;
    testType?: 'dummy' | 'regular';
    colorName?: string;
}
export interface ITestStartEvent extends IEvent {
    testName: string;
}
export interface ITestEndEvent extends IEvent {
    testName: string;
    duration: number;
}
export declare enum EventTypes {
    AgentStarted = "agentStarted",
    ExecutionIdStarted = "executionIdStarted",
    ExecutionIdEnded = "executionIdEnded",
    TestStart = "testStart",
    TestEnd = "testEnd"
}
export declare enum TestSelectionStatus {
    RECOMMENDED_TESTS = "recommendedTests",
    DISABLED = "disabled",
    DISABLED_BY_CONFIGURATION = "disabledByConfiguration",
    RECOMMENDATIONS_NOT_AVAILABLE = "recommendationsNotAvailable",
    ERROR = "error"
}
export interface componentCoverage {
    bsids: string[];
    coverage: any;
}
