"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventsProcess = void 0;
const validation_utils_1 = require("../utils/validation-utils");
const system_date_1 = require("../system-date");
class EventsProcess {
    constructor(configuration, agentInstanceData, sendToServerWatchdog, keepAliveWatchdog, environmentDataService, backendProxy, eventsQueue, logger, colorContextManager) {
        this.colorContextManager = colorContextManager;
        this._isRunning = false;
        this.sequence = 0;
        this._onGoingRequests = [];
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(configuration, 'configuration');
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(agentInstanceData, 'agentInstanceData');
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(sendToServerWatchdog, 'sendToServerWatchdog');
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(keepAliveWatchdog, 'keepAliveWatchdog');
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(environmentDataService, 'environmentData');
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(backendProxy, 'backendProxy');
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(eventsQueue, 'eventsQueue');
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(logger, 'logger');
        this._configuration = configuration;
        this._agentInstanceData = agentInstanceData;
        this._sendToServerWatchdog = sendToServerWatchdog;
        this.keepAliveWatchdog = keepAliveWatchdog;
        this.environmentData = environmentDataService;
        this._backendProxy = backendProxy;
        this._logger = logger;
        this._eventsQueue = eventsQueue;
        this.init();
    }
    enqueueEvent(evt) {
        var _a;
        evt.localTime = evt.localTime || (0, system_date_1.getSystemDateValueOf)();
        evt.colorName = (_a = this.colorContextManager) === null || _a === void 0 ? void 0 : _a.getTestName();
        this._eventsQueue.enqueue(evt);
        if (this.isRunning && this.configuration.sendEvents.value && this.configuration.enabled.value) {
            this.ensureKeepaliveThreadRunning();
        }
    }
    start() {
        if (this._isRunning || !this._configuration.enabled.value) {
            return;
        }
        this._sendToServerWatchdog.start();
        if (this._eventsQueue.getQueueSize() > 0) {
            this.ensureKeepaliveThreadRunning();
        }
        this._isRunning = true;
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            this._sendToServerWatchdog.stop();
            this.keepAliveWatchdog.stop();
            if (this._configuration.enabled.value === false || this._configuration.sendEvents.value === false) { //Events/Agent functionality is disabled. Return immediately
                return;
            }
            try {
                yield Promise.all(this._onGoingRequests);
                yield this.submitEventsSync();
            }
            catch (e) {
                this._logger.warn('Error while stopping EventsProcess: ', e);
            }
            this._isRunning = false;
        });
    }
    getQueueSize() {
        return this._eventsQueue.getQueueSize();
    }
    submitEvents() {
        if (!this._isRunning ||
            !this._configuration.sendEvents.value ||
            !this._configuration.enabled.value ||
            this._eventsQueue.getQueueSize() == 0) {
            return;
        }
        const items = this._eventsQueue.dequeue(EventsProcess.ITEMS_TO_DEQUE);
        const packet = this.createEventsPacket(items);
        const promise = this._backendProxy.submitEventsPromise(packet);
        this._onGoingRequests.push(promise);
        promise.then(() => {
            if (this._eventsQueue.getQueueSize() > 0) {
                this.submitEvents();
            }
            this.removeRequest(promise);
        }).catch(err => {
            this._logger.warn(`Error while submitting events, ${err}`);
            this._eventsQueue.requeue(items);
            this.removeRequest(promise);
        });
    }
    submitEventsSync() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                while (this._eventsQueue.getQueueSize() > 0) {
                    const items = this._eventsQueue.dequeue(EventsProcess.ITEMS_TO_DEQUE);
                    const packet = this.createEventsPacket(items);
                    yield this._backendProxy.submitEventsPromise(packet);
                }
            }
            catch (e) {
                this._logger.warn(`Error while sending events synchronously. ${e}`);
            }
        });
    }
    createEventsPacket(items) {
        return {
            customerId: this._configuration.customerId.value,
            appName: this._configuration.appName.value,
            build: this._configuration.build.value,
            branch: this._configuration.branch.value,
            environment: this.environmentData,
            configurationData: this._configuration.toJsonObject,
            testSelectionStatus: this._testSelectionStatus,
            events: items,
            meta: {
                sequence: ++this.sequence,
                generated: (0, system_date_1.getSystemDateValueOf)(),
                agentId: this._agentInstanceData.agentId,
            },
        };
    }
    init() {
        this._sendToServerWatchdog.on('alarm', () => this.submitEvents());
        this._eventsQueue.on('full', () => this.submitEvents());
        this.keepAliveWatchdog.on('alarm', () => {
            if (this.eventsQueue.getQueueSize() == 0) {
                this.keepAliveWatchdog.stop();
            }
        });
    }
    ensureKeepaliveThreadRunning() {
        this.keepAliveWatchdog.start();
    }
    removeRequest(request) {
        const index = this._onGoingRequests.indexOf(request);
        this._onGoingRequests.splice(index, 1);
    }
    get onGoingRequests() {
        return this._onGoingRequests;
    }
    get configuration() {
        return this._configuration;
    }
    get logger() {
        return this._logger;
    }
    get isRunning() {
        return this._isRunning;
    }
    set isRunning(value) {
        this._isRunning = value;
    }
    get sendToServerWatchdog() {
        return this._sendToServerWatchdog;
    }
    get backendProxy() {
        return this._backendProxy;
    }
    get eventsQueue() {
        return this._eventsQueue;
    }
    set testSelectionStatus(testSelectionStatus) {
        this._testSelectionStatus = testSelectionStatus;
    }
    get testSelectionStatus() {
        return this._testSelectionStatus;
    }
}
exports.EventsProcess = EventsProcess;
EventsProcess.ITEMS_TO_DEQUE = 1000;
//# sourceMappingURL=index.js.map