import { IWatchdog } from '../watchdog';
import { IQueue } from '../queue';
import { BackendProxy } from '../http/backend-proxy';
import { IEnvironment, IEvent, IEventsFile, TestSelectionStatus } from './events-contracts';
import { AgentConfig } from '../config-process/config';
import { AgentInstanceData } from '../agent-instance-data';
import { IColorContextManager } from '../contracts';
export declare class EventsProcess {
    private readonly colorContextManager?;
    protected static readonly ITEMS_TO_DEQUE = 1000;
    private _configuration;
    private _agentInstanceData;
    private keepAliveWatchdog;
    private _sendToServerWatchdog;
    private environmentData;
    private _backendProxy;
    private _eventsQueue;
    private _logger;
    private _isRunning;
    private sequence;
    private _onGoingRequests;
    private _testSelectionStatus;
    constructor(configuration: AgentConfig, agentInstanceData: AgentInstanceData, sendToServerWatchdog: IWatchdog, keepAliveWatchdog: IWatchdog, environmentDataService: IEnvironment, backendProxy: BackendProxy, eventsQueue: IQueue<IEvent>, logger: any, colorContextManager?: IColorContextManager);
    enqueueEvent(evt: IEvent): void;
    start(): void;
    stop(): Promise<void>;
    getQueueSize(): any;
    private submitEvents;
    private submitEventsSync;
    protected createEventsPacket(items: any[]): IEventsFile;
    private init;
    private ensureKeepaliveThreadRunning;
    private removeRequest;
    get onGoingRequests(): Promise<any>[];
    get configuration(): AgentConfig;
    get logger(): any;
    get isRunning(): boolean;
    set isRunning(value: boolean);
    get sendToServerWatchdog(): IWatchdog;
    get backendProxy(): BackendProxy;
    get eventsQueue(): IQueue<IEvent>;
    set testSelectionStatus(testSelectionStatus: TestSelectionStatus);
    get testSelectionStatus(): TestSelectionStatus;
}
