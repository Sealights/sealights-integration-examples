"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FootprintsBuffer = void 0;
const cockpit_notifier_1 = require("../agent-events/cockpit-notifier");
const agent_events_contracts_1 = require("../agent-events/agent-events-contracts");
const events = require("events");
const buffer_size_helper_1 = require("./buffer-size-helper");
/**
 * Holds the footprints hits data and builds the DTO for footprints packet
 */
class FootprintsBuffer extends events.EventEmitter {
    constructor(agentInstanceData, agentConfig) {
        super();
        this.formatVersion = '6.0';
        this.agentInstanceData = agentInstanceData;
        this._agentConfig = agentConfig;
        this.currentBufferSize = 0;
        this.resetState();
        this.meta = {
            agentId: this.agentInstanceData.agentId,
            intervals: {
                timedFootprintsCollectionIntervalSeconds: this._agentConfig.footprintsCollectIntervalSecs.value
            },
            labId: this._agentConfig.labId.value
        };
    }
    addHit(footprints, collectionInterval, executionId, testName, isInitFootprints, isFinalFootprints) {
        cockpit_notifier_1.CockpitNotifier.sendEventOnce(agent_events_contracts_1.AgentEventCode.FIRST_TIME_COLLECTED_FP);
        const methodIndices = this.addOrGetIndices(footprints.methods, true);
        const branchIndices = this.addOrGetIndices(footprints.branches, false);
        const executionIdx = this.addOrGetExecutionIndex(executionId);
        this.executions[executionIdx].hits.push({
            branches: branchIndices,
            methods: methodIndices,
            start: collectionInterval.start,
            end: collectionInterval.end,
            testName: testName,
            isInitFootprints,
            isFinalFootprints
        });
        this.bufferSizeHelper.incrementSizeCounters(testName, methodIndices.length, branchIndices.length);
        this.verifyBufferSize();
    }
    createPacket() {
        const packet = this.toJson();
        this.resetState();
        return packet;
    }
    resetState() {
        this.branches = [];
        this.methods = [];
        this.executions = [];
        this.methodIdToIndex = new Map();
        this.branchIdToIndex = new Map();
        this.bufferSizeHelper = new buffer_size_helper_1.BufferSizeHelper();
    }
    hasHitsInBuffer() {
        return this.executions.length > 0;
    }
    get agentConfig() {
        return this._agentConfig;
    }
    set agentConfig(value) {
        this._agentConfig = value;
    }
    toJson() {
        if (!this.executions || !this.executions.length) {
            return null;
        }
        return {
            formatVersion: this.formatVersion,
            branches: this.branches,
            executions: this.executions,
            meta: this.meta,
            methods: this.methods,
            moduleName: this.moduleName
        };
    }
    addOrGetIndices(elementIds, isMethods) {
        const map = isMethods ? this.methodIdToIndex : this.branchIdToIndex;
        const arr = isMethods ? this.methods : this.branches;
        const indices = [];
        elementIds.forEach(id => {
            if (!map.get(id)) {
                this.bufferSizeHelper.uniqueIdsLengthSum += id.length;
                this.bufferSizeHelper.uniqueIdsCount++;
                const position = arr.push(id);
                map.set(id, position - 1);
            }
            indices.push(map.get(id));
        });
        return indices;
    }
    addOrGetExecutionIndex(executionId) {
        let index = -1;
        this.executions.every((execution, idx) => {
            if (executionId == execution.executionId) {
                index = idx;
                return false;
            }
            return true;
        });
        return index != -1 ? index : this.executions.push({ executionId: executionId, hits: [] }) - 1;
    }
    verifyBufferSize() {
        if (this.bufferSizeHelper.calculateBufferSize() >= this._agentConfig.footprintsBufferThresholdMb.value) {
            this.emit(FootprintsBuffer.BUFFER_FULL);
        }
    }
}
exports.FootprintsBuffer = FootprintsBuffer;
FootprintsBuffer.BUFFER_FULL = 'bufferFull';
//# sourceMappingURL=footprints-buffer.js.map