/**
 * Converts element hits to footprints (uniqueIds)
 */
import { IBranchHit, IConvertedFootprints, IHitFileData, IMethodData, IPosition, IPositionFull } from './contracts';
import { RelativePathResolver } from './relative-path-resolver';
import { SourceMapData } from './source-map-data';
import { Logger } from '../contracts';
export declare class HitsConverter {
    static readonly METHOD_ID_DEL = "@";
    static readonly BRANCH_ID_DEL = "|";
    private relativePathResolver;
    private projectRoot;
    private sourceMapData;
    protected logger: Logger;
    private conversionErrors;
    protected _slMapping: {
        [key: string]: string;
    };
    constructor(relativePathResolver: RelativePathResolver, sourceMapData: SourceMapData, projectRoot: string, logger: Logger);
    convertHits(hitFilesData: IHitFileData[]): IConvertedFootprints;
    get slMapping(): {
        [p: string]: string;
    };
    set slMapping(value: {
        [p: string]: string;
    });
    private createMethodIds;
    protected getDeclStart(hit: IMethodData): IPosition;
    protected getDecl(hit: IMethodData): import("./contracts").IIstanbulLocation;
    protected getStartLoc(hit: IMethodData): IPosition;
    protected getLeaveStartLoc(hit: IBranchHit, leaveIdx: number, absolutePath: string): IPosition;
    private createBranchIds;
    protected getMethodUniqueId(startLoc: IPositionFull, relativePath: string, absolutePath: string): string;
    protected getBranchUniqueId(startLoc: IPosition, relativePath: string, absolutePath: string, leaveIndex: number): string;
    private resolveIdParts;
    private buildMethodUniqueId;
    private sendConversionErrors;
    protected formatLoc(loc: IPositionFull): string;
}
