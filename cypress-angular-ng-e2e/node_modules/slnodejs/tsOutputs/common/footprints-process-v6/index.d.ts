import { AgentConfig } from '../config-process/config';
import { Watchdog } from '../watchdog';
import { HitsCollector } from './hits-collector';
import { HitsConverter } from './hits-converter';
import { FootprintsBuffer } from './footprints-buffer';
import { StateTracker } from '../state-tracker';
import { IExecutionData, Logger } from '../contracts';
import { BackendProxy } from '../http/backend-proxy';
export declare class FootprintsProcess {
    protected static readonly ALARM_FIRED = "alarm";
    private _cfg;
    private _sendToServerWatchdog;
    private _keepaliveWatchdog;
    protected hitsCollector: HitsCollector;
    private hitsConverter;
    protected footprintsBuffer: FootprintsBuffer;
    private collectionInterval;
    private currentExecutionBsid;
    protected isRunning: boolean;
    protected stateTracker: StateTracker;
    protected logger: Logger;
    private _backendProxy;
    private _ongoingRequestsCounter;
    private footprintsEnqueueOnce;
    constructor(cfg: AgentConfig, sendToServerWatchdog: Watchdog, keepaliveWatchdog: Watchdog, logger: Logger, hitsCollector: HitsCollector, hitsConverter: HitsConverter, footprintsBuffer: FootprintsBuffer, backendProxy: BackendProxy, stateTracker: StateTracker);
    enqueueCurrentFootprints(execution: IExecutionData, testName: string, isFinalFootprints?: boolean): Promise<void>;
    updateConfig(updatedCfg: AgentConfig): Promise<void>;
    getBufferPacket(): Promise<import("./contracts").IFootprintsV6File>;
    private stopIfNeededAfterConfigChanged;
    private ensureKeepaliveThreadRunning;
    submitQueuedFootprints(execution: IExecutionData): Promise<void>;
    submitComponentQueuedFootprints(componentBuildSessionId: string, testStage: string): Promise<void>;
    protected shouldSubmitFootprints(): boolean;
    start(): void;
    stop(): Promise<void>;
    handleTestIdChanged(newTestIdentifier: any, previousTestIdentifier: any): void;
    delegateEvents(): void;
    private enqueueAndSubmit;
    flushCurrentFootprints(isFinalFootprints?: boolean): Promise<void>;
    private checkShouldUpdateCoverageSnapshot;
    private isInitFootprints;
    hasOngoingRequests(): boolean;
    loadSlMapping(): Promise<void>;
    set ongoingRequestsCounter(value: any);
    get backendProxy(): BackendProxy;
    set backendProxy(value: BackendProxy);
    get cfg(): AgentConfig;
    set cfg(value: AgentConfig);
    get sendToServerWatchdog(): Watchdog;
    set sendToServerWatchdog(value: Watchdog);
    get keepaliveWatchdog(): Watchdog;
    set keepaliveWatchdog(value: Watchdog);
}
