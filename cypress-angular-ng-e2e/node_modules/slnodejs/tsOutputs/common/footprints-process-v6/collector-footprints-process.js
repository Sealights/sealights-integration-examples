"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectorFootprintsProcess = void 0;
const _1 = require(".");
const no_op_state_tracker_1 = require("../no-op-state-tracker");
class CollectorFootprintsProcess extends _1.FootprintsProcess {
    constructor(cfg, sendToServerWatchdog, keepaliveWatchdog, logger, hitsCollector, hitsConverter, footprintsBuffer, backendProxy, stateTracker) {
        super(cfg, sendToServerWatchdog, keepaliveWatchdog, logger, hitsCollector, hitsConverter, footprintsBuffer, backendProxy, stateTracker);
    }
    submitQueuedFootprints() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.shouldSubmitFootprints()) {
                return;
            }
            const packet = this.footprintsBuffer.createPacket();
            if (packet) {
                this.ongoingRequestsCounter++;
                try {
                    yield this.backendProxy.submitFootprintsToCollector(packet, this.cfg.buildSessionId.value);
                    this.logger.info(`Footprints packet submitted successfully. packet contains ${packet.methods.length} methods, ${packet.branches.length} branches in ${packet.executions.length} executions`);
                }
                catch (e) {
                    this.logger.error(`Error while submitting footprints '${e}'`);
                }
                finally {
                    this.ongoingRequestsCounter--;
                }
            }
            else {
                this.logger.info('No hits collected nothing to submit');
            }
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            this.sendToServerWatchdog.stop();
            this.hitsCollector.sendErrors();
            if (!this.shouldSubmitFootprints()) {
                this.isRunning = false;
                return;
            }
            yield this.flushCurrentFootprints(true);
            const packet = this.footprintsBuffer.createPacket();
            this.isRunning = false;
            if (!packet) {
                this.logger.info('No hits collected, nothing to submit');
                return;
            }
            this.logger.info('Start submitting footprints, triggered by stop event.');
            try {
                yield this.backendProxy.submitFootprintsToCollector(packet, this.cfg.buildSessionId.value);
                this.logger.info('Final footprints submitted successfully');
            }
            catch (e) {
                this.logger.error(`Failed to submit final footprints, error: ${e.message}`);
                this.logger.debug(e);
                return;
            }
        });
    }
    flushCurrentFootprints(isFinalFootprints = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const currentTestIdentifier = this.stateTracker.getCurrentTestIdentifier();
            // Colored footprints
            if (currentTestIdentifier) {
                const testIdentifierParts = no_op_state_tracker_1.NoopStateTracker.splitTestIdToExecutionAndTestName(currentTestIdentifier);
                this.logger.debug('Enqueue footprints interval - start enqueuing process. currentTestIdentifier: \'%s\'', currentTestIdentifier);
                yield this.enqueueCurrentFootprints(this.stateTracker.currentExecution, testIdentifierParts.testName, isFinalFootprints);
            }
            // Anonymous footprints
            else {
                this.logger.debug('Enqueue footprints interval - start enqueuing process. anonymous footprints');
                yield this.enqueueCurrentFootprints(this.stateTracker.currentExecution, null, isFinalFootprints);
            }
        });
    }
}
exports.CollectorFootprintsProcess = CollectorFootprintsProcess;
//# sourceMappingURL=collector-footprints-process.js.map