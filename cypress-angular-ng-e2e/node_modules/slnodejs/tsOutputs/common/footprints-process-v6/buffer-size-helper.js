"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BufferSizeHelper = void 0;
class BufferSizeHelper {
    constructor() {
        this.uniqueIdsLengthSum = 0;
        this.testNamesCount = 0;
        this.testNamesLengthSum = 0;
        this.hitCount = 0;
        this.indicesCount = 0;
        this.uniqueIdsCount = 0;
    }
    /* Calculates the buffer size in bytes. The calculation based on th following:
      * Each uniqueId or test name calculated by its length (byte for each char) + extra 4 bytes (quotes, space and comma)
      * Each 'hit' object approximate to 128 bytes.
      * Each uniqueId index in hit (methods/branches) - 8 bytes
      (see https://docs.google.com/document/d/1KQXjKFTHlJXi_zKs6QE5wCuKY5B1t3pJCemEgBriOI4/edit?usp=sharing)
    */
    calculateBufferSize() {
        const sizeInBytes = (this.uniqueIdsCount * BufferSizeHelper.FOUR_BYTES + this.uniqueIdsLengthSum) +
            (this.testNamesCount * BufferSizeHelper.FOUR_BYTES + this.testNamesLengthSum) +
            (this.hitCount * BufferSizeHelper.APPROX_HIT_SIZE) +
            (this.indicesCount * BufferSizeHelper.EIGHT_BYTES);
        return sizeInBytes / BufferSizeHelper.BYTES_IN_MB;
    }
    incrementSizeCounters(testName, methodIndicesSize, branchIndicesSize) {
        this.hitCount++;
        this.indicesCount += (methodIndicesSize + branchIndicesSize);
        if (testName) {
            this.testNamesCount++;
            this.testNamesLengthSum += testName.length;
        }
    }
}
exports.BufferSizeHelper = BufferSizeHelper;
BufferSizeHelper.FOUR_BYTES = 4;
BufferSizeHelper.EIGHT_BYTES = 8;
BufferSizeHelper.APPROX_HIT_SIZE = 128;
BufferSizeHelper.BYTES_IN_MB = 1024 * 1024;
BufferSizeHelper.BYTES_IN_GB = 1024 * 1024 * 1024;
//# sourceMappingURL=buffer-size-helper.js.map