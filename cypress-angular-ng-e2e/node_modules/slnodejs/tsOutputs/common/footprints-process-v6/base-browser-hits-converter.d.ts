import { HitsConverter } from '../../common/footprints-process-v6/hits-converter';
import { RelativePathResolver } from '../../common/footprints-process-v6/relative-path-resolver';
import { IBranchHit, IIstanbulLocation, IMethodData, IPosition } from '../../common/footprints-process-v6/contracts';
import { Logger } from '../contracts';
/**
 * Converts hits to uniqueId using sl-mapping
 */
export declare abstract class BaseBrowserHitsConverter extends HitsConverter {
    protected buildSessionId: string;
    constructor(relativePathResolver: RelativePathResolver, buildSessionId: string, logger: Logger);
    protected abstract getSlMapping(): any;
    protected getMethodUniqueId(startLoc: IPosition, relativePath: string, absolutePath: string): string;
    protected getBranchUniqueId(startLoc: IPosition, relativePath: string, absolutePath: string, leaveIndex: number): string;
    protected getDeclStart(hit: IMethodData): IPosition;
    protected getDecl(hit: IMethodData): IIstanbulLocation;
    protected getStartLoc(hit: IMethodData): IPosition;
    protected getLeaveStartLoc(hit: IBranchHit, leaveIdx: number): IPosition;
    protected formatLoc(loc: IPosition): string;
    private tryGetUniqueIdFromSlMapping;
}
