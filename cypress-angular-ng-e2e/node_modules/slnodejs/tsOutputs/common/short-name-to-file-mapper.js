"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShortNameToFileMapper = void 0;
const path = require("path");
const validation_utils_1 = require("./utils/validation-utils");
const files_utils_1 = require("./utils/files-utils");
class ShortNameToFileMapper {
    constructor(logger) {
        validation_utils_1.ValidationUtils.verifyNotNullOrEmpty(logger, 'logger');
        this.shortNameToFile = {};
        this.fileAlreadyAddedMap = {};
        this.isDuplicateResolves = false;
        this.logger = logger;
    }
    addFile(file) {
        file = files_utils_1.FilesUtils.adjustPathSlashes(file);
        if (this.fileAlreadyAddedMap[file]) {
            return;
        }
        const base = path.basename(file);
        this.addShortNameToFile(base, file);
        this.fileAlreadyAddedMap[file] = true;
    }
    resolveShortNameForFile(file) {
        file = files_utils_1.FilesUtils.adjustPathSlashes(file);
        if (!this.isDuplicateResolves) {
            this.findShortPathForDuplicates();
            this.isDuplicateResolves = true;
        }
        const pathParts = file.split('/');
        let counter = pathParts.length - 1;
        let shortestPath = null;
        while (counter >= 0 && shortestPath == null) {
            const currentShort = pathParts.slice(counter).join('/');
            if (!this.shortNameToFile[currentShort]) {
                this.logger.warn(`could not find short name for '${file}'`);
                shortestPath = currentShort;
            }
            else if (Array.isArray(this.shortNameToFile[currentShort]) &&
                !(this.shortNameToFile[currentShort].length > 1)) {
                this.logger.debug(`found '${currentShort}' as  short name for '${file}'`);
                shortestPath = currentShort;
            }
            counter--;
        }
        if (!shortestPath) {
            this.logger.warn(`could not find short name for '${file}'`);
            return file;
        }
        return shortestPath;
    }
    findShortPathForDuplicates() {
        const shortNames = Object.keys(this.shortNameToFile);
        for (const shortName of shortNames) {
            if (this.shortNameToFile[shortName].length > 1) {
                this.mapDuplicates(this.shortNameToFile[shortName]);
            }
        }
    }
    mapDuplicates(duplicates) {
        for (const file of duplicates) {
            const parts = file.split('/');
            let counter = parts.length - 2;
            while (counter >= 0) {
                const shortName = parts.slice(counter).join('/');
                this.addShortNameToFile(shortName, file);
                counter--;
            }
        }
    }
    addShortNameToFile(shortName, file) {
        this.shortNameToFile[shortName] = this.shortNameToFile[shortName] || [];
        this.shortNameToFile[shortName].push(file);
    }
}
exports.ShortNameToFileMapper = ShortNameToFileMapper;
//# sourceMappingURL=short-name-to-file-mapper.js.map