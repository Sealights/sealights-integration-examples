"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentInstanceInfoBuilder = void 0;
const sensitive_data_filter_1 = require("./sensitive-data-filter");
const SEALIGHTS_ENV_VAR_PREFIX = 'SL_';
//These env vars, if present, will be reported 
const CI_ENV_VARS = new Set([
    'build_number',
    'build_id',
    'build_url',
    'node_name',
    'job_name',
    'build_tag',
    'jenkins_url',
    'workspace',
    'git_commit',
    'git_url',
    'git_branch',
    'circle_branch',
    'circle_build_num',
    'circle_build_url',
    'circle_job',
    'circle_node_index',
    'circle_node_total',
    'circle_pr_number',
    'circle_pr_reponame',
    'circle_previous_build_num',
    'circle_project_reponame',
    'circle_pull_request',
    'circle_repository_url',
    'circle_sha1',
    'circle_tag',
    'circle_workflow_id',
    'circle_workflow_job_id',
    'circle_workflow_workspace_id',
    'circle_working_directory',
    // TEAM CITY
    'teamcity_version',
    'teamcity_project_name',
    'teamcity_buildconf_name',
    'build_is_personal',
    // Gitlab
    'ci_builds_dir',
    'ci_commit_author',
    'ci_commit_before_sha',
    'ci_commit_branch',
    'ci_commit_description',
    'ci_commit_message',
    'ci_commit_ref_name',
    'ci_commit_ref_slug',
    'ci_commit_sha',
    'ci_commit_short_sha',
    'ci_commit_tag',
    'ci_commit_timestamp',
    'ci_commit_title',
    'ci_concurrent_id',
    'ci_concurrent_project_id',
    'ci_config_path',
    'ci_default_branch',
    'ci_dependency_proxy_server',
    'ci_disposable_environment',
    'ci_environment_name',
    'ci_environment_slug',
    'ci_environment_url',
    'ci_environment_action',
    'ci_environment_tier',
    'ci_job_id',
    'ci_job_image',
    'ci_job_name',
    'ci_job_stage',
    'ci_job_url',
    'ci_job_started_at',
    'ci_kubernetes_active',
    'ci_node_index',
    'ci_node_total',
    'ci_pipeline_url',
    'ci_project_dir',
    'ci_project_name',
    'ci_project_namespace',
    'ci_project_path_slug',
    'ci_project_path',
    'ci_project_repository_languages',
    'ci_project_root_namespace',
    'ci_project_title',
    'ci_project_description',
    'ci_project_url',
    'ci_registry_image',
    'ci_repository_url',
    'ci_server_host',
    'ci_server_name',
    'ci_server_url',
    'ci_server_version_major',
    'ci_server_version_minor',
    'ci_server_version_patch',
    'ci_server_version',
    'gitlab_ci',
    'ci_merge_request_approved',
    'ci_merge_request_assignees',
    'ci_merge_request_id',
    'ci_merge_request_iid',
    'ci_merge_request_labels',
    'ci_merge_request_milestone',
    'ci_merge_request_project_id',
    'ci_merge_request_project_path',
    'ci_merge_request_project_url',
    'ci_merge_request_ref_path',
    'ci_merge_request_source_branch_name',
    'ci_merge_request_source_branch_sha',
    'ci_merge_request_source_project_id',
    'ci_merge_request_source_project_path',
    'ci_merge_request_source_project_url',
    'ci_merge_request_target_branch_name',
    'ci_merge_request_target_branch_sha',
    'ci_merge_request_title',
    'ci_merge_request_event_type',
    'ci_merge_request_diff_id',
    'ci_merge_request_diff_base_sha',
    'ci_external_pull_request_iid',
    'ci_external_pull_request_source_repository',
    'ci_external_pull_request_target_repository',
    'ci_external_pull_request_source_branch_name',
    'ci_external_pull_request_source_branch_sha',
    'ci_external_pull_request_target_branch_name',
    'ci_external_pull_request_target_branch_sha',
    'github_action',
    'github_action_path',
    'github_action_repository',
    'github_base_ref',
    'github_env',
    'github_head_ref',
    'github_job',
    'github_path',
    'github_ref',
    'github_ref_name',
    'github_ref_type',
    'github_repository',
    'github_repository_owner',
    'github_sha',
    'github_step_summary',
    'github_workflow',
    'github_workspace',
    'runner_arch',
    'runner_name',
    'runner_os',
    'runner_temp',
    'runner_tool_cache'
]);
class AgentInstanceInfoBuilder {
    constructor(agentEventsController) {
        this.sendsPing = true;
        this.agentConfig = agentEventsController.agentConfig;
        this.tags = agentEventsController.resolveTags();
        this.tools = agentEventsController.tools;
        this.logger = agentEventsController.logger;
        this.technology = agentEventsController.agentInstanceData.technology;
        this.info = {
            agentId: agentEventsController.agentInstanceData.agentId,
            agentType: agentEventsController.agentInstanceData.agentType,
            agentVersion: agentEventsController.agentInstanceData.agentVersion,
            technology: agentEventsController.agentInstanceData.technology,
        };
    }
    fillData() {
        this.info.tags = this.tags;
        this.info.tools = this.tools;
        this.info.technology = this.technology;
        this.info.sendsPing = this.sendsPing;
        this.fillFromAgentConfig();
        this.fillFromProcessObject();
    }
    build() {
        this.fillData();
        return this.info;
    }
    fillFromAgentConfig() {
        this.info.buildSessionId = this.agentConfig.buildSessionId.value;
        this.info.labId = this.agentConfig.labId.value || this.agentConfig.buildSessionId.value;
        this.info.testStage = this.agentConfig.testStage.value;
        this.info.agentConfig = this.agentConfig.toJsonObject();
    }
    fillFromProcessObject() {
        this.info.processId = process.pid;
        this.info.processArch = process.arch;
        this.info.argv = process.argv;
        this.info.cwd = process.cwd();
        this.info.envVars = this.extractSealightsEnvVars();
    }
    extractSealightsEnvVars() {
        const slEnvVars = {};
        Object.keys(process.env).forEach(key => {
            if (key.indexOf(SEALIGHTS_ENV_VAR_PREFIX) === 0 || key === 'NODE_OPTIONS' || key === 'PATH' || CI_ENV_VARS.has(key.toLowerCase())) {
                slEnvVars[key] = (0, sensitive_data_filter_1.isSensitive)(key, process.env[key], this.logger) ?
                    AgentInstanceInfoBuilder.SECRET_VALUE_PLACEHOLDER : process.env[key];
            }
        });
        return slEnvVars;
    }
}
exports.AgentInstanceInfoBuilder = AgentInstanceInfoBuilder;
AgentInstanceInfoBuilder.DEFAULT_BROWSER_AGENT_VERSION = '1.0.0';
AgentInstanceInfoBuilder.SEALIGHTS_WINDOW_OBJECT = '$Sealights';
AgentInstanceInfoBuilder.SECRET_VALUE_PLACEHOLDER = '********';
//# sourceMappingURL=agent-instance-info-builder.js.map