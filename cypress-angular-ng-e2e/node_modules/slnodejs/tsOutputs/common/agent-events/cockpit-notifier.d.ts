import { AgentConfig } from '../config-process/config';
import { AgentInstanceData } from '../agent-instance-data';
import { BackendProxy } from '../http/backend-proxy';
import { IToolInfo, AgentEventCode, ITagInfo } from './agent-events-contracts';
import { IBackendProxy } from '../http/backend-proxy-interface';
import { IColorContextManager, Logger } from '../contracts';
/**
 * A class with static methods for sending notification to cockpit.
 * Using this class enables to avoid passing instance of AgentEventsController for each class
 */
export declare class CockpitNotifier {
    private static controller;
    private static controllerNullLogged;
    private static isDryRunMode;
    static notifyStart(agentConfig: AgentConfig, agentInstanceData: AgentInstanceData, logger: Logger, getSystemOffset: () => number, packageJsonFile?: Record<string, unknown>, backendProxy?: BackendProxy, tool?: IToolInfo, tags?: ITagInfo[], colorContextManager?: IColorContextManager): Promise<void>;
    static notifyStartNoOp(agentConfig: AgentConfig, agentInstanceData: AgentInstanceData, logger: Logger, getSystemOffset: () => number, packageJsonFile?: Record<string, unknown>, backendProxy?: BackendProxy, tool?: IToolInfo, tags?: ITagInfo[]): Promise<void>;
    static notifyShutdown(): Promise<void>;
    static sendGenericMessage(message: string): void;
    static sendWarning(message: string): void;
    static sendError(message: string): void;
    static sendErrorsBatch(messages: string[]): void;
    static sendEvent(code: AgentEventCode, data?: string | object): void;
    static sendEventOnce(code: AgentEventCode): void;
    private static verifyControllerInitialized;
    static reset(): void;
    static setDryRunMode(logger: Logger, proxy: IBackendProxy): void;
}
