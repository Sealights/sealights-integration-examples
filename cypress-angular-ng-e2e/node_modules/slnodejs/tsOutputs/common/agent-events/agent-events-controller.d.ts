import { AgentConfig } from '../config-process/config';
import { AgentEventCode, IAgentEvent, IAgentStartInfo, IPingData, ITagInfo, IToolInfo } from './agent-events-contracts';
import { BackendProxy } from '../http/backend-proxy';
import { Watchdog } from '../watchdog';
import { AgentInstanceData } from '../agent-instance-data';
import { IColorContextManager, Logger } from '../contracts';
export declare class AgentEventsController {
    private readonly getSystemOffset;
    private readonly colorContextManager?;
    private static readonly PING_INTERVAL;
    private static readonly MAX_SHUTDOWN_RETRIES;
    private _agentConfig;
    private _agentInstanceData;
    private backendProxy;
    private _logger;
    private _pingWatchdog;
    private _tags;
    private _tools;
    private startRequestStatus;
    private shutDownRetries;
    private active;
    private submittedEventsMap;
    constructor(agentConfig: AgentConfig, agentInstanceData: AgentInstanceData, logger: Logger, getSystemOffset: () => number, backendProxy?: BackendProxy, tool?: IToolInfo, tags?: ITagInfo[], colorContextManager?: IColorContextManager);
    submitAgentStartedEvent(packageJsonFile?: any): Promise<void>;
    private addColorToEvent;
    protected submitAgentEventRequest<T>(event: IAgentEvent<T> | IAgentEvent<T>[]): Promise<boolean>;
    buildAgentStartEvent(packageJsonFile: any): IAgentEvent<IAgentStartInfo>;
    buildAgentShutdownEvent(): IAgentEvent<IPingData>;
    submitAgentShutdownEvent(): Promise<boolean>;
    submitPingEvent(): void;
    submitEvent<T>(code: AgentEventCode, data?: T): void;
    submitEventOnce(code: AgentEventCode): void;
    submitGenericMessage(message: string): void;
    submitWarning(message: string): void;
    submitError(message: string): void;
    submitErrorsBatch(messages: string[]): void;
    protected sendMessage(message: string, code: AgentEventCode): void;
    submitConfigChanged(): void;
    get watchdog(): Watchdog;
    get agentConfig(): AgentConfig;
    get logger(): Logger;
    get tools(): IToolInfo[];
    resolveTags(): ITagInfo[];
    addTags(tags: ITagInfo[]): void;
    addTool(tollInfo: IToolInfo): void;
    private createBackendProxy;
    private initWatchdog;
    private getTimers;
    private buildEvent;
    get agentInstanceData(): AgentInstanceData;
}
