import { BackendProxy } from '../http/backend-proxy';
export interface IAgentInstanceInfo {
    agentId: string;
    technology: string;
    agentType: AgentTypes;
    agentVersion: string;
    buildSessionId?: string;
    uniqueModuleId?: string;
    labId?: string;
    testStage?: string;
    agentConfig: IMap;
    tags: ITagInfo[];
    processId: number;
    processArch: string;
    processSessionId?: number;
    argv: string[];
    cwd: string;
    envVars: IMap;
    tools: IToolInfo[];
    sendsPing: boolean;
}
export interface IMachineInfo {
    machineName?: string;
    arch?: string;
    cpu?: string;
    totalMemory?: string;
    os: string;
    localDateTime: string;
    localDateTimeUnix_s: number;
    runtime: string;
    ipAddress: string[];
}
export interface IBrowserEnvInfo {
    localDateTime: string;
    localDateTimeUnix_s: number;
    userAgent: string;
    location: string;
}
export interface INodeJsEnvInfo {
    nodeVersion: string;
    execArgv: string[];
    indexJsonDeps?: IMap;
    allocatedMemoryInMB?: number;
}
export interface ITagInfo {
    name: string;
    version: string;
}
export interface IToolInfo {
    name: string;
    version: string;
}
export interface IMap {
    [key: string]: any;
}
export interface IPingData {
    avgCpuLoad: number;
    freeRam_KB: number;
}
export interface IAgentCiInfo {
    jobName: string;
    jobId: string;
    jobUrl: string;
}
export declare enum AgentTypes {
    BUILD_SCANNER = "BuildScanner",
    TEST_LISTENER = "TestListener",
    BROWSER_AGENT = "BrowserAgent",
    SLNODEJS = "slnodejs"
}
export interface IAgentStartInfo {
    agentInfo: IAgentInstanceInfo;
    machineInfo: IMachineInfo;
    techSpecificInfo: INodeJsEnvInfo | IBrowserEnvInfo;
    pingData?: IPingData;
    ciInfo: IAgentCiInfo;
}
export interface IInfoBuilder<T> {
    fillData(): void;
    build(): T;
}
export declare enum AgentEventCode {
    GENERIC_AGENT_EVENT = 1000,
    AGENT_STARTED = 1001,
    AGENT_SHUTDOWN = 1002,
    AGENT_PING = 1003,
    AGENT_CONFIG_CHANGED = 1004,
    FIRST_COVERAGE_INSTRUMENTATION_PERFORMED = 1005,
    FIRST_TIME_HAS_EXECUTION = 1006,
    FIRST_TIME_NO_EXECUTION = 1007,
    AGENT_MUTED = 1008,
    AGENT_UNMUTED = 1009,
    FIRST_TIME_COLLECTED_FP = 1010,
    CONTEXT_PROPAGATION_TELEMETRY = 1019,
    GENERIC_MESSAGE = 2000,
    GENERIC_MESSAGE_SUPERUSER = 2999,
    WARN = 3000,
    AGENT_DID_NOT_SHUTDOWN = 3001,
    GENERIC_WARNING_SUPERUSER = 3999,
    GIT_SUBMODULES_DETECTED = 3501,
    GENERIC_ERROR = 4000,
    DUPLICATE_MODULE = 4001,
    DATA_PROCESSOR_NO_EXECUTIONS = 4002,
    DATA_PROCESSOR_INVALID_FORMAT = 4003,
    DATA_PROCESSOR_EMPTY_DATA = 4004,
    BUILD_MAP_SUBMISSION_ERROR = 4005,
    FOOTPRINTS_SUBMISSION_ERROR = 4006,
    TEST_EVENTS_SUBMISSION_ERROR = 4007,
    EXTERNAL_DATA_PROCESSOR_SUBMISSION_ERROR = 4008,
    UNSUPPORTED_OS = 4009,
    UNSUPPORTED_RUNTIME = 4010,
    THIRD_PARTY_PACKAGE_DETECTED = 4011,
    THIRD_PARTY_FILE_DETECTED = 4012,
    OTEL_ERROR = 4013,
    STATIC_INSTRUMENTATION_ERROR = 4021,
    FOOTPRINTS_LOSS = 4999,
    LEAST_VERBOSE_LOG = 5001,
    MOST_VERBOSE_LOG = 5999
}
export interface IAgentEvent<T> {
    type: AgentEventCode;
    utcTimestamp_ms: number;
    difftime: number;
    data?: T;
    colorName?: string;
}
export interface IAgentEventRequest<T> {
    agentId: string;
    events: IAgentEvent<T>[];
    appName?: string;
    buildSessionId?: string;
}
export declare enum AgentTechnologies {
    NODEJS = "nodejs",
    BROWSER = "browser"
}
export interface IAgentStartArgs {
    packageJsonFile?: Record<string, unknown>;
    backendProxy?: BackendProxy;
    tool?: IToolInfo;
    tags?: ITagInfo[];
}
