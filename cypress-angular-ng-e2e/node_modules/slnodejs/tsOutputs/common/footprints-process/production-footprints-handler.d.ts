import { Logger, IFootprintsFile, IFootprintsHandler } from '../contracts';
import { AgentConfig } from '../config-process/config';
import { AgentInstanceData } from '../../common/agent-instance-data';
export interface IProductionDataMap {
    meta: {
        createdAt: number;
        lastModified: number;
        bsid: string;
        hostName: string;
        pid: number;
        customerId: string;
        appName: string;
        branchName: string;
        buildName: string;
        labId: string;
    };
    methodsHits: IMap<number>;
}
export interface IMap<T> {
    [name: string]: T;
}
export declare class ProductionFootprintsHandler implements IFootprintsHandler {
    private metaData;
    private logger;
    private methodIdToHits;
    private filename;
    private httpConfig;
    private httpClient;
    private agentConfig;
    private collectionStartDate;
    private saveToFile;
    private sendToServer;
    constructor(cfg: AgentConfig, agentInstanceData: AgentInstanceData, logger: Logger);
    private setupProdListenerModes;
    private initHttpConfig;
    handleFootprints(footprintsPacket: IFootprintsFile, callback: (err: Error) => void): void;
    private saveAndSendMethodsHits;
    private getHitFiles;
    private convertFootprintsToProductionData;
    private convertAndSubmitToServer;
    private addHitsFromFootprints;
    private tryParseFileContent;
    private validateConfig;
    private addHitsFromFile;
    private writeDataToFile;
    private createFilePath;
    private combineArgsWithDash;
    private updateHits;
    toJSonObject(): {
        meta: {};
        methodsHits: {
            [methodId: string]: number;
        };
    };
}
