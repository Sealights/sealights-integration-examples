import { AgentConfig } from '../config-process/config';
import { Watchdog } from '../watchdog';
import { IstanbulToFootprints } from './istanbul-to-footprints';
import { EnvironmentDataService } from '../environment-data-service';
import { Logger, IFootprintsHandler } from '../contracts';
import { StateTracker } from '../state-tracker';
import { AgentInstanceData } from '../agent-instance-data';
export declare class FootprintsProcess {
    /**
     * Initial configuration
     */
    private cfg;
    /**
     * Background thread that tells the footprints service to send footprints from the queue to the server
     */
    private sendToServerWatchdog;
    /**
     * Foreground thread that prevents the process from shutting down, and kept alive while there are items to submit to the server or items are currently being submitted
     */
    private keepaliveWatchdog;
    /**
     * Proxy to the server for footprints submission
     */
    private footprintsServiceProxy;
    /**
     * Environments service, used to get environmental data for submission (process id, machine data, etc.)
     */
    private environmentDataService;
    private agentInstanceData;
    private istanbulToFootprints;
    private stateTracker;
    private logger;
    private collectionInterval;
    constructor(
    /**
     * Initial configuration
     */
    cfg: AgentConfig, 
    /**
     * Background thread that tells the footprints service to send footprints from the queue to the server
     */
    sendToServerWatchdog: Watchdog, 
    /**
     * Foreground thread that prevents the process from shutting down, and kept alive while there are items to submit to the server or items are currently being submitted
     */
    keepaliveWatchdog: Watchdog, 
    /**
     * Proxy to the server for footprints submission
     */
    footprintsServiceProxy: IFootprintsHandler, 
    /**
     * Environments service, used to get environmental data for submission (process id, machine data, etc.)
     */
    environmentDataService: EnvironmentDataService, agentInstanceData: AgentInstanceData, istanbulToFootprints: IstanbulToFootprints, stateTracker: StateTracker, logger: Logger);
    private isSubmittingFootprints;
    private footprintsQueue;
    enqueueCurrentFootprints(executionId: string, testName: string): void;
    private ensureKeepaliveThreadRunning;
    updateConfig(updatedCfg: AgentConfig): void;
    private sequence;
    private createFootprintsPacket;
    submitQueuedFootprints(): void;
    private fireQueueEmpty;
    private isRunning;
    start(): void;
    private stopCallbacks;
    stop(callback: () => void): void;
    handleTestIdChanged(newTestIdentifier: any, previousTestIdentifier: any): void;
    flushCurrentFootprints(): void;
    getQueueSize(): number;
    loadSlMapping(): Promise<void>;
}
