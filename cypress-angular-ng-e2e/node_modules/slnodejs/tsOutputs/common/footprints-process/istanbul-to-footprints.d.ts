import { IIstanbulModule, IIstanbulProcessMetrics, IExtendedIstanbulMetrics } from './istanbul-to-footprints-contract';
import { IFootprintsFile, Logger } from '../contracts';
import { AgentConfig } from '../config-process/config';
export declare class IstanbulToFootprints {
    private cfg;
    private totalTests;
    private eidToHitsIndex;
    private uniqueIdToElement;
    private testNameToTestData;
    private fileToSourceMapConsumer;
    private fileNameToAppFile;
    private globalCoverageContainer;
    private previousIstanbulCounters;
    private nycFinalReportData;
    private logger;
    constructor(cfg: AgentConfig, logger: Logger);
    private resetState;
    createFootprintsPackageFromQueue(queuedFootprints: IExtendedIstanbulMetrics[], extraData: IFootprintsFile): IFootprintsFile;
    createFootprintsPackageFromRawData(rawData: IExtendedIstanbulMetrics, extraData: IFootprintsFile): IFootprintsFile;
    private convertIstanbulDataToFootprints;
    private handleBranchesData;
    private handleFunctionsData;
    private addDeclarationFootprints;
    private getSourceMapForModule;
    private addOrUpdateElementHits;
    private getOrCreateTestData;
    private getOrCreateMethodElement;
    private getOrCreateBranchElement;
    private getOrCreateFootprintsAppFile;
    private createFootprintsAppData;
    private readSourceMapData;
    private adjustPathSlashes;
    protected getIstanbulCounters(): IIstanbulProcessMetrics;
    private getCoverageObject;
    private relativeModulePaths;
    getRelativeModulePath(module: IIstanbulModule): string;
    protected formatLoc(loc: {
        column: number;
        line: number;
    }): string;
    getCurrentFootprints(): IIstanbulProcessMetrics;
    protected getIstanbulCountersDiff(currentCounters: IIstanbulProcessMetrics): IIstanbulProcessMetrics;
    private logDiff;
    private newNumberArray;
    private loadOriginalModules;
    private resolveProjectRoot;
}
