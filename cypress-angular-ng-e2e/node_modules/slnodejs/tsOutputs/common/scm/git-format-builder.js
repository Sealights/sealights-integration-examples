"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitFormatBuilder = void 0;
const formatMap = {
    commit: '%H',
    authorName: '%an',
    authorEmail: '%ae',
    committerName: '%cn',
    committerEmail: '%ce',
    authorDate: '%at000',
    committerDate: '%ct000',
    title: '%s'
};
class GitFormatBuilder {
    constructor(asJSON = true, keyValueSeparator = ':', recordSeparator = ',') {
        this.asJSON = asJSON;
        this.keyValueSeparator = keyValueSeparator;
        this.recordSeparator = recordSeparator;
        this.params = [];
    }
    withCommit(alias = 'commit') {
        const format = this.buildSingleRecordFormat(alias, formatMap.commit);
        this.params.push(format);
        return this;
    }
    withAuthorName(alias = 'authorName') {
        const format = this.buildSingleRecordFormat(alias, formatMap.authorName);
        this.params.push(format);
        return this;
    }
    withAuthorEmail(alias = 'authorEmail') {
        const format = this.buildSingleRecordFormat(alias, formatMap.authorEmail);
        this.params.push(format);
        return this;
    }
    withAuthorDate(alias = 'authorDate') {
        const format = this.buildSingleRecordFormat(alias, formatMap.authorDate);
        this.params.push(format);
        return this;
    }
    withCommiterEmail(alias = 'commiterEmail') {
        const format = this.buildSingleRecordFormat(alias, formatMap.committerEmail);
        this.params.push(format);
        return this;
    }
    withCommiterName(alias = 'commiterName') {
        const format = this.buildSingleRecordFormat(alias, formatMap.committerName);
        this.params.push(format);
        return this;
    }
    withCommiterDate(alias = 'commiterDate') {
        const format = this.buildSingleRecordFormat(alias, formatMap.committerDate);
        this.params.push(format);
        return this;
    }
    withTitle(alias = 'title') {
        const format = this.buildSingleRecordFormat(alias, formatMap.title);
        this.params.push(format);
        return this;
    }
    build() {
        if (this.params.length < 1) {
            return '';
        }
        let format = this.params.join(this.recordSeparator);
        if (this.isWindows()) {
            format = format.replace(/"/g, '"""');
            if (this.asJSON) {
                return '{' + format + '}';
            }
        }
        if (this.asJSON) {
            return '\'{' + format + '}\'';
        }
        return format;
    }
    isWindows() {
        return /^win/.test(process.platform);
    }
    wrapByQuotes(srt) {
        return `"${srt}"`;
    }
    buildSingleRecordFormat(alias, propertyCode) {
        if (this.asJSON) {
            alias = this.wrapByQuotes(alias);
            propertyCode = this.wrapByQuotes(propertyCode);
        }
        return alias + this.keyValueSeparator + propertyCode;
    }
    static generateSeparators() {
        const randomChars = Math.random().toString(36).slice(2, 8);
        const otherRandomChars = Math.random().toString(36).slice(2, 8);
        return {
            keyValueSeparator: `#${randomChars}#`,
            recordSeparator: `$${otherRandomChars}$`,
        };
    }
}
exports.GitFormatBuilder = GitFormatBuilder;
//# sourceMappingURL=git-format-builder.js.map