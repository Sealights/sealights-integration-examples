"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitCloner = void 0;
const child_process_1 = require("child_process");
class GitCloner {
    runCommand(command, args, workspacepath) {
        return new Promise((reslove, reject) => {
            try {
                const cmd = command + ' ' + args;
                (0, child_process_1.execSync)(cmd, {
                    cwd: workspacepath
                });
                reslove('');
            }
            catch (e) {
                reject(e);
            }
        });
    }
    executeGit(gitArgs, log, workspacepath) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.runCommand('git', gitArgs, workspacepath);
        });
    }
    executeNpm(npmArgs, log, workspacepath) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.runCommand('npm', npmArgs, workspacepath);
        });
    }
    cloneRepo(repoUrl, destinationFolder) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.executeGit(`clone ${repoUrl}`, null, destinationFolder);
            console.log(res);
        });
    }
    npmInstall(workspacepath) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.executeNpm('install', null, workspacepath);
            return workspacepath;
        });
    }
    npmRun(args, workspacepath) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.executeNpm(`run ${args}`, null, workspacepath);
            return workspacepath;
        });
    }
}
exports.GitCloner = GitCloner;
// async function init() {
//     console.log('Init')
//     const c = new GitCloner();
//     const repoUrl = 'https://github.com/DanWahlin/Angular-Forms.git';
//     const dest = 'C:\\temp\\clones';
//     const cloneFolder = `${dest}\\Angular-Forms`;
//     await c.cloneRepo(repoUrl, dest);
//     console.log('Cloned');
//     await c.npmInstall(cloneFolder);
//     console.log('Installed');
//     await c.npmRun('build', cloneFolder)
//     console.log('Built');
//     fs.rmdirSync(cloneFolder, { recursive: true });
//     console.log('Deleted');
// }
//# sourceMappingURL=git-cloner.js.map