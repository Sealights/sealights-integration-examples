"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildSessionDataBuilder = void 0;
const abstract_data_builder_1 = require("./abstract-data-builder");
/**
 * Build the build session data (app, branch and build).
 * For config commands, returns the values from CLI.
 * For other commands, resolves using backend.
 */
class BuildSessionDataBuilder extends abstract_data_builder_1.AbstractDataBuilder {
    constructor(backendProxy) {
        super();
        this.backendProxy = backendProxy;
    }
    build(cmd) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.parseFromBuildSessionId(cmd);
        });
    }
    parseFromCli(cmd) {
        return {
            appName: cmd.appname,
            branchName: cmd.branch,
            buildName: cmd.build,
            buildSessionId: null
        };
    }
    parseFromBuildSessionId(cmd) {
        return __awaiter(this, void 0, void 0, function* () {
            const rawBuildSessionId = this.getRawBuildSessionId(cmd);
            if (rawBuildSessionId) {
                const response = yield this.backendProxy.getBuildSessionData(rawBuildSessionId);
                return this.mapBuildSessionResponse(response);
            }
            return null;
        });
    }
    mapBuildSessionResponse(response) {
        if (!response) {
            this.logger.error('BuildSession response is null');
            return null;
        }
        if (!response.buildName) {
            this.logger.error('Could not find \'buildName\'  in response');
            return null;
        }
        if (!response.branchName) {
            this.logger.error('Could not find \'branchName\' in response');
            return null;
        }
        if (!response.appName) {
            this.logger.error('Could not find \'appName\' in response');
            return null;
        }
        return {
            buildName: response.buildName,
            branchName: response.branchName,
            appName: response.appName,
            buildSessionId: response.buildSessionId
        };
    }
    getRawBuildSessionId(cmd) {
        if (cmd.buildsessionid) {
            return cmd.buildsessionid;
        }
        if (cmd.buildsessionidfile) {
            return this.getFromFile(cmd, 'buildsessionidfile');
        }
        else {
            this.logger.error('buildSessionId or buildSessionIdFile must be provided');
        }
    }
}
exports.BuildSessionDataBuilder = BuildSessionDataBuilder;
//# sourceMappingURL=build-session-data-builder.js.map