"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestRunnerBuildSessionDataBuilder = void 0;
const build_session_data_builder_1 = require("./build-session-data-builder");
class TestRunnerBuildSessionDataBuilder extends build_session_data_builder_1.BuildSessionDataBuilder {
    build(cmd) {
        const _super = Object.create(null, {
            build: { get: () => super.build }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this.shouldParseFromLabId(cmd)) {
                this.logger.info(`Resolving build session data for labid '${cmd.labid}'`);
                return this.backendProxy.getBuildSessionDataFromLabId(cmd.labid);
            }
            return _super.build.call(this, cmd);
        });
    }
    shouldParseFromLabId(cmd) {
        return cmd.labid && !cmd.buildsessionid && !cmd.buildsessionidfile;
    }
}
exports.TestRunnerBuildSessionDataBuilder = TestRunnerBuildSessionDataBuilder;
//# sourceMappingURL=test-runner-build-session-data-builder.js.map