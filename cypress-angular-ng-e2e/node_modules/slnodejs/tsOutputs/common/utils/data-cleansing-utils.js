"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataCleansingUtils = void 0;
class DataCleansingUtils {
    static removeSensitiveData(request) {
        if (request && typeof request === 'object') {
            const cloneRequest = Object.assign({}, request);
            DataCleansingUtils.removeSensitiveDataForFieldsAccordingToPatternWithSideEffects(cloneRequest, DataCleansingUtils.sensitiveFieldPattern);
            return cloneRequest;
        }
        return request;
    }
    static removeSensitiveDataForFieldsAccordingToPatternWithSideEffects(request, pattern) {
        Object.keys(request).forEach(fieldKey => {
            if (request[fieldKey]) {
                Object.keys(request[fieldKey]).forEach(key => {
                    if (!request[fieldKey][key])
                        return;
                    if (pattern.test(key)) {
                        if (typeof request[fieldKey][key] === 'object' && !Array.isArray(request[fieldKey][key])) {
                            request[fieldKey][key] = {};
                        }
                        else if (Array.isArray(request[fieldKey][key])) {
                            request[fieldKey][key] = [];
                        }
                        else {
                            request[fieldKey][key] = DataCleansingUtils.REMOVED_VALUE_TEXT;
                        }
                    }
                });
                if (typeof request[fieldKey] === 'object') {
                    DataCleansingUtils.removeSensitiveDataForFieldsAccordingToPatternWithSideEffects(request[fieldKey], pattern);
                }
            }
        });
    }
    static removeSensitiveDataForFieldWithSideEffects(request, field) {
        const fieldPath = field.split('.');
        let requestField = request;
        while (fieldPath.length && requestField) {
            const fieldPart = fieldPath.shift();
            if (!fieldPath.length && requestField[fieldPart]) {
                requestField[fieldPart] = DataCleansingUtils.REMOVED_VALUE_TEXT;
            }
            else {
                requestField = requestField[fieldPart];
            }
        }
    }
}
exports.DataCleansingUtils = DataCleansingUtils;
// TODO - what about the tokne? when removed it caused the message not to WORK.
DataCleansingUtils.sensitiveFieldPattern = /\b(proxy|machineName|ipAddress|ci_dependency_proxy_server|ci_environment_url|ci_server_url|ci_server_host|ci_server_name|circle_repository_url|jenkins_url)\b/i;
DataCleansingUtils.REMOVED_VALUE_TEXT = '<real value removed due to security configuration>';
//# sourceMappingURL=data-cleansing-utils.js.map