"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DependencyUtils = void 0;
class DependencyUtils {
    static parseDependencies(dependencyArray, logger) {
        if (!dependencyArray || !dependencyArray.length) {
            logger.warn('Dependencies array is empty');
            return [];
        }
        const parsedArray = [];
        dependencyArray.forEach(function (depStr) {
            depStr = depStr.trim();
            const deps = depStr.split(';');
            deps.forEach(function (d) {
                d = d.trim();
                if (d.indexOf('@') == -1) {
                    parsedArray.push({ buildSessionId: d });
                    return;
                }
                const threeParts = d.split('@'); //Must contain exactly 3 parts - appname, branch and build
                if (threeParts.length != 3)
                    throw 'Invalid dependency: ' + d;
                const appName = threeParts[0].trim();
                const branch = threeParts[1].trim();
                const build = threeParts[2].trim();
                if (!appName.length)
                    throw 'Missing appName: ' + d;
                if (!branch.length)
                    throw 'Missing branch: ' + d;
                if (!build.length)
                    throw 'Missing build: ' + d;
                parsedArray.push({ appName: appName, build: build, branch: branch });
            });
        });
        return parsedArray;
    }
    static parseDependenciesFile(parsedJson, logger) {
        if (!parsedJson || !Array.isArray(parsedJson)) {
            throw 'Invalid file structure (not a JSON document)';
        }
        const parsedDependencies = [];
        parsedJson.forEach(function (depItem) {
            if (depItem.buildName)
                depItem.build = depItem.buildName; //Accept both buildName and build. Different APIs have different naming convensions
            if (depItem.branchName)
                depItem.branch = depItem.branchName; //Accept both branchName and branch. Different APIs have different naming convensions
            if (depItem.appName && depItem.build && depItem.branch) {
                parsedDependencies.push({
                    appName: depItem.appName.toString(),
                    branch: depItem.branch.toString(),
                    build: depItem.build.toString()
                });
            }
            else if (depItem.buildSessionId) {
                parsedDependencies.push({
                    buildSessionId: depItem.buildSessionId.toString(),
                });
            }
            else {
                throw 'Invalid dependency item: ' + JSON.stringify(depItem);
            }
        });
        return parsedDependencies;
    }
}
exports.DependencyUtils = DependencyUtils;
//# sourceMappingURL=dependency-utils.js.map