import { SourceMapConsumer } from 'source-map';
import { Logger } from './contracts';
/**
 * Resolve the source data for method or branch.
 * Resolves the followingg:
 * Relative path of source file.
 * Absolute path of source file.
 * Start position in source file.
 * End position in source file.
 * The name of original methid (in case of method).
 */
export declare class SourceMapHandler {
    private consumer;
    private generatedFileName;
    private projectRoot;
    private logger;
    private static readonly WEBPACK_PREFIX;
    private static readonly REACT_GENERATED_FOLDER;
    private static readonly REACT_SOURCE_FOLDER;
    private static readonly WEBPACK_BOOTSTRAP_FILE;
    private static readonly WEBPACK_LAZY_FILE;
    private static readonly WEBPACK_SRC_ASYNC;
    private static readonly WEBPACK_SRC_LAZY;
    private static readonly WEBPACK_RESOURCE_SIGN;
    private static readonly NODE_MODULES;
    private static readonly THIRD_PARTIES_FOLDERS;
    private _start;
    private _end;
    private scmRootDir;
    private originalName;
    private scmFilesContainer;
    private _shouldSkipped;
    private _absolutePath;
    private _relativePath;
    constructor(consumer: SourceMapConsumer, generatedFileName: string, generatedStart: number[], generatedEnd: number[], projectRoot: string, logger: Logger);
    resolvePaths(): void;
    setScmParams(scmFilesContainer: any, scmRootDir: string): void;
    get absolutePath(): string;
    get relativePath(): string;
    get start(): Position;
    get end(): Position;
    get shouldSkipped(): boolean;
    private resolveAbsolutePath;
    private resolveRelativePath;
    private resolvePathsByScm;
    private resolveOriginalPosition;
    private isValidPositionObject;
    private trimWebpackPrefix;
    private isThirdPartyCode;
}
declare class Position {
    column: number;
    line: number;
    name: string;
    source: string;
    constructor(position: Partial<Position>);
    asFormatArray(): number[];
}
export {};
