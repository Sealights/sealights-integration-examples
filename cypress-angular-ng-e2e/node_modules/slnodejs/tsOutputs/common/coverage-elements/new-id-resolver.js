"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveNewId = void 0;
const path_1 = require("path");
const system_date_1 = require("../system-date");
const files_utils_1 = require("../utils/files-utils");
const istanbul_unique_id_converter_1 = require("./istanbul-unique-id-converter");
function resolveNewId(uniqueIdKey, moduleName, relativePath, coverageObject, logger) {
    moduleName = (0, path_1.normalize)(moduleName);
    const moduleData = resolveModule(coverageObject, moduleName, logger);
    if (!moduleData) {
        return;
    }
    if (!moduleData.uniqueIdsMap) {
        logger.debug(`building uniqueids map for ${moduleData.path}`);
        const before = (0, system_date_1.getSystemDateValueOf)();
        logger.debug(`file ${moduleData.path} not contains uniqueIdMaps, trying to reload`);
        createSLMapping(moduleData.path, relativePath, coverageObject, logger);
        const after = (0, system_date_1.getSystemDateValueOf)();
        logger.debug('*******************************create unique id map ******************************************');
        logger.debug(after - before);
        logger.debug('*******************************create unique id map ******************************************');
    }
    const newUniqueId = moduleData.uniqueIdsMap[uniqueIdKey];
    if (!newUniqueId) {
        logger.error(`could not generate new uniqueId for '${uniqueIdKey}'`);
    }
    return newUniqueId;
}
exports.resolveNewId = resolveNewId;
function resolveModule(coverageObject, moduleName, logger) {
    const withLeftSlashes = files_utils_1.FilesUtils.adjustPathSlashes(moduleName);
    const moduleData = coverageObject[moduleName] || coverageObject[withLeftSlashes];
    if (!moduleData) {
        logger.warn(`Coverage object not contains data for ${moduleName} or ${withLeftSlashes}`);
    }
    return moduleData;
}
function createSLMapping(fullPath, relativePath, coverageObject, logger) {
    const module = coverageObject[fullPath];
    const converter = new istanbul_unique_id_converter_1.IstanbulUniqueIdConverter(relativePath, logger);
    converter.createElementsArray(module);
    converter.process();
    coverageObject[fullPath].uniqueIdsMap = converter.uniqueIdsMap;
}
//# sourceMappingURL=new-id-resolver.js.map