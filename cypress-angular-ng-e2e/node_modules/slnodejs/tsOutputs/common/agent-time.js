"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentTime = void 0;
class AgentTime {
    constructor(syncIntervalSec, logger) {
        this.MIN_SYNC_INTERVAL = 10 * 1000;
        syncIntervalSec = syncIntervalSec * 1000;
        this.logger = logger;
        if (syncIntervalSec < this.MIN_SYNC_INTERVAL) {
            this.logger.warn(`Sync interval from remote config too small ${syncIntervalSec}sec. Using default minimum interval of ${this.MIN_SYNC_INTERVAL / 1000}sec.`);
            this.syncIntervalSec = this.MIN_SYNC_INTERVAL;
        }
        else {
            this.syncIntervalSec = syncIntervalSec
                ? syncIntervalSec * 1000
                : AgentTime.DEFAULT_SYNC_INTERVAL;
        }
    }
    static getOffset() {
        var _a, _b;
        return (_b = (_a = this._instance) === null || _a === void 0 ? void 0 : _a.timeSyncOffset) !== null && _b !== void 0 ? _b : 0;
    }
    initiateClockSync() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.syncTime();
            this.startSynchronization();
        });
    }
    syncTime() {
        return __awaiter(this, void 0, void 0, function* () {
            const { offset } = yield this.getSynchronizationTime();
            this.timeSyncOffset = offset;
        });
    }
    startSynchronization() {
        if (this.intervalStarted)
            return;
        const runSynchronizer = () => {
            this.syncTime();
            setTimeout(runSynchronizer, this.syncIntervalSec);
        };
        setTimeout(runSynchronizer, this.syncIntervalSec);
        this.intervalStarted = true;
    }
}
exports.AgentTime = AgentTime;
AgentTime.DEFAULT_SYNC_INTERVAL_SEC = 60;
AgentTime.DEFAULT_SYNC_INTERVAL = AgentTime.DEFAULT_SYNC_INTERVAL_SEC * 1000;
AgentTime.DEFAULT_TIMEOUT = 4000;
//# sourceMappingURL=agent-time.js.map